import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as o,o as r}from"./app-Bqw7s9Kh.js";const g="/assets/images/scholar/RustSan/figure1.png",a="/assets/images/scholar/RustSan/figure2.png",e="/assets/images/scholar/RustSan/listing1.png",i="/assets/images/scholar/RustSan/figure3.png",c="/assets/images/scholar/RustSan/listing2.png",u="/assets/images/scholar/RustSan/table1.png",l="/assets/images/scholar/RustSan/table2.png",p="/assets/images/scholar/RustSan/listing3.png",d="/assets/images/scholar/RustSan/table3.png",h="/assets/images/scholar/RustSan/figure4.png",R="/assets/images/scholar/RustSan/figure5.png",m="/assets/images/scholar/RustSan/table4.png",f="/assets/images/scholar/RustSan/table5.png",S="/assets/images/scholar/RustSan/listing4.png",b="/assets/images/scholar/RustSan/table6.png",_="/assets/images/scholar/RustSan/figure6.png",y={};function I(A,s){return r(),n("div",null,s[0]||(s[0]=[o('<h1 id="rustsan-retrofitting-addresssanitizer-for-efficient-sanitization-of-rust" tabindex="-1"><a class="header-anchor" href="#rustsan-retrofitting-addresssanitizer-for-efficient-sanitization-of-rust"><span>RustSan: Retrofitting AddressSanitizer for Efficient Sanitization of Rust</span></a></h1><p>论文收录于第33届 USENIX Security Symposium（USENIX Security ’24，CCF A） 的会议论文集，链接：<a href="https://www.usenix.org/conference/usenixsecurity24/presentation/cho-kyuwon" target="_blank" rel="noopener noreferrer">https://www.usenix.org/conference/usenixsecurity24/presentation/cho-kyuwon</a>。</p><h2 id="摘要" tabindex="-1"><a class="header-anchor" href="#摘要"><span>摘要</span></a></h2><p>Rust 正在作为一种安全的系统编程语言迅速普及，凭借其强类型与内存安全保证而受到关注。然而，Rust 的保障并非牢不可破。使用 <em>unsafe Rust</em>（Rust 的一个子变体）时，程序员可以暂时跳出 Rust 严格的语言语义，以安全换取灵活性；但 <code>unsafe</code> 代码块中的内存错误会对程序安全造成深远影响。因此，传统的动态内存错误检测（如模糊测试 <em>fuzzing</em>）已成为 Rust 生态中的常见实践，并通过不断披露的 CVE 战果证明了其有效性。</p><p><strong>RustSan</strong> 是对 AddressSanitizer（ASan）的“改造式”设计，用于高效检测 Rust 程序中的动态内存错误。我们的观察是：将 ASan 编译插桩到 Rust 程序后，许多被插桩的内存访问点在 Rust 语义保证下实际上是<strong>冗余</strong>的，即这些位置的内存安全在语义上仍然成立。RustSan 的做法是：识别并仅对那些<strong>必然</strong>或<strong>可能</strong>破坏 Rust 安全保证的位置进行插桩，同时在<strong>安全位置</strong>移除插桩。为此，RustSan 采用跨 IR 的程序分析，以精确追踪 <code>unsafe</code> 位置，并扩展了 ASan 的影子内存方案，用于检查 Rust 所需的<strong>非均匀内存访问</strong>（non-uniform memory access）验证机制。我们在 57 个 Rust crate 上，对 RustSan 的检测能力与性能进行了全面评估。RustSan 成功检测出 31 个实际 CVE 案例中的<strong>全部</strong>内存错误。在通用基准中（20 个 crate），相较 ASan，RustSan 的性能平均<strong>提升 62.3%</strong>。在对 6 个 crate 的模糊测试实验中，RustSan 的平均性能<strong>提升 23.52%</strong>，最高可达<strong>57.08%</strong>。</p><hr><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>Rust 作为一种实用的<strong>安全</strong>系统编程语言正日益受到欢迎。它通过严格的<strong>编译期规则</strong>与轻量的<strong>运行期检查</strong>来保证内存安全。许多新项目已将 Rust 作为主要编程语言（例如文献 [2, 4–8, 17, 21, 41]）。此外，Linux 内核中对 Rust 基础设施的纳入 [2] 也是 Rust 持续被广泛采纳的里程碑事件。</p><p>然而，这些安全保证并非没有代价。Rust 通过施加严格的语言语义，要求程序员与之“合作”。借此，语言设计与程序员共同产出能够被编译器与最小化运行时检查所验证的代码。Rust 的安全模型在某些需要精细化掌控的场景里可能过于严格。为此，Rust 提供了一个变体 <strong>unsafe Rust</strong>，它存在于使用 <code>unsafe</code> 关键字声明的代码块中。与在 Rust 中被禁止的行为相比（例如原始指针访问、绕过严格的所有权检查 [9]），<code>unsafe</code> 允许不受限制地访问这些语言语义。在某些程序中（例如与低层组件交互），或当程序员为了灵活性而选择以安全换取效率时，使用 <code>unsafe</code> 往往是不可避免的。</p><p>先前的研究已经考察了在 Rust 中使用 <code>unsafe</code> 的常见实践，以及在 Rust 程序中使用 <code>unsafe</code> 的影响 [22, 56]。这些工作发现：在 Rust 程序中，几乎<strong>所有</strong>内存错误都源自 <code>unsafe Rust</code> 的使用 [56]。作为回应，研究者提出了用于发现 Rust 内存错误的<strong>静态分析</strong>方法 [14, 26, 36, 37]，以及在运行时将<strong>安全 Rust</strong>与<strong>不安全 Rust</strong>隔离的方案 [15, 31, 33, 38, 45]。</p><p>静态分析方法在检测<strong>高度复杂的缺陷</strong>或<strong>仅在运行时暴露</strong>的问题方面能力有限。运行时隔离框架为识别 Rust 程序中不安全的子程序集合、以保护安全 Rust 部分奠定了基础。运行时隔离是<strong>遏制影响</strong>而非<strong>直接检测</strong>来自 <code>unsafe Rust</code> 的内存错误。此外，已有隔离方案往往依赖硬件特性（例如 Memory Protection Key，MPK）[15, 31]，从而阻碍了可移植性。随着“安全语言”兴起，人们正努力改造既有技术以在 Rust 中实现动态检测。但据我们所知，<strong>专为 Rust 设计</strong>且<strong>可移植</strong>的动态内存错误检测工具（即 <strong>sanitizers</strong>）仍然缺乏。</p><p>事实上，Rust 社区已经广泛采用 <strong>fuzzing</strong> 来测试 Rust，并报告了大量 Rust 程序的内存安全漏洞 [1, 3, 13]。Rust 编译器通过编译选项支持用 <strong>AddressSanitizer (ASan)</strong> 与其他 sanitizer 编译 Rust 程序 [3]。不幸的是，现有的动态测试实践与基础设施是从<strong>不安全语言</strong>（如 C/C++）沿袭而来，并<strong>未充分考虑</strong> Rust 内存错误的特殊性质。</p><p>ASan [24, 47] 由于其良好的<strong>检测能力</strong>与<strong>可移植性</strong>，已经成为动态内存错误检测的事实标准。然而，它的<strong>运行时开销</strong>与<strong>内存开销</strong>众所周知地较高。既有研究尝试改进 ASan 的运行时与内存负担 [27, 59, 60]。其中，优化 sanitizer 的<strong>元数据</strong>已被证明能显著降低包括 ASan 在内的运行时开销 [27]。更近的工作表明：<strong>消除</strong>强加在内存访问点上的<strong>冗余</strong>sanitizer 检查，是优化 ASan 的一个有前景方向 [59, 60]。</p><p>ASan 与其他 sanitizers 是为 C/C++ 等<strong>不安全语言</strong>而设计的，默认假定<strong>程序各处</strong>都可能存在内存错误。然而，即便与其“不安全邻居”比邻而居，Rust 程序中依然有<strong>大量代码</strong>保持着语言级的<strong>安全保证</strong> [15, 31, 38]。这意味着：我们有机会在<strong>不牺牲检测能力</strong>的前提下，显著减少 ASan 在 Rust 程序上的运行时开销。</p><hr><p>我们提出 <strong>RustSan</strong>：一种对 ASan 的“改造式”设计，充分利用 Rust 程序的独特性质——<strong>绝大多数内存访问</strong>仍然遵守语言的<strong>安全保证</strong>。RustSan 能<strong>精确识别</strong>内存对象与内存访问点的安全性，从而在<strong>安全的访问点</strong>上消除代价高昂的运行时检查。</p><p>RustSan 的<strong>跨 IR 分析（cross-IR）<strong>是其关键设计之一：它在 Rust 的</strong>高阶 IR（HIR）<strong>与</strong>中阶 IR（MIR）<strong>层面引入细粒度分析。我们的发现是：诸如 <code>unsafe</code> 之类的 Rust 语义</strong>并不会</strong>被充分传播到后端的 <strong>LLVM IR</strong> 层。这要求我们发展<strong>Rust 专属</strong>的分析技术。更重要的是，正如我们的分析所展示的，<strong>仔细审视</strong> Rust 的多级 IR 能提升精度，并减少后续分析阶段的复杂性。</p><p>基于上述安全信息，RustSan 在<strong>影子内存</strong>方案上扩展了 ASan，支持<strong>选择性插桩（selective instrumentation）<strong>与</strong>非均匀内存访问</strong>的校验。RustSan 在<strong>安全位置</strong>移除影子内存检查，同时对<strong>具有不同安全级别</strong>的内存访问点执行适当的验证。</p><p>我们对 RustSan 进行了<strong>广泛评估</strong>，涵盖共计 <strong>57</strong> 个 Rust crate。通过复现 <strong>31</strong> 个由 CVE 披露的内存错误，我们验证了：即使移除了大量<strong>冗余</strong>sanitizer 检查，RustSan 仍<strong>保持</strong> ASan 的检测能力。同时，我们在 <strong>18</strong> 个通用 Rust 程序的基准上测量了 RustSan 的性能：相对 ASan，平均<strong>提升 62.3%</strong>。在<strong>模糊测试</strong>场景中，RustSan 的平均性能提升<strong>23.52%</strong>，最高可达<strong>57.08%</strong>。</p><p><strong>总之，我们的贡献概括如下：</strong></p><ul><li>提出一种<strong>改造式 ASan 设计</strong>：通过<strong>选择性插桩</strong>显著降低 Rust 程序的运行时 sanitizer 开销。</li><li>融合<strong>跨 IR 的静态分析</strong>：精确识别 Rust 中的 <code>unsafe</code> 代码块及其<strong>数据流传播</strong>。</li><li><strong>改造</strong> ASan 的影子内存方案：支持<strong>选择性插桩</strong>，并为<strong>安全 Rust</strong>与<strong>不安全 Rust</strong>提供<strong>非均匀内存校验</strong>模型。</li><li>对 <strong>57</strong> 个 Rust crate 进行<strong>全面评估</strong>：验证检测能力、可扩展性与性能改进。</li><li><strong>开源发布</strong> RustSan，希望促进社区采用，从而高效开展 Rust 程序的动态测试。</li></ul><h2 id="_2-背景-background" tabindex="-1"><a class="header-anchor" href="#_2-背景-background"><span>2. 背景（Background）</span></a></h2><p>本节我们简要说明理解本文所需的关键概念。</p><h3 id="_2-1-addresssanitizer" tabindex="-1"><a class="header-anchor" href="#_2-1-addresssanitizer"><span>2.1 AddressSanitizer</span></a></h3><p>ASan [24, 47] 是一种通用的内存错误检测器，因其与主流编译器良好的兼容性与可用性而被广泛采用。值得注意的是，ASan 在许多动态测试场景（包括模糊测试 fuzzing）中，已成为事实上的标准化 <strong>sanitizer</strong> 组件。</p><p>ASan 通过维护一片<strong>影子内存</strong>（shadow memory）来表示进程虚拟地址空间中各字节地址的有效性，以此提供内存安全。影子内存的每个字节都可以编码成所谓的 <strong>redzone</strong> 值，用来把相应的内存地址标记为<strong>不可访问</strong>（invalid）。ASan 在影子内存里编码了多种 redzone 值，以区分不同类型的错误。当检测到一次对带有<strong>非零</strong>影子值（例如 <code>0xfd</code>）的 redzone 的非法访问时，ASan 会用该 redzone 值去索引一个<strong>预定义表</strong>（包含根因信息），并据此生成报告。凡是用 ASan 编译的程序中出现的<strong>所有内存访问指令</strong>，在执行之前都要通过查询影子内存来完成校验。</p><p>ASan 通过在对象的<strong>前后</strong>插入 redzones 来检测对象上的<strong>空间（spatial）内存安全</strong>违规。这样，所有<strong>越界访问</strong>都会在 sanitizer 检查里被发现，因为这些检查会查询影子内存。ASan 还会在堆对象（use-after-free）以及可选的栈对象上检测<strong>时间（temporal）内存安全</strong>违规。通过用 redzones 标记对象的地址范围，该对象会在影子内存中被<strong>作废</strong>（invalidated）。例如，ASan 会对<strong>最近释放</strong>的一组堆对象维持一片<strong>隔离区</strong>（quarantined set），方式是在这些对象上打 redzone 标记，以捕获<strong>释放后使用</strong>（use-after-free）。</p><h3 id="_2-2-rust-的安全模型-rust-safety-model" tabindex="-1"><a class="header-anchor" href="#_2-2-rust-的安全模型-rust-safety-model"><span>2.2 Rust 的安全模型（Rust safety model）</span></a></h3><p>Rust 通过其<strong>所有权（ownership）<strong>模型来提供内存安全。在该模型下，Rust 编译器在</strong>静态</strong>层面强制每个内存对象<strong>恰好</strong>隶属于<strong>一个</strong>拥有者变量（owner）。当某个变量离开作用域时，编译器会<strong>自动插入</strong>释放其所拥有内存对象的代码，从而让程序员摆脱显式内存管理的负担。</p><p>然而，这样的所有权模型对一些通用程序来说可能<strong>过于严格</strong>。为支持更灵活的编程范式，Rust 还支持对内存对象进行<strong>借用（borrowing）</strong>，以便在<strong>无所有权</strong>的前提下访问资源。为了安全地启用借用，Rust 为资源关联<strong>生命周期（lifetime）</strong>，并引入 <strong>借用检查器（borrow checker）</strong> 以保证被借用的引用不会活得比其底层资源更久。</p><p><strong>不安全 Rust 与 Rust 的安全保证。</strong> Rust 提供了一个以 <code>unsafe</code> 关键字标示的<strong>不安全子语言</strong>，用于在<strong>暂时</strong>绕过其严格的所有权模型时使用。正如既有研究所报道的那样 [22]，<code>unsafe Rust</code> 在实践中相当普遍，我们的评测对象中也能见到这种情况。需要强调的是，<code>unsafe</code> 的<strong>不安全性并不局限</strong>于 <code>unsafe</code> 代码块的边界之内；事实上，在 <code>unsafe</code> 块里发生交互的对象会沿着<strong>数据流路径</strong>被传播到代码块之外，从而<strong>危及</strong>原本对<strong>安全 Rust</strong>所作的安全假设 [15, 31, 38]。位于 <code>unsafe</code> 内部的<strong>被破坏对象</strong>可能会被安全 Rust 消费，并<strong>诱使</strong>安全 Rust 产生内存错误。因此，即便某些内存访问点位于<strong>安全 Rust</strong>（即不在 <code>unsafe</code> 块内），它们也可能被<strong>转化为不安全</strong>。</p><p><strong>在运行时隔离不安全 Rust。</strong> 既有工作提出了运行时隔离方案，用于把安全 Rust 从 <code>unsafe</code> 带来的内存不安全中<strong>保护</strong>起来 [10, 15, 31, 33, 38, 45]。这一任务不仅要<strong>约束</strong> <code>unsafe</code> 代码块本身的操作，还要处理由于<strong>越界传播的受损对象</strong>在安全 Rust 中被使用而<strong>可能发生的漏洞</strong> [15, 38]。</p><h2 id="_3-rustsan-概览" tabindex="-1"><a class="header-anchor" href="#_3-rustsan-概览"><span>3. RUSTSAN 概览</span></a></h2><p><strong>图1</strong> 展示了 <strong>RustSan</strong> 的整体框架。本文这一节将先介绍后续用于描述 RustSan 设计所需的概念与术语（见 §3.1），随后给出 <strong>编译期</strong>（§3.2）与 <strong>运行期</strong>（§3.3）两部分操作流程的总览。</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-1-定义与内存校验模型" tabindex="-1"><a class="header-anchor" href="#_3-1-定义与内存校验模型"><span>3.1 定义与内存校验模型</span></a></h3><p>本小节介绍贯穿全文的术语体系，用以描述 <strong>RustSan</strong> 的设计。</p><p><strong>对象（objects）与访问点（access sites）。</strong> RustSan 在<strong>影子内存（shadow memory）<strong>中维护</strong>内存对象</strong>的有效性状态。程序中的内存访问指令（即 <em>load</em> 与 <em>store</em>）会被插桩，在执行前查询影子内存以进行有效性校验。我们将这些插桩指令统称为<strong>访问点</strong>（<em>access sites</em>，简称 <strong>sites</strong>）。</p><p><strong>对象的安全性。</strong> 我们与既有工作 [15, 38] 一样，区分<strong>安全对象</strong>与<strong>不安全对象</strong>：当某个对象在 <code>unsafe</code> 代码块内被<strong>修改</strong>时，它会成为<strong>不安全传播的源（source）</strong>。所有经由该不安全源沿<strong>数据流</strong>受到影响的对象，均被视为<strong>不安全对象</strong>。<strong>安全对象</strong>含义不言自明——凡<strong>非不安全</strong>者皆为安全对象。RustSan 还定义了另一类与对象安全性相关的概念，称为<strong>重叠对象（overlapping objects）</strong>。在介绍其他相关概念之后，我们会再回到这一概念。</p><p><strong>访问点的安全性。</strong> 访问点是否安全由其<strong>可能访问到的对象</strong>决定。举例来说，<strong>安全访问点</strong>按定义应当在<strong>任何控制流路径</strong>下都<strong>只能</strong>访问到<strong>安全对象</strong>。<strong>不安全访问点</strong>是指<strong>位于 <code>unsafe</code> 代码块内部</strong>的访问点。我们用术语 <strong>伪安全访问点（false-safe site）</strong> 表示<strong>位于安全 Rust 中、但可能会访问到不安全对象</strong>的那些访问点。更具体地说，若某访问点<strong>不在</strong> <code>unsafe</code> 代码块内，但<strong>在运行时可能访问到不安全对象</strong>，则它是伪安全的。</p><p><strong>重叠对象（overlapping objects）。</strong> 可借助 <strong>points-to</strong> 关系 [11] 来解释。当一个<strong>伪安全访问点</strong>在运行时<strong>既可能</strong>访问到安全对象<strong>又可能</strong>访问到不安全对象时，凡<strong>可能被该访问点指向</strong>的所有对象构成其 <strong>may-point-to</strong> 集合。我们将<strong>属于该 may-point-to 集合中的安全对象</strong>定义为<strong>重叠对象</strong>（它们与不安全对象同属一个 may-point-to 集）。这种对象安全性的划分在 RustSan 的<strong>内存校验模型</strong>与其<strong>影子内存方案</strong>中具有重要意义；在后文展开程序分析时我们还会再次讨论它。</p><p><strong>访问点的内存校验模型。</strong> 在<strong>移除安全访问点</strong>上的 sanitizer 检查的同时，RustSan 会对<strong>剩余的</strong>不安全与伪安全<strong>内存访问点</strong>实施<strong>分离的访问校验</strong>；这些校验与 ASan 基于 redzone 的<strong>越界</strong>错误检查<strong>并行存在</strong>。RustSan 会检测<strong>来自不安全访问点</strong>对<strong>安全对象</strong>的<strong>一切访问</strong>——注意，按定义且经离线分析识别，<strong>安全对象本不应从不安全访问点可达</strong>。对于<strong>伪安全访问点</strong>，RustSan <strong>只允许</strong>访问两类对象：1）<strong>重叠对象</strong>（安全对象的一个子集），以及 2）<strong>不安全对象</strong>。</p><p><strong><code>unsafe</code> 关键字 与 “unsafe”。</strong> 在阐明了访问点与对象的（不）安全性之后，我们再强调本文术语中的区分：当我们指 <strong>Rust</strong> 的关键字 <code>unsafe</code> 时，始终写作 <strong><code>unsafe</code></strong>（加粗并打字机体）；而 <strong>“unsafe”</strong>（不加代码体）一词用于<strong>一般意义</strong>，指<strong>可能被破坏</strong>、并且<strong>在任意访问点都可能被访问</strong>的对象。</p><h3 id="_3-2-跨-ir-分析-cross-ir-analysis" tabindex="-1"><a class="header-anchor" href="#_3-2-跨-ir-分析-cross-ir-analysis"><span>3.2 跨 IR 分析（Cross-IR analysis）</span></a></h3><p>RustSan 的第一项任务，是依据前述定义为<strong>对象</strong>与<strong>访问点</strong>划分安全性。为此，RustSan 实现了一个<strong>细粒度分析</strong>，以提取<strong>仅存在于 Rust IR（HIR 与 MIR）<strong>中的信息。其中之一是：位于 <code>unsafe</code> 块中的</strong>会修改内存的语句</strong>。这些语句在后续的 LLVM IR 分析中，会被作为<strong>不安全性的源（source）</strong>，用于判定对象与访问点的安全性（图 1 中的 <strong>①</strong>）。向 LLVM IR 阶段提供越<strong>细粒度</strong>的信息，可使该阶段的分析更加高效。下一类关键信息是：<strong>Rust 特有的分配函数</strong>；我们的 LLVM IR 分析需要识别它们，才能<strong>可靠追踪堆分配点</strong>（<strong>②</strong>）。</p><p>更具象的分析与插桩发生在<strong>LLVM IR 编译阶段</strong>。在 LLVM 中，RustSan 采用依赖 <strong>Value-Flow Graph</strong> [50] 的 <strong>points-to 分析</strong> [11]，以<strong>迭代地</strong>确定对象与访问点的安全性；其起点是前一阶段 MIR/HIR 分析中提炼出的<strong>源（sources）</strong>（<strong>③</strong>）。同时，RustSan 还通过<strong>分配点识别方案</strong>跟踪 Rust 的分配位置，使其在插桩中能够<strong>可靠地重载堆对象的分配</strong>（<strong>④</strong>）。</p><hr><h3 id="_3-3-rustsan-的影子内存方案-rustsan-shadow-memory-scheme" tabindex="-1"><a class="header-anchor" href="#_3-3-rustsan-的影子内存方案-rustsan-shadow-memory-scheme"><span>3.3 RustSan 的影子内存方案（RustSan shadow memory scheme）</span></a></h3><p>编译期分析得到的信息与能力，随后会在 RustSan 的<strong>影子内存方案</strong>中被物化为<strong>影子内存管理</strong>与<strong>插桩</strong>。RustSan 将其<strong>非均匀访问校验模型</strong>改造并嵌入 ASan 的影子内存机制之中，从而为被分类为<strong>安全</strong>、<strong>不安全</strong>与<strong>伪安全</strong>的访问点，强制执行<strong>不同的内存视图（memory views）</strong>。</p><p>RustSan 首先引入一种<strong>分配器重载（allocator overriding）<strong>方案：在影子内存中对</strong>安全对象</strong>与<strong>不安全/重叠对象</strong>进行上色（coloring）。做法是：将<strong>不安全对象</strong>与<strong>重叠对象</strong>的<strong>堆内存分配点</strong>替换为 RustSan 的<strong>分配器封装（allocator wrappers）</strong>（图 1 的 <strong>⑤</strong>）。</p><p>随后，RustSan 基于其跨 IR 分析得到的<strong>访问点安全信息</strong>，<strong>扩展</strong>了 ASan 的插桩方案：对被判定为<strong>安全</strong>的内存访问点<strong>移除 ASan 插桩</strong>；而对<strong>不安全</strong>与<strong>伪安全</strong>的访问点，则<strong>插桩</strong>以在访问前查询影子内存，获取被访问对象的安全性，从而落实其<strong>感知安全性的内存校验模型</strong>（<strong>⑥</strong>）。</p><h2 id="_4-跨-ir-rust-的-hir-mir-分析" tabindex="-1"><a class="header-anchor" href="#_4-跨-ir-rust-的-hir-mir-分析"><span>4. 跨 IR：Rust 的 HIR/MIR 分析</span></a></h2><p><strong>RustSan</strong> 在 Rust 的 <strong>HIR/MIR</strong> 层实现了细粒度分析，使对 Rust 特有信息的分析更加<strong>准确</strong>且<strong>高效</strong>。已有工作 [15, 38] 也使用了 MIR，但它们大多仅将 <strong><code>unsafe</code> 块内的所有语句</strong>统一打标并一路传播到 <strong>LLVM IR</strong>。我们的发现是：Rust 的 <code>unsafe</code> 语义<strong>并不能</strong>很好地传播到 LLVM IR。<code>unsafe</code> 是一种供 <strong>HIR/MIR</strong> 编译阶段消费的语言语义，最终生成的 LLVM IR <strong>并不携带</strong>这类信息；同时，与 <code>unsafe</code> HIR 语句相对应的 LLVM IR 指令在多轮变换后<strong>难以区分</strong>。此外，若在 HIR/MIR 层进行<strong>预分析</strong>，某些分析还能变得更高效。</p><p>因此，我们在 HIR/MIR 层必须识别如下四类<strong>关键信息</strong>（information）：</p><ul><li><strong>I1</strong>：<code>unsafe</code> 块中的<strong>内存访问语句</strong></li><li><strong>I2</strong>：<code>unsafe</code> 块中的<strong>内存修改语句</strong></li><li><strong>I3</strong>：<strong>分配堆内存</strong>的 Rust 函数</li><li><strong>I4</strong>：<strong>可能</strong>分配堆内存的 Rust 特有方法</li></ul><p>若不在此阶段收集，上述信息在后续的翻译或编译中<strong>可能丢失</strong>，也会让后续阶段的分析更加复杂。<strong>I1</strong> 将用于<strong>访问点安全性分类</strong>时定位内存访问点，并最终用于在 RustSan 的影子内存方案中实施<strong>选择性插桩</strong>（见 §3.1）。<strong>I2</strong> 是<strong>不安全对象的“出生地”</strong>：凡在 <code>unsafe</code> 中至少被修改过一次的对象，都被视作不安全，这些语句也就构成了<strong>不安全传播的源</strong>。因此，对<strong>内存修改语句</strong>与其超集（<strong>I1</strong>）做精细区分，能够减少对对象<strong>过度着色</strong>（overtainting）。<strong>I3</strong> 与 <strong>I4</strong> 则是后续 LLVM 分析<strong>准确识别堆分配点</strong>所必需的信息。</p><p>在提取这些信息的过程中，RustSan 的 HIR/MIR 分析器引入了三项新技术：</p><ol><li><strong>语句级内存访问跟踪</strong>（Statement-level memory accesses tracking），</li><li><strong>递归安全作用域分析</strong>（Recursive safety scope analysis），</li><li><strong>分配函数识别</strong>（Allocation function identification）。</li></ol><p>下面详细说明 RustSan 的分析流程。</p><hr><h3 id="_4-1-背景-rust-的-hir-mir" tabindex="-1"><a class="header-anchor" href="#_4-1-背景-rust-的-hir-mir"><span>4.1 背景：Rust 的 HIR/MIR</span></a></h3><p>Rust 前端编译器 <strong>rustc</strong> 在内部使用两种 IR：<strong>HIR</strong> 与 <strong>MIR</strong>。<code>unsafe</code> 块<strong>只能</strong>在 <strong>HIR</strong> 层被识别；一旦代码被翻译到 MIR，<code>unsafe</code> 的边界就<strong>不可见</strong>。因此，RustSan 使用 <strong>HIR</strong> 来提取与 <code>unsafe</code> 块相关的信息；而在更细粒度的<strong>语句级分析</strong>上，则使用对分析更友好的 <strong>MIR</strong>。另外，MIR 与 HIR 之间存在<strong>一一映射</strong>，从而允许我们在分析 MIR 语句时<strong>回查</strong>其对应的 HIR 以获取 HIR 专属信息。</p><hr><h3 id="_4-2-语句级内存访问跟踪-statement-level-memory-access-tracking" tabindex="-1"><a class="header-anchor" href="#_4-2-语句级内存访问跟踪-statement-level-memory-access-tracking"><span>4.2 语句级内存访问跟踪（Statement-level memory access tracking）</span></a></h3><p>RustSan 实现了<strong>语句级分析</strong>来精确跟踪内存访问语句（<strong>I1</strong>），并从中进一步提炼出<strong>写入语句</strong>（<strong>I2</strong>）。若对 <strong>I2</strong> 采用过度保守的近似，就会在 LLVM IR 阶段<strong>人为扩大</strong>不必要的不安全对象集合，并以<strong>级联方式</strong>增加不安全与伪安全访问点的数量。因此，即便能减少很小一部分 <strong>I2</strong>，对 RustSan 的性能收益也<strong>至关重要</strong>——其来源正是<strong>移除了安全访问点上的检查</strong>。</p><p><strong>区分写入语句。</strong> 我们通过分析 <strong>MIR</strong> 语法在 <strong>I1</strong> 中将<strong>写入</strong>与<strong>读取</strong>区分开来。我们系统梳理了 Rust MIR 中<strong>所有可能的“写内存”语句形式</strong>，从而构建出 <strong>I2</strong>（是 <strong>I1</strong> 的一个<strong>子集</strong>）。注意：虽然我们只跟踪 <code>unsafe</code> 中的<strong>写语句</strong>（因为它们是不安全对象的<strong>来源</strong>），但对由此产生的不安全对象进行 sanitizer 检查时，<strong>读写</strong>都会被检测到。</p><p><strong>剔除严格局部写入。</strong> 语句级分析还允许进一步缩减 <strong>I2</strong>。RustSan 使用 <strong>MIR 数据流分析</strong>来找出修改<strong>严格局部（strictly-local）变量</strong>的语句：这类变量从其当前不安全作用域<strong>没有</strong>向外的数据流边，因此可以<strong>安全剔除</strong>，因为它们不会污染任何安全变量。对于<strong>修改了严格局部变量</strong>的语句，RustSan 将该局部变量的<strong>栈分配</strong>标记为“分配了一个不安全对象”，并从 <strong>I2</strong> 中移除对应写语句，以<strong>减轻</strong>后续 LLVM IR 分析的负担。</p><hr><h3 id="_4-3-递归安全作用域分析-recursive-safety-scope-analysis" tabindex="-1"><a class="header-anchor" href="#_4-3-递归安全作用域分析-recursive-safety-scope-analysis"><span>4.3 递归安全作用域分析（Recursive safety scope analysis）</span></a></h3><p>除了限制过度近似，我们还缓解了 MIR 分析中可能出现的一类<strong>漏报</strong>。在 Rust 中，<strong>作用域（scope）<strong>是代码块的基本单位（例如 <code>unsafe { ... }</code> 本身就是一个作用域）。我们观察到：当 MIR 级优化器在 <code>unsafe</code> 块内将</strong>内联函数调用</strong>包上一层内部作用域（例如插入花括号）时，<code>unsafe</code> 内部<strong>经常出现嵌套作用域</strong>。</p><p>回忆：一个代码块是否安全（即<strong>是否处于 <code>unsafe</code> 内</strong>）在 MIR 中<strong>不可见</strong>。因此，在 MIR 分析中判定作用域安全与否，必须通过<strong>带作用域 ID 的回查</strong>去查询 HIR。我们发现，若不<strong>显式</strong>地把作用域分析做成<strong>递归</strong>（即向上遍历到最外层作用域）且<strong>感知 HIR</strong>，则 <code>unsafe</code> 内部的嵌套作用域<strong>可能被误判为安全</strong>。后果是：可能<strong>遗漏</strong>整段<strong>内联函数</strong>中的<strong>不安全内存访问语句</strong>。既有工作 [38] 并未正确识别这些嵌套作用域，导致在 <strong>I1</strong> 上出现漏报。由于相关实现尚未公开，我们无法确认 <strong>TRust</strong> [15] 是否也存在同类问题。</p><blockquote><p>笔者注：也就是说，需要递归将unsafe从外部作用域传递到子作用域</p></blockquote><hr><h3 id="_4-4-分配函数识别-allocation-function-identification" tabindex="-1"><a class="header-anchor" href="#_4-4-分配函数识别-allocation-function-identification"><span>4.4 分配函数识别（Allocation function identification）</span></a></h3><p>最后，RustSan 基于仅在 <strong>MIR</strong> 可用的<strong>类型信息</strong>提出两条 <strong>Rust 特有的启发式</strong>，用于识别<strong>可能的堆分配函数/方法</strong>：</p><ol><li><p><strong>基于分配器 trait 的实现。</strong> 若某类型实现了<strong>分配器相关 trait</strong>（如 <code>Global</code> 或 <code>bumpalo</code>），我们就把其实现的方法（如 <code>Global::alloc()</code>）标记为<strong>堆分配函数</strong>（<strong>I3</strong>）。后续在 LLVM 中基于 <strong>SVF</strong> 的 points-to 分析会使用这些信息来建模 Rust 的堆对象分配。</p></li><li><p><strong>以分配器 trait 为边界的类型。</strong> 对于以<strong>分配器 trait</strong>作为<strong>边界（bounds）<strong>的类型（如 <code>Vec&lt;T, A: Allocator&gt;</code>），RustSan 将其</strong>所有实现的方法</strong>都视为<strong>潜在</strong>的堆分配方法（<strong>I4</strong>）。随后在 LLVM 中，我们通过检查<strong>调用图</strong>（§5.2）这些方法是否<strong>实际触发</strong>了堆分配，把这些“潜在方法”<strong>细化</strong>为<strong>真实的分配方法集合</strong>。</p></li></ol><p>识别这些分配函数并将其作为<strong>污点源</strong>，可<strong>降低程序分析复杂度</strong>。此启发式避免了在 LLVM 分析中，从 Rust 层的分配函数一路追踪到<strong>本地分配函数</strong>（如 C 库的 <code>malloc</code>）所带来的不必要复杂度提升。</p><h2 id="_5-跨-ir-llvm-ir-分析" tabindex="-1"><a class="header-anchor" href="#_5-跨-ir-llvm-ir-分析"><span>5. 跨 IR：LLVM IR 分析</span></a></h2><p><strong>图2</strong> 展示了 <strong>RustSan</strong> 在 <strong>LLVM IR</strong> 层执行的各类分析。当上一阶段的 <strong>MIR</strong> 已被翻译为 <strong>LLVM IR</strong>，并携带了前述提取的关键信息（<strong>I1–I4</strong>）后，RustSan 会据此识别如下信息：</p><figure><img src="'+a+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>I5</strong>：内存<strong>访问点</strong>的安全性（safe / unsafe / false-safe）</li><li><strong>I6</strong>：内存<strong>分配点</strong>的安全性（safe / unsafe / overlapping）</li></ul><p>以上信息用于支撑 RustSan 运行期组件对<strong>影子内存</strong>的管理以及对<strong>访问点插桩</strong>的实施。<br><strong>I5</strong> 使 RustSan 能按访问点的安全级别<strong>选择性</strong>地应用检查：对<strong>安全</strong>访问点<strong>省略</strong>插桩；而对<strong>不安全</strong>与<strong>伪安全</strong>访问点，则提供<strong>不同的内存访问视图</strong>（详见 §6）。<br><strong>I6</strong> 则用于识别所有可能被用来分配<strong>不安全/重叠</strong>堆对象的 Rust 分配函数（例如已得到的 <strong>I3、I4</strong> 集合中的函数）。这些<strong>分配点（allocation sites）<strong>将被替换为</strong>包装分配函数</strong>，以便<strong>更新影子内存</strong>中与对象安全信息对应的条目。</p><hr><h3 id="_5-1-对象与访问点的分类流水线-object-and-site-classification-pipeline" tabindex="-1"><a class="header-anchor" href="#_5-1-对象与访问点的分类流水线-object-and-site-classification-pipeline"><span>5.1 对象与访问点的分类流水线（Object and site classification pipeline）</span></a></h3><p>RustSan 采用 <strong>SVF</strong> 中对 <strong>Andersen 指针分析</strong>的实现（字段敏感、上下文不敏感、流不敏感）[11]，以分类内存对象与内存访问点的安全性（<strong>I5</strong>）。这种“上下文不敏感、但字段敏感”的流不敏感分析在保证一定精度的同时，能<strong>扩展到大型程序</strong>——这是 sanitizer 的必要要求。</p><blockquote><p>笔者注：</p><ul><li><p><strong>字段敏感（field-sensitive）</strong>： 把同一结构体/对象的不同字段当作<strong>彼此独立</strong>的内存位置来分析。 例：对 <code>struct S { A *f; B *g; }</code>，分析会区分 <code>p-&gt;f</code> 与 <code>p-&gt;g</code> 的指向，不会把它们混为一谈。这样能减少“不同字段被误认为可达”的假阳性。</p></li><li><p><strong>上下文不敏感（context-insensitive）</strong>： 不区分函数在**不同调用点（调用上下文）**下的行为；一个函数只分析一次，把所有调用者的影响都合并。 例：<code>foo(x)</code> 被多处以不同实参调用，分析把这些调用的别名关系合在一起，可能导致保守的（过近似的）结果，但可显著提升可扩展性。</p></li><li><p><strong>流不敏感（flow-insensitive）</strong> 忽略<strong>程序内语句的执行顺序与控制流</strong>，把同一变量的所有可能赋值统一考虑；等价于“把块内语句当作可任意排列”。 例：对</p></li></ul><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者相反顺序，分析都会得到 <code>p</code> 可能指向 <code>{&amp;a, &amp;b}</code>。这同样是保守近似，换来更快的全局解。</p><p>综合起来：<strong>字段敏感 +（上下文、流）不敏感</strong> 是一种常见折中：在对象内部保持较高精度（区分字段），而在跨调用与控制流层面做合并，以保证在大型程序上的可扩展性。</p></blockquote><p>我们遵循 <strong>SVF</strong> 的内存模型 [50]：把<strong>内存对象</strong>按照其<strong>分配点</strong>建模，分配点既可以是<strong>栈分配</strong>（<code>alloca</code> 指令），也可以是<strong>堆分配</strong>（调用 <strong>I3</strong> 中识别的 <code>exchange_malloc</code> 等堆分配函数）。RustSan 与既有工作 [15, 38] 类似，使用<strong>points-to</strong> 与<strong>数值流</strong>分析来找出<strong>每个内存访问点可能访问到的对象集合</strong>（may-points-to set）。随后我们依据 §3.1 的定义利用这些 points-to 信息来对对象与访问点进行分类。细节如下：</p><p><strong>不安全访问点集合（Unsafe site set）。</strong> 首先把位于 <code>unsafe</code> 中的<strong>内存访问语句</strong>标记为<strong>不安全访问点</strong>。做法是将 <strong>I1</strong> 中语句在 LLVM 中的等价指令加入“不安全访问点集合”。</p><p><strong>不安全对象集合（Unsafe object set）。</strong> 接着识别<strong>不安全对象</strong>：回忆“凡在 <code>unsafe</code> 块内被<strong>修改</strong>的对象都是不安全对象”。由 HIR/MIR 阶段精炼得到的<strong>写语句集合 I2</strong> 已被翻译为一组 <strong>LLVM IR</strong> 指令。RustSan 在这组指令上执行 points-to 分析，找出<strong>这些指令可能指向的内存对象</strong>——也即<strong>可能被 <code>unsafe</code> 修改</strong>的对象。由此得到的对象即被归类为<strong>不安全对象集合</strong>。</p><p><strong>伪安全访问点集合（False-safe site set）。</strong> 在这一阶段，所有<strong>不在</strong>“不安全访问点集合”中的访问点<strong>暂视为安全</strong>。RustSan 需要从中识别并分离出<strong>伪安全访问点</strong>：按照我们的定义，凡<strong>不属于 <code>unsafe</code> 块</strong>，但<strong>会访问至少一个“不安全对象集合”中的对象</strong>的访问点，都是<strong>伪安全</strong>。因此，我们对这批“暂时安全”的访问点再次执行 points-to 分析，从而得到<strong>分离出的伪安全集合</strong>。</p><p><strong>重叠对象集合（Overlapping object set）。</strong> 最后识别<strong>重叠对象</strong>：它是<strong>安全对象集合</strong>的一个<strong>子集</strong>（即与“不安全对象集合”互补的那部分中的子集）。若某个对象与<strong>至少一个伪安全访问点</strong>之间存在<strong>被指向（pointed-by）<strong>关系，则把它纳入</strong>重叠对象集合</strong>。我们在已识别的伪安全访问点集合上<strong>迭代执行</strong> points-to 分析以得到该集合。<br> 需要注意的是，<strong>重叠对象</strong>与<strong>不安全对象</strong>共同构成<strong>伪安全访问点</strong>的同一组 may-points-to“住户”（tenants），因此名为 <strong>overlapping</strong>（“重叠”）。</p><h3 id="_5-2-分配点安全性的识别-allocation-site-safety-identification" tabindex="-1"><a class="header-anchor" href="#_5-2-分配点安全性的识别-allocation-site-safety-identification"><span>5.2 分配点安全性的识别（Allocation site safety identification）</span></a></h3><p>到这里，我们已经具备判定<strong>分配点</strong>安全性（<strong>I6</strong>）所需的信息。<strong>RustSan</strong> 必须识别出对象的<strong>分配位置</strong>，以便在后续插桩中对其进行<strong>重载</strong>，从而把对象的<strong>安全信息</strong>写入<strong>影子内存</strong>（§6 将解释）。Rust 通过对象的 <strong>trait</strong> 还表现出<strong>间接</strong>的堆分配行为。因此，除了直接堆分配点之外，我们还提出了一个<strong>面向 Rust 的方法</strong>来处理<strong>间接堆分配点</strong>。</p><p><strong>直接堆分配点。</strong> 首先确定由 <strong>I3</strong> 中“堆分配函数”<strong>直接</strong>产生的堆内存分配点的安全性。针对这类分配点，其安全性已经在 §5.1 的分析中完成了分类。因此，我们只需要<strong>把该分配点打上“所分配对象的安全级别”<strong>的标记，以便后续的插桩能据此进行</strong>重载</strong>处理。</p><p><strong>间接堆分配点。</strong> <strong>RustSan</strong> 还实现了一套方案来给由 <strong>trait 方法调用</strong>触发的<strong>间接堆分配</strong>进行安全性分类。我们在 <strong>Listing 1a</strong> 中演示了这种间接分配：第 1 行定义了一个 Rust 对象，第 4 行在 <code>unsafe</code> 中对其进行了修改。其编译后的 LLVM IR 对应代码见 <strong>Listing 1b</strong>；其中，第 4 行的 <code>Vec::set_len</code> 调用被分类为<strong>不安全访问点</strong>，而第 1 行分配的栈对象被分类为<strong>不安全对象</strong>。第 3 行调用 <code>Vec::reserve()</code>（一个会触发堆分配的 trait 方法），并把结果写回栈对象 <code>%v</code>。然而，<strong>如果我们只看第 4 行实参 <code>%v</code> 的 points-to 集合</strong>，它只包含栈对象 <code>%v</code> 本身，就<strong>检测不到</strong>这次堆对象分配。</p><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为了追踪这类分配点的安全性，<strong>RustSan</strong> 从分析 <strong>I4</strong> 所识别的方法在 LLVM 中的<strong>调用点</strong>入手。针对这些调用点，RustSan 检查如下条件：<br> 1）被调用的对象方法在其<strong>调用图</strong>上必须能<strong>连接到</strong>某个<strong>堆分配函数</strong>（<strong>I3</strong>）；<br> 2）该方法调用中使用的<strong>某个实参</strong>必须<strong>指向</strong>一个<strong>不安全/重叠对象</strong>。<br> 若某次方法调用同时满足这两个条件，<strong>RustSan</strong> 便把该调用<strong>标记为“堆分配点”</strong>，并把“被指向的对象”的<strong>安全级别</strong>附着到该分配点上。利用这一启发式，RustSan 将 <strong>Listing 1b</strong> 的第 5 行识别为<strong>不安全对象的间接堆分配点</strong>。</p><blockquote><p>笔者注：原文如此，实际是第3行，“第5行”应该为笔误</p></blockquote><hr><h3 id="_5-3-将分析技术适配到-rust-adapting-analysis-techniques-to-rust" tabindex="-1"><a class="header-anchor" href="#_5-3-将分析技术适配到-rust-adapting-analysis-techniques-to-rust"><span>5.3 将分析技术适配到 Rust（Adapting analysis techniques to Rust）</span></a></h3><p>我们的 LLVM IR 分析依赖 <strong>SVF</strong> [50] 的<strong>先进</strong>数值流（Value-Flow）分析与 <strong>Andersen</strong> 指针分析实现 [11]。不过，我们对 SVF 进行了若干<strong>改动</strong>，以便更好地兼容 Rust：</p><p><strong>面向 Rust 的分配函数。</strong> 首先，我们修改 SVF，使其能<strong>识别</strong>我们在 HIR/MIR 分析（<strong>I3</strong>）中发现的<strong>Rust 堆分配函数</strong>。这样，SVF 就能把这些函数返回的对象指针识别为<strong>新分配的堆对象</strong>。</p><p><strong>指针操作 trait 的模拟。</strong> 若某对象类型没有<strong>重载</strong>其指针运算符，那么可重载运算符实际会从 Rust 标准库的<strong>运算符模块</strong>（<code>std::ops</code>）中调用到<strong>默认符号</strong>。我们发现，只需把这些运算替换为<strong>默认的取址/解引用语义</strong>，就能<strong>最小化</strong> points-to 分析的复杂度。</p><p><strong>支持常用指令。</strong> 我们为 LLVM 指令 <strong><code>ExtractValue</code></strong> 与 <strong><code>InsertValue</code></strong> 等添加了对 SVF 的<strong>支持</strong>。这些指令在 Rust 编译中被<strong>大量使用</strong>，但原版 SVF 并不识别。最近一篇工作 [15] 也提到了对 SVF 的类似改动；由于其实现发表时尚未公开，我们文中的 <strong>SVF 修改</strong>均为<strong>自研实现</strong>。</p><h2 id="_6-rustsan-的影子内存方案-shadow-memory-scheme" tabindex="-1"><a class="header-anchor" href="#_6-rustsan-的影子内存方案-shadow-memory-scheme"><span>6. RustSan 的影子内存方案（shadow memory scheme）</span></a></h2><p>RustSan 对 ASan 影子内存机制的改造，会利用编译期得到的信息（<strong>I5、I6</strong>），以执行<strong>感知安全性的对象分配</strong>与<strong>选择性插桩</strong>。</p><h3 id="_6-1-感知安全性的对象分配-safety-aware-object-allocation" tabindex="-1"><a class="header-anchor" href="#_6-1-感知安全性的对象分配-safety-aware-object-allocation"><span>6.1 感知安全性的对象分配（Safety-aware object allocation）</span></a></h3><p>RustSan 实现了<strong>感知安全性的对象分配</strong>：把对象的<strong>安全信息（I6）<strong>编码进影子内存。为达此目的，RustSan 在 ASan 的</strong>堆内存分配器</strong>之上做扩展，使其在管理影子内存时能够<strong>反映对象的安全类别</strong>。随后，RustSan 的插桩会把对象的<strong>分配点</strong>替换为三类之一的<strong>分配器封装</strong>（wrapper）：<code>safe</code>、<code>unsafe</code>、<code>overlapping</code>。这些封装会在堆分配成功后，依据<strong>新返回的堆地址</strong>为对应对象<strong>更新影子内存条目</strong>。</p><p><strong>分配点重载（Allocation site override）。</strong><br> RustSan 通过 ASan 现有的方法，钩住程序默认使用的<strong>安全分配器</strong>。对<strong>不安全对象</strong>与<strong>重叠对象</strong>的分配点，RustSan 编译器依据 <strong>I6</strong> 的安全信息进行替换：从分配点出发，遍历其<strong>调用图</strong>，把被调用的函数<strong>克隆</strong>成专门用于“在某一安全级别下分配对象”的版本；例如把 <code>foo</code> 克隆为 <code>foo</code>、<code>foo_unsafe</code> 与 <code>foo_overlapping</code>。然后在调用图上以“分配点的安全级别”为依据，<strong>替换</strong>对应的函数调用。最后，再把调用图上出现的“堆分配调用”，统一替换为 RustSan 的<strong>分配器封装</strong>，以执行影子内存管理。</p><p><strong>影子字节方案（Shadow byte scheme）。</strong><br> RustSan 按<strong>对象的安全类别</strong>为对象“着色”。<strong>不安全对象</strong>不着色；为了便于读者理解（见图3），我们将<strong>安全对象</strong>概念性地对应为<strong>洋红色</strong>，<strong>重叠对象</strong>对应为<strong>粉色</strong>（pinkzone）。在影子字节的<strong>高 5 位</strong>中，ASan 已用来表示各种 <strong>redzone</strong>；RustSan 选取其中的<strong>第 4 与第 5 位</strong>来表示<strong>安全对象</strong>与<strong>重叠对象</strong>：</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>安全对象与重叠对象的影子字节形如 <code>0b00001aaa</code> 与 <code>0b00010aaa</code>，其中低 3 位 <code>aaa</code> 由 ASan 使用，用于在影子内存映射的“每 8 字节真实内存”区间内，表达<strong>可寻址字节</strong>的位置。</p><blockquote><p>笔者注：低3位表示8字节空间中可寻址字节的offset</p></blockquote><p>除“安全/重叠”两种着色外，我们还使用了此前未占用的两种<strong>5 位组合</strong>来表示<strong>隔离（quarantined）的不安全对象</strong>与<strong>隔离的重叠对象</strong>。例如，当一个<strong>重叠对象</strong>被释放时，会把其对象内存对应的影子字节更新为<strong>隔离的粉色对象</strong>。随后，我们扩展了 ASan 在检测到内存错误后调用的 <code>report()</code> 函数，使其能够报告<strong>发生在不安全对象或重叠对象上的 use-after-free</strong> 情况。</p><h3 id="_6-2-选择性插桩-selective-instrumentation" tabindex="-1"><a class="header-anchor" href="#_6-2-选择性插桩-selective-instrumentation"><span>6.2 选择性插桩（Selective instrumentation）</span></a></h3><p>在依据 <strong>I5</strong> 完成对象安全性分类之后，<strong>RustSan</strong> 需要按各访问点的安全级别进行插桩。通过<strong>移除安全访问点</strong>上代价高昂的、基于影子内存的检查，RustSan 显著降低了运行时开销。不过，对<strong>伪安全</strong>与<strong>不安全</strong>访问点，RustSan 仍会执行其<strong>跨安全级别的内存访问校验</strong>，同时保留 <strong>ASan</strong> 既有的内存错误检测功能。下面对这两点做更细致的说明。</p><p><strong>跨安全级别的内存访问校验（Cross-safety memory access validation）。</strong><br> RustSan 引入一种独特的<strong>跨安全级别</strong>内存访问校验模型：对<strong>伪安全</strong>与<strong>不安全</strong>访问点施加<strong>不同</strong>的内存访问校验逻辑（见 <em>Listing 2</em>）。</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>对<strong>不安全访问点</strong>，只要影子字节值<strong>非零</strong>，RustSan 就报告<strong>非法访问错误</strong>（<em>Listing 2a</em>）。这意味着：对 <strong>洋红色（安全对象）</strong> 与 <strong>粉色（重叠对象）</strong> 的访问都会在 sanitizer 检查时被发现。</li><li>另一方面，<strong>伪安全访问点</strong>被允许访问<strong>粉色的重叠对象</strong>，因此它们既可以访问<strong>不安全对象</strong>，也可以访问<strong>重叠对象</strong>（<em>Listing 2b</em>）。</li></ul><p>由此，对<strong>安全对象</strong>的访问会在<strong>不安全</strong>与<strong>伪安全</strong>访问点上被检测出来。</p><p>请注意，RustSan 在伪安全访问点上的设计是<strong>有意识的取舍</strong>：ASan 的“基于地址”的净化方式<strong>无法</strong>进行<strong>上下文敏感</strong>的检查，因为没有可行的办法在运行时区分对象到底沿哪条数据流路径传播而来。因此，我们的设计选择是<strong>继承 ASan 的兼容性与性能</strong>，同时在伪安全访问点上<strong>放宽</strong>检测覆盖面。</p><p><strong>与 ASan 既有能力的互操作（Interoperability with existing ASan capabilities）。</strong><br> RustSan 的影子内存方案在<strong>不安全</strong>与<strong>伪安全</strong>访问点上<strong>完整保留</strong>了 ASan 的检测能力。回顾 ASan 的检测机制：它通过两种方式利用 <strong>redzone</strong>——（1）在对象之间插入 redzone 以检测<strong>越界</strong>；（2）在对象被释放时，以 redzone <strong>作废对象本身</strong>。由于（1）中“对象间 redzone”与对象安全级别<strong>无关</strong>，因此在不安全与伪安全访问点发生的<strong>越界</strong>都能被检测。例如，如果一次<strong>合法</strong>的对象访问（如伪安全点上对重叠或不安全对象的访问）<strong>越界</strong>触碰到“对象末端 redzone”，该错误就会被发现并报告。</p><p>同样地，<strong>不安全对象</strong>与<strong>重叠对象</strong>也适用 ASan 基于<strong>隔离区（quarantine）<strong>的 <strong>use-after-free</strong> 检测：通过</strong>对象作废</strong>实现。RustSan 的堆分配器保留了 ASan 分配器的“对象作废与放入隔离区”的机制——即用 redzone 标记对象地址范围并放入隔离列表。RustSan 的一个关键增补是：利用影子字节中<strong>未使用的位</strong>来表示“<strong>隔离的不安全对象</strong>”与“<strong>隔离的重叠对象</strong>”（前文已述），这有助于在错误检测时<strong>生成更丰富的报告</strong>（同时包含访问点与对象安全级别的信息）。</p><blockquote><p>笔者注：ASan也能检测use-after-free，只是RustSan利用影子字节中未使用的位，使检测结果更细化</p></blockquote><h2 id="_7-评估-evaluation" tabindex="-1"><a class="header-anchor" href="#_7-评估-evaluation"><span>7. 评估（Evaluation）</span></a></h2><p>本节我们评估 <strong>RustSan</strong> 的实现。实现基于 <strong>LLVM 13.0.0</strong> [39] 与 <strong>rustc 1.66.0 nightly</strong> [46]。所有实验均在一台工作站上完成：<strong>AMD Ryzen Threadripper 3990X</strong>（64 核 @ 2.9GHz）、<strong>256GB RAM</strong>、<strong>Ubuntu 20.04 LTS</strong>。</p><p>我们用大规模测试集从<strong>检测能力</strong>、<strong>可扩展性</strong>与相对 <strong>ASan</strong> 的<strong>性能改进</strong>三方面评估 <strong>RustSan</strong>。为此，我们构建了四类 Rust 程序测试集：<strong>CVE 复现实验集</strong>、<strong>可扩展性评估集</strong>、<strong>通用性能基准集</strong>与<strong>模糊测试基准集</strong>。<br> 其中，<strong>CVE 复现实验集</strong>是一些含有一个或多个<strong>CVE 披露的内存错误</strong>的程序版本，并附带<strong>确定性的输入序列</strong>来触发这些缺陷。我们在 §7.2 中通过复现这些 CVE 来<strong>经验性验证</strong> RustSan 的检测能力。<br><strong>可扩展性评估集</strong>包含<strong>相对较大的代码库</strong>，我们在 §7.4 中用它评估 RustSan 的<strong>程序分析过程</strong>在<strong>大型 Rust MIR 与 LLVM IR</strong> 上的可扩展性。<br><strong>通用性能</strong>与<strong>模糊测试</strong>两套基准用于度量 RustSan 对目标程序引入的<strong>运行时开销变化</strong>（见 §7.6 与 §7.7）。</p><hr><h3 id="_7-1-unsafe-rust-的使用统计-unsafe-rust-usage-statistics" tabindex="-1"><a class="header-anchor" href="#_7-1-unsafe-rust-的使用统计-unsafe-rust-usage-statistics"><span>7.1 <code>unsafe</code> Rust 的使用统计（Unsafe Rust usage statistics）</span></a></h3><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Table 1</strong> 展示了我们用于评估的全部 Rust crates 中，<strong>内存访问点的出现与安全性</strong>统计。表中给出了<strong>所有内存访问指令</strong>（包括<strong>内存内建指令</strong>）的总数。跨所有 crates 统计，<strong>不安全访问点比例</strong>（<code>unsafe</code> 代码块 + <strong>伪安全</strong>）的<strong>平均值</strong>为 <strong>10.24%</strong>。值得注意的是，那些<strong>需要原始指针操作</strong>（如 <code>linked_list</code>）或<strong>处理底层数据</strong>（如 <code>string</code>、<code>bytes</code>）的 crates，往往具有<strong>更高比例</strong>的 <code>unsafe Rust</code>。</p><p>这一不安全访问点比例支持了 <strong>RustSan</strong> 的动机与方法：<strong>需要 sanitizer 检查</strong>的内存访问点，最多可达<strong>34.60%</strong>（<code>vec_deque</code>），而最低仅<strong>0.7%</strong>（<code>uuid</code>）。不过，这些数字<strong>并不直接等价于</strong> RustSan 能<strong>消除的运行时开销</strong>，因为实际性能还取决于<strong>程序执行期间实际遇到的检查次数</strong>。关于运行时开销降低，我们在后文的 <strong>crate 基准</strong>（§7.6）与<strong>模糊测试实验</strong>（§7.7）中详细讨论。</p><hr><h3 id="_7-2-检测能力-选择性插桩的稳健性-detection-capability-robustness-of-selective-instrumentation" tabindex="-1"><a class="header-anchor" href="#_7-2-检测能力-选择性插桩的稳健性-detection-capability-robustness-of-selective-instrumentation"><span>7.2 检测能力：选择性插桩的稳健性（Detection capability: robustness of selective instrumentation）</span></a></h3><p>围绕检测能力，我们对 <strong>RustSan</strong> 可能的<strong>漏报（false negatives）<strong>进行经验性验证；换言之，我们验证 <strong>RustSan</strong> 所</strong>移除的检查</strong>不会导致<strong>漏报</strong>。为此，我们选取了<strong>31</strong> 个可被 <strong>ASan</strong> 检出的<strong>内存相关 CVE</strong>，并用 <strong>RustSan</strong> 复现这些结果。</p><p><strong>CVE 测试集收集（CVE test set collection）。</strong><br> 我们从常见 Rust 程序中收集了一批可复现、且可被 <strong>ASan</strong> 检测的<strong>CVE 级内存漏洞</strong>测试用例。漏洞来源于 <strong>RustSec Advisory Database</strong> [55]（其中汇总了来自 <strong>crates.io</strong> 的 Rust 程序 CVE 报告）。我们收集了数据库中<strong>全部 408 条</strong> CVE，并评估其<strong>可复现性</strong>。在这 408 条中，依据数据库里的类别字段，我们识别出<strong>227 条</strong>为<strong>内存相关漏洞</strong>；其中 <strong>91 条</strong>包含<strong>可复现漏洞的 PoC 代码</strong>，<strong>52 条</strong>能被 <strong>ASan</strong> 成功检测。<strong>RustSan</strong> 同样<strong>全部检出</strong>了这 <strong>52</strong> 个案例。</p><blockquote><p>笔者注：可以学一下怎么去找CVE</p></blockquote><p><strong>检测结果（Detection results）。</strong><br><strong>表2</strong> 重点列出了 52 个复现案例中的 <strong>31</strong> 个，用以展示 <strong>RustSan</strong> 的<strong>稳健性</strong>。这些案例是通过<strong>内联的影子内存检查</strong>（受 RustSan 的<strong>选择性插桩</strong>控制）检出的。尽管 <strong>RustSan</strong> <strong>大幅减少</strong>了 Rust 程序中的影子内存检查（见 <strong>Table 1</strong>），但<strong>所有 CVE 案例</strong>都<strong>成功检出</strong>。另外 <strong>21</strong> 个未在 <strong>Table 2</strong> 列出的复现案例（如<strong>双重释放</strong>），是通过<strong>拦截标准库调用</strong>（例如 <code>free</code>）来检测的；这部分不受 <strong>RustSan</strong> 的“检查消除”影响，因而如预期般被 <strong>RustSan</strong> 检出。</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>伪安全访问点中的内存错误（Memory errors in false-safe sites）。</strong><br><strong>Table 2</strong> 的 <strong>FS/U*</strong> 列显示：31 个复现的内存错误中，有 <strong>21 个</strong>是<strong>在伪安全访问点</strong>被检测到的。我们还在 <code>unsafe</code> 内部的内存指令上<strong>额外放置插桩</strong>，由此识别出 <strong>10</strong> 个<strong>位于 <code>unsafe</code> 内部</strong>的案例。大量<strong>发生在伪安全内存指令</strong>上的错误，进一步印证了 <strong>RustSan</strong> 对<strong>伪安全访问点识别</strong>的<strong>准确性</strong>，以及所改造的<strong>影子内存方案</strong>的<strong>正确性</strong>。我们对这 21 个伪安全案例中的部分 CVE 做了<strong>人工复核</strong>；例如在<strong>附录 A（Appendix A）<strong>中，我们给出了一个</strong>堆溢出</strong>（CVE-2018-21000）与一个 <strong>use-after-free</strong>（CVE-2021-45713）的<strong>代码示例</strong>。</p><h3 id="_7-3-检测能力-跨安全级别的对象访问-detection-capability-cross-safety-object-access" tabindex="-1"><a class="header-anchor" href="#_7-3-检测能力-跨安全级别的对象访问-detection-capability-cross-safety-object-access"><span>7.3 检测能力：跨安全级别的对象访问（Detection capability: cross-safety object access）</span></a></h3><p>本节评估 <strong>RustSan</strong> 的独有能力——§6.2 所述的<strong>对安全对象访问的检测</strong>。我们准备了两个<strong>合成示例</strong>，展示来自 <strong>unsafe</strong> 与 <strong>false-safe</strong> 位置对<strong>安全对象</strong>进行破坏的情形（见 <em>Listing 3</em>）。</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>之所以采用合成示例而不是真实漏洞，是因为真实案例往往<strong>难以定位与复现</strong>。许多真实世界的内存错误是通过 ASan 的<strong>对象间 redzone（inter-object redzones）<strong>首先被发现的。我们发现：如果一个错误发生在 <strong>unsafe</strong> 或 <strong>false-safe</strong> 访问点，并且</strong>不触碰任何对象间 redzone</strong>，而只是<strong>破坏了安全对象的内容</strong>（即<strong>对象内部破坏，intra-object corruption</strong>），则 ASan 往往<strong>不会报警</strong>，而且这样的真实案例过于<strong>特定</strong>、难以识别与复现。两个示例均受到真实 CVE（CVE-2017-1000430 与 CVE-2018-21000）的启发，并做了轻微改动，使攻击者可以对<strong>安全对象</strong>任意进行内存破坏。在 <em>Listing 3a</em> 与 <em>Listing 3b</em> 中，攻击者分别可以在 <strong>unsafe</strong> 与 <strong>false-safe</strong> 访问点处控制函数实参，使其指向<strong>安全对象</strong>。</p><p>这些案例<strong>不一定</strong>触碰 redzone，但能够只破坏<strong>安全对象的内容</strong>。这些示例说明了 <strong>RustSan</strong> 的<strong>跨安全级别内存访问检测</strong>：<strong>未改造的 ASan</strong> 无法检测到这类错误，而 <strong>RustSan</strong> 通过扩展 ASan，具备了检测<strong>Rust 特有</strong>新类别内存错误的能力。</p><blockquote><p>笔者注：不越界，只是通过让伪安全/不安全的访问点指向安全对象，从而只破坏安全对象的内容</p></blockquote><hr><h3 id="_7-4-使用-rustsan-的编译时间-compile-time-with-rustsan" tabindex="-1"><a class="header-anchor" href="#_7-4-使用-rustsan-的编译时间-compile-time-with-rustsan"><span>7.4 使用 RustSan 的编译时间（Compile time with RustSan）</span></a></h3><p>我们接下来在<strong>较大的 Rust crates</strong> 上测量 <strong>RustSan</strong> 的<strong>编译时间</strong>，以评估其可扩展性。</p><p><strong>可扩展性测试集收集。</strong><br> 我们基于 crate 的<strong>受欢迎程度</strong>（例如 Github ★≥1 万）以及<strong>代码规模</strong>选择了 9 个 crate。<strong>表3</strong> 展示了可扩展性集合中大型程序的 <strong>RustSan</strong> 编译时间。</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>结果讨论。</strong><br> 整体而言，<strong>RustSan</strong> 将这些 crate 的<strong>编译时间</strong>提升为<strong>原来的 19.50×</strong>。其中 <strong>wasmtime</strong>（WebAssembly 解释器）产生的<strong>整程序 LLVM IR</strong> 最大，大小为 <strong>2253MB</strong>；使用 <strong>RustSan</strong> 的编译耗时 <strong>29 分 56 秒</strong>，比带插桩的<strong>常规构建</strong>慢 <strong>30.45×</strong>。第二大的是 <strong>RustPython</strong>，其 <strong>LLVM IR</strong> 为 <strong>2127MB</strong>、编译耗时 <strong>1688s（28 分 8 秒）</strong>，相当于常规构建的 <strong>24.82×</strong>。</p><blockquote><p>笔者注：虽然编译时间的增长非常恐怖，但编译完的程序在跑测试时往往以天为单位跑，用较长的编译时间换取编译后程序的性能提升有一定意义。</p></blockquote><p>我们认为，即便对大程序，<strong>RustSan</strong> 的计算复杂度仍在<strong>可接受范围</strong>。一个促成因素是 HIR/MIR 层的<strong>精炼信息抽取</strong>：与既有工作 [38] 相比，我们把<strong>污点源数量</strong>（将 §4 中的 <strong>I2</strong> 从 §4b 的规模）在实验中<strong>降低了 12.86%</strong>（详见<strong>附录 B</strong>）。</p><p>考虑到 <strong>RustSan</strong> 面向的典型<strong>动态测试场景</strong>，在测试前对目标程序用 <strong>RustSan</strong> 进行一次构建的<strong>额外成本</strong>是<strong>可承受的</strong>。TRust [15] 提到其处理超大程序的策略是<strong>回退到精度较低的上下文敏感分析</strong>；该工作在评估中以 <strong>tokio</strong> 与 <strong>hyper</strong> 作为大型程序的示例（二者也包含在我们的 <strong>Table 3</strong> 中）。由于其实现撰写时尚未公开，难以进行<strong>直接对比</strong>。然而，我们展示了 <strong>RustSan</strong> 可以用<strong>可管理的编译时间</strong>构建<strong>更大规模</strong>的程序。</p><blockquote><p>笔者注：意思是比TRust好点？怎么不跟baseline ASan比，何意味？</p></blockquote><h3 id="_7-5-微基准-microbenchmarks" tabindex="-1"><a class="header-anchor" href="#_7-5-微基准-microbenchmarks"><span>7.5 微基准（Microbenchmarks）</span></a></h3><p>我们针对 <strong>RustSan</strong> 的“感知安全性的影子内存方案”和“改造后的堆分配器”做了微基准测试。对这两个组件开销的细化观察，有助于理解随后在本节后半部分给出的通用应用与模糊测试基准结果。</p><p><strong>影子内存检查。</strong><br><strong>RustSan</strong> 的影子内存方案在<strong>伪安全访问点</strong>上引入了一步额外的<strong>影子字节掩码</strong>操作（见 <em>Listing 2b</em>）。因此，尽管 <strong>RustSan</strong> 通过<strong>消除检查</strong>显著提升了净化器（sanitizer）的运行性能，但其在伪安全访问点上的检查<strong>可能</strong>带来少量额外开销。为了测量此类“<strong>先掩码、再分支</strong>（mask-then-branch）”检查的<strong>独立</strong>开销，我们将 <strong>nbench</strong> [52] 编译为两个版本：一个使用<strong>未改造的 ASan</strong>，另一个使用<strong>理论上的最坏情形 RustSan</strong>。所谓最坏情形，是指 <strong>RustSan</strong> 在<strong>所有</strong>内存访问点都插入伪安全访问点那样的“mask-then-branch 检查”，并且<strong>不</strong>进行任何检查消除。<strong>图4</strong> 显示了最坏情形 <strong>RustSan</strong> 与未改造 <strong>ASan</strong> 的对比：平均而言，ASan 版本的<strong>运行时开销</strong>为 <strong>2.06×</strong>，而理论最坏情形的 <strong>RustSan</strong> 版本为 <strong>2.08×</strong>。实验表明，<strong>伪安全访问点检查</strong>带来的<strong>性能开销极小</strong>。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>堆分配器。</strong><br> 我们的基准显示：<strong>RustSan</strong> 的堆分配器在 <strong>ASan</strong> 的基础上<strong>额外</strong>引入了 <strong>5.52%</strong> 的开销。鉴于其开销很小且实验方法直观，我们将详细讨论放在<strong>附录 C</strong>。</p><hr><h3 id="_7-6-通用应用中的运行时开销-runtime-overhead-in-general-applications" tabindex="-1"><a class="header-anchor" href="#_7-6-通用应用中的运行时开销-runtime-overhead-in-general-applications"><span>7.6 通用应用中的运行时开销（Runtime overhead in general applications）</span></a></h3><p>我们用各个 crate 自带的基准集（即 <code>cargo bench</code>），对比测量 <strong>RustSan</strong> 相对 <strong>ASan</strong> 在<strong>通用 Rust 程序</strong>中的运行时开销。</p><p><strong>通用应用基准集收集。</strong><br> 我们从 <strong>Crates.io</strong> [20] 收集了<strong>下载量最高</strong>的 Rust 程序，并参考了既有工作的被基准化程序 [15, 38]。我们对这些基准逐一进行<strong>人工验证</strong>，确保其能够<strong>正确运行</strong>并产生<strong>单一数值</strong>，便于直接比较 <strong>RustSan</strong> 与 <strong>ASan</strong> 的性能。</p><p><strong>基准结果。</strong><br><strong>图5</strong> 比较了 <strong>ASan</strong> 与 <strong>RustSan</strong> 的<strong>运行时开销</strong>：将完成基准所用的平均执行时间<strong>归一化</strong>到未插桩版本。结果显示，ASan 的<strong>平均归一化执行时间</strong>为 <strong>2.40×</strong>（即 <strong>+140.3%</strong> 开销），而 <strong>RustSan</strong> 为 <strong>1.53×</strong>（即 <strong>+52.9%</strong> 开销），<strong>RustSan 平均将开销降低至 62.3%</strong>。为验证性能提升确由“消除检查”带来，我们提出了一个指标 <strong>sanitizer 检查命中减少率</strong>（<strong>Check Hit Decr. (%)</strong>，见图 5）：该指标表示 <strong>ASan</strong> 运行期的<strong>sanitizer 命中次数</strong>中，有多少<strong>被 RustSan 消除了</strong>。我们确认<strong>性能提升与该指标近似成正比</strong>。</p><figure><img src="'+R+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在各个 crate 中，<strong>开销下降幅度最大</strong>的是 <strong>adler</strong>：ASan 插桩版本的<strong>运行速度</strong>下降 <strong>5.4×</strong>，而 <strong>RustSan</strong> <strong>移除了 100% 的检查</strong>，几乎达到了<strong>接近原生</strong>的速度。另一方面，部分 crate 的 ASan 开销<strong>几乎没有下降</strong>，例如 <code>vec_deque</code> 与 <code>vec</code>。我们推测这些程序在运行时<strong>极少遇到</strong>不安全或伪安全访问点，因此<strong>难以从 RustSan 的“检查移除”中获益</strong>。</p><p>在被评测的 crates 中，<strong>wasmtime</strong> 与 <strong>RustPython</strong> 属于 Rust 生态中<strong>最复杂且规模较大</strong>的项目（两者也包含在我们的可扩展性集合里）。实验因此也表明：<strong>RustSan</strong> 在<strong>大型 Rust 程序</strong>上是<strong>可行</strong>的，更不用说其<strong>显著的性能改进</strong>（相对 ASan 分别提升 <strong>64%</strong> 与 <strong>63%</strong>）。</p><p>除了性能之外，这些 crates 在基准执行期间<strong>没有出现</strong>因 <strong>RustSan</strong> 导致的<strong>误报</strong>而引发的<strong>程序崩溃</strong>。</p><h3 id="_7-7-模糊测试-fuzzing" tabindex="-1"><a class="header-anchor" href="#_7-7-模糊测试-fuzzing"><span>7.7 模糊测试（Fuzzing）</span></a></h3><p>我们进一步在模糊测试场景下考察 <strong>RustSan</strong> 相对 <strong>ASan</strong> 的性能收益。</p><p><strong>模糊测试集收集。</strong><br> 我们从 Rust 的 trophy-case [13] 中挑选目标程序，选取<strong>已报告缺陷数最多</strong>且<strong>自带 fuzzing harness</strong> 的前六个 crate。</p><p><strong>性能度量。</strong><br> 与通用应用基准相同，我们分别用 <strong>RustSan</strong> 与 <strong>ASan</strong> 编译这些 crate。随后，使用 <strong>AFL++</strong> [23] 4.05c 版本对每个 crate 的两个版本分别进行 <strong>24 小时</strong>的 fuzz。我们使用各 crate 自带的 harness 与种子集。我们以<strong>每秒执行次数（run executions per second）<strong>这一模糊测试性能评估中被广泛接受的统计量来展示 <strong>RustSan</strong> 的性能增益 [23, 60]。得益于 <strong>RustSan</strong> 的</strong>运行时开销降低</strong>，在固定持续时间（24 小时）下，fuzzer 能在 <strong>RustSan</strong> 版本上执行<strong>更多轮次</strong>。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>表4</strong> 对比了 <strong>RustSan</strong> 与 <strong>ASan</strong>。首先从<strong>每秒执行次数</strong>看，<strong>RustSan</strong> 相比 <strong>ASan</strong> 的<strong>平均性能提升</strong>为 <strong>23.52%</strong>（记作 <strong>Incr(%)</strong>）。为更好地说明性能提升的来源，我们还测量了<strong>每次执行的平均检查数（average checks per execution）</strong>。由于 <strong>RustSan</strong> 的<strong>总执行次数</strong>通常多于 <strong>ASan</strong>，我们使用<strong>平均值</strong>而非总检查次数。各目标中，<strong>brotli-rs</strong> 的改善最显著（<strong>57%</strong>）：在运行期间，<strong>RustSan</strong> 每次执行大约移除了 <strong>39 万次</strong> sanitizer 检查，这能直接解释其性能提升。相对地，<strong>cpp_demangle</strong> 的整体开销下降很小（<strong>0.87%</strong>），尽管<strong>检查减少率</strong>很高（<strong>98.37%</strong>）。原因在于该目标的<strong>内存访问出现次数</strong>本就有限（<strong>2535.67 次检查/秒</strong>），总体开销被其它因素主导（如种子变异、进程重启等）。</p><p><strong>结果讨论。</strong><br> 在多个 crate 的模糊测试中（如 <strong>brotli-rs</strong>），<strong>RustSan</strong> 展现出可观的性能收益。然而，模糊测试的整体性能受多种因素影响。例如，目标程序中<strong>load/store 指令占比</strong>可能较低；又如，某些程序中<strong>纯目标代码的执行时间</strong>较短，导致 fuzzer 自身操作（进程重启、种子变异等）主导了总执行时间。在这些情况下，<strong>RustSan</strong> 只能在<strong>尽量减少影子内存检查</strong>（即 <strong>表4</strong> 中的 <strong>Reduc.%</strong>）上做出贡献。本实验的重点是在<strong>真实场景</strong>下展示 <strong>RustSan</strong> 的<strong>独立</strong>性能增益。我们预计 <strong>RustSan</strong> 还可以与其它 <strong>ASan</strong> 优化结合以缓解上述因素。例如 <strong>FuZZan</strong> [27] 优化了影子内存初始化，能直接降低 fuzzer 的进程重启时间。</p><p><strong>检测到的错误。</strong><br> 无论是 <strong>ASan</strong> 还是 <strong>RustSan</strong>，都<strong>未</strong>发现由<strong>内存错误检测</strong>导致的崩溃。结合这些 crate 的 harness 与文档，我们推测原因是它们<strong>此前已被 fuzz 到一定程度</strong>（例如已超过 24 小时），因此容易触达的缺陷大概率<strong>已被修复</strong>。即便如此，该结果至少说明 <strong>RustSan</strong> <strong>没有</strong>出现<strong>误报</strong>导致的崩溃。</p><h2 id="_8-安全性与稳健性讨论" tabindex="-1"><a class="header-anchor" href="#_8-安全性与稳健性讨论"><span>8. 安全性与稳健性讨论</span></a></h2><p><strong>Sanitizer</strong>（净化器）始终是一种“尽力而为（best-effort）”的解决方案：为了实用性，它们必须在<strong>检测覆盖率</strong>、<strong>可移植性</strong>与<strong>性能</strong>之间权衡。就此而言，我们认为 <strong>RustSan</strong> 通过大量实证测试，已经展示出其作为一种<strong>实用方案</strong>的价值。下面我们从<strong>稳健性视角</strong>重新审视前文的评估，并<strong>定性</strong>讨论 <strong>RustSan</strong> 中潜在的不正确性来源。</p><hr><h3 id="_8-1-实证验证-empirical-validation" tabindex="-1"><a class="header-anchor" href="#_8-1-实证验证-empirical-validation"><span>8.1 实证验证（Empirical validation）</span></a></h3><p>我们的评估不仅确认了 <strong>RustSan</strong> 的<strong>性能优势</strong>，在<strong>测试样本数量很大</strong>的前提下也对其效果给出了<strong>经验性验证</strong>。正如在 <strong>CVE 复现实验（§7.2）<strong>中所述，我们确认 <strong>RustSan</strong> 能</strong>成功检出</strong>全部 CVE 案例。</p><p>在所有基准测试中，<strong>RustSan 未出现任何误报</strong>（即不会因为检测而导致<strong>程序崩溃</strong>）。这些 crate 自带的基准并非用于“触发缺陷”，因此它们也可以被视作对 <strong>RustSan</strong> 的一次<strong>独立稳健性测试</strong>。回溯来看，<strong>RustSan</strong> 在 18 个 Rust crate 上共检查了<strong>约 15 亿</strong>次<strong>内存访问点</strong>；若其中<strong>任意一个真正的安全访问点</strong>被错误地标记为 <strong>unsafe</strong> 或 <strong>false-safe</strong>，就会导致<strong>程序崩溃式的误报</strong>，因为这类访问点随后将<strong>无法访问安全对象</strong>。</p><p>在模糊测试实验中，<strong>RustSan</strong> 在 6 个 crate 上、<strong>24 小时</strong>内共检查了<strong>890 亿</strong>次内存访问点，同样<strong>未出现误报</strong>。与 CVE 实验一样，模糊测试实验也可被视作<strong>漏报</strong>的间接验证。不过，正如我们提到的，基线 <strong>ASan</strong> 在该时段也未发现<strong>此前未知</strong>的内存错误。要在本文范围内进一步验证，还需针对<strong>相对未被充分测试的 Rust crate</strong>进行理解与选择，并<strong>手工构造 fuzzing harness</strong>，这是一项相当艰巨的工作，因而未纳入本研究。</p><hr><h3 id="_8-2-定性分析-qualitative-analysis" tabindex="-1"><a class="header-anchor" href="#_8-2-定性分析-qualitative-analysis"><span>8.2 定性分析（Qualitative analysis）</span></a></h3><p>尽管 <strong>RustSan</strong> 在程序分析技术上<strong>有意识地保持保守</strong>，但对于<strong>复杂程序分析</strong>而言，要完全保证<strong>完备性</strong>与<strong>健全性</strong>（soundness）仍具挑战。我们借助 <strong>表5</strong>，系统性地讨论 <strong>RustSan</strong> 验证模型可能面临的问题。</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>（1）HIR/MIR 分析不完整。</strong><br> 情形 <strong>MC1</strong> 与 <strong>MC2</strong> 可能源自<strong>HIR/MIR 分析不完整</strong>。回忆定义：<strong>unsafe 访问点</strong>是位于 <code>unsafe</code> 代码块内部的<strong>内存访问点</strong>，应由 <strong>MIR 层</strong>来识别。若被误分，后果是：一个 <strong>unsafe</strong> 访问点可以<strong>悄然破坏安全对象</strong>（对应 <strong>MC1</strong>），或<strong>破坏重叠对象</strong>（对应 <strong>MC2</strong>）。这二者均会削弱 <strong>RustSan</strong> 的<strong>内存验证模型</strong>，属于<strong>漏报</strong>。</p><p><strong>（2）HIR/MIR 分析不健全。</strong><br> 相反地，<strong>不健全</strong>的 HIR/MIR 分析可能把<strong>位于 <code>unsafe</code> 之外</strong>的<strong>安全/伪安全</strong>访问点误判为<strong>unsafe</strong>（情形 <strong>MC3、MC5</strong>）。其中 <strong>MC5</strong> 会在本应<strong>合法访问安全对象</strong>的地方触发<strong>误报</strong>；此外，它还会<strong>降低性能优势</strong>，因为系统被迫加入<strong>不必要的检查</strong>。<strong>MC3</strong> 同样是<strong>误报</strong>：在 <strong>RustSan</strong> 的验证模型下，<strong>伪安全</strong>访问点应当可以访问<strong>安全对象</strong>；一旦被误判，它为了访问<strong>沿着安全数据流在运行期送达</strong>的安全对象而触发告警。</p><p><strong>（3）RustSan 的 HIR/MIR 分析的稳健性。</strong><br> 我们的 <strong>MIR 分析</strong>是<strong>针对 <code>unsafe</code> 代码块</strong>的<strong>定向分析</strong>，而这些代码块仅占 Rust 程序的<strong>极小部分</strong>。因此，<strong>MIR 分析</strong>是可以做到<strong>完整且健全</strong>的。进一步地，<strong>RustSan</strong> 在 MIR 分析中引入了<strong>递归的作用域安全性</strong>识别，修复了既有工作 [38] 中的一类<strong>漏报来源</strong>。据此，我们认为 <strong>HIR/MIR 分析是稳健的</strong>，相关误判应当<strong>极为罕见</strong>；此外，我们的<strong>实证评估</strong>也从侧面证明了<strong>没有误报</strong>。</p><p><strong>（4）points-to（指向关系）分析不完整。</strong><br><strong>不完整的数据流/points-to 分析</strong>可能导致 <strong>MC4</strong>：分析器<strong>遗漏</strong>了“访问点 ↔ 不安全对象”之间的指向关系。结果是：某个<strong>必须只能访问重叠/不安全对象</strong>的<strong>伪安全访问点</strong>被<strong>错误地“证明”为安全，绕过了检查</strong>。此时 <strong>RustSan</strong> 将<strong>无法感知</strong>该访问点对<strong>安全对象</strong>的破坏——这是<strong>漏报</strong>。</p><p><strong>（5）points-to 分析不健全。</strong><br><strong>不健全的 points-to 分析</strong>可能导致 <strong>MC6</strong>：把真实的<strong>安全访问点</strong>误分为<strong>伪安全访问点</strong>。与 <strong>MC5</strong> 类似，这会引发<strong>误报</strong>并因<strong>不必要的检查</strong>而<strong>降低性能</strong>。</p><p><strong>（6）points-to 分析的稳健性。</strong><br><strong>RustSan</strong> 采用了<strong>先进的程序分析工具</strong> [50]，该工具已在<strong>软件安全</strong>领域被广泛使用 [15, 18, 28–30, 38, 44]。我们的评估显示，<strong>MC6-型误报</strong>应当<strong>罕见</strong>。不过，<strong>MC4 的风险</strong>仍然存在，因为 points-to 工具是一个<strong>外部依赖</strong>；尽管如此，基于其在该领域的<strong>广泛实践</strong>，我们仍认为该工具<strong>总体可靠</strong>。</p><h2 id="_9-相关工作-related-work" tabindex="-1"><a class="header-anchor" href="#_9-相关工作-related-work"><span>9. 相关工作（Related Work）</span></a></h2><h3 id="_9-1-面向内存缺陷检测的-sanitizer" tabindex="-1"><a class="header-anchor" href="#_9-1-面向内存缺陷检测的-sanitizer"><span>9.1 面向内存缺陷检测的 Sanitizer</span></a></h3><p>Sanitizer 长期以来被用于检测以<strong>不安全内存语言</strong>编写的程序中的缺陷，用以发现各种<strong>内存错误</strong> [12, 34, 40, 42, 47-49, 53, 58]。其中既包括<strong>空间类</strong>内存错误的净化（sanitization）[12, 19, 40, 42, 47, 54]，也包括<strong>时间类</strong>内存错误的净化 [34, 47, 53, 58]；在程序动态测试领域已有多种成熟的替代方案。</p><p>在众多设计中，<strong>ASan</strong> [24, 47] 是<strong>最为广泛使用</strong>并<strong>集成进主流编译器</strong>的 sanitizer，得益于其<strong>轻量的影子内存检查机制</strong>与<strong>高度兼容性</strong> [48]。<strong>RustSan</strong> 的目标，是在保留 ASan 的可移植性与兼容性的前提下，<strong>为 Rust “改造”ASan</strong>，通过<strong>消除冗余检查</strong>来提升性能。</p><hr><h3 id="_9-2-面向性能的-sanitizer-优化" tabindex="-1"><a class="header-anchor" href="#_9-2-面向性能的-sanitizer-优化"><span>9.2 面向性能的 Sanitizer 优化</span></a></h3><p>Sanitizer 往往带来<strong>很高的运行时开销</strong>，因此已有大量工作尝试对其进行优化。</p><p><strong>消除 sanitizer 检查。</strong><br> 识别并删除<strong>冗余检查</strong>是一条降低开销的重要路径 [16, 25, 32, 43, 51, 60]。不少研究通过<strong>精确的静态分析</strong>定位并移除不必要的检查，同时<strong>不牺牲检测覆盖率</strong>。例如 <strong>SANRAZOR</strong> [59] 结合<strong>动态代码覆盖率</strong>与<strong>静态数据依赖</strong>来发现冗余检查；<strong>ASan--</strong> [60] 则采用<strong>轻量静态分析</strong>来检测/移除<strong>重复性</strong>检查，并优化 sanitizer 检查。这些工作大多面向 ASan 的<strong>典型目标</strong>（如 C/C++ 程序）进行优化。与之相对，<strong>RustSan</strong> 指出了 ASan 在<strong>部分不安全</strong>（partially-unsafe）的 Rust 程序上的<strong>低效</strong>，并给出了解决方案。</p><p><strong>做性能—检测权衡。</strong><br> 也有工作提出在既定的<strong>性能预算</strong>下，对“检测能力与性能”进行<strong>权衡</strong>。例如 <strong>ASAP</strong> [47] 对目标程序做 profile，找出移除检查后<strong>收益最大的热区</strong>；<strong>SANRAZOR</strong> [59] 提供可配置的<strong>多档位权衡</strong>。与这些工作不同，<strong>RustSan</strong> <strong>保留</strong>了 ASan 的检测能力，同时<strong>新增</strong>了<strong>Rust 特定的安全对象保护</strong>。</p><p><strong>优化 sanitizer 运行期。</strong><br> 另一些工作直接优化 sanitizer 的<strong>运行时机制</strong>，使其更适配特定负载（如 fuzzing）。<strong>Fuzzan</strong> [27] 为 redzone 管理设计了<strong>高效元数据</strong>，加速了“ASan+fuzzing”；<strong>PartiSan</strong> [35] 将应用划分为<strong>带净化</strong>与<strong>不带净化</strong>的切片，使后者<strong>不承受额外开销</strong>；<strong>Bunshin</strong> [57] 则在<strong>并行运行</strong>的程序间<strong>分摊</strong>sanitizer 检查。我们预计 <strong>RustSan</strong> 可以与这些技术<strong>组合</strong>，进一步优化其性能。</p><hr><h3 id="_9-3-rust-程序加固" tabindex="-1"><a class="header-anchor" href="#_9-3-rust-程序加固"><span>9.3 Rust 程序加固</span></a></h3><p><strong>用于加固 Rust 的静态分析。</strong><br> 已有静态分析器被用于检测 <strong>unsafe Rust</strong> 中的缺陷。例如 <strong>Rudra</strong> [14] 在 Rust 的 MIR/HIR 上引入了<strong>可扩展静态分析</strong>来寻找特定模式的漏洞；<strong>MirChecker</strong> [37] 结合<strong>数值分析</strong>与 <strong>MIR 符号执行</strong>以检测<strong>运行期 panic</strong>与<strong>内存错误</strong>；<strong>Rupair</strong> [26] 可在 <code>unsafe</code> 代码中<strong>自动检测越界</strong>并用 MIR 上的<strong>轻量数据流分析</strong>修复。<strong>RustSan</strong> 同样利用 HIR/MIR 分析，但进一步做了<strong>更细粒度的信息提取</strong>（面向 <code>unsafe</code> 代码块的语句级分析）。静态/动态测试各有优劣，具体适用取决于场景；与这些工作不同，<strong>RustSan</strong> 是<strong>运行期</strong>的 sanitizer（例如可在 fuzzing 期间发现内存错误）。</p><p><strong>Rust 程序的运行期隔离。</strong><br> 有大量工作提出了<strong>运行时隔离</strong>机制，以<strong>约束</strong>（contain）由 <code>unsafe</code> 代码块与<strong>不安全外部库</strong>触发的内存错误带来的影响。<strong>XRust</strong> [38] 与 <strong>TRust</strong> [15] 引入了<strong>分离的内存分配器方案</strong>：将被 <code>unsafe</code> 触及的对象放入<strong>不安全堆</strong>；同时，它们还提供<strong>定制插桩框架</strong>，用以<strong>隔离</strong>会受不安全对象影响的<strong>安全内存指令</strong>（即本论文 §3.1 所述的 <em>false-safe</em>）。此外，也有研究探索基于 <strong>MPK（Memory Protection Key）</strong> 的隔离，用于限制 C 库的内存访问 [15, 31, 45]；例如 <strong>PKRUSafe</strong> [31] 通过<strong>动态剖析</strong>自动识别在 Rust 与 C 间共享的对象，并用 MPK 隔离对这些对象的访问。</p><p>这些用于识别 Rust 程序指令与对象安全性的<strong>静态分析方法</strong> [15, 38] 启发了 <strong>RustSan</strong>；而 <strong>RustSan</strong> 则在 MIR 中把它们<strong>细化到语句级</strong>。另一方面，<strong>RustSan</strong> 作为一个 sanitizer，需要<strong>在错误发生时</strong>检测出来。它<strong>有意识地继承</strong>了 ASan 的<strong>兼容性</strong>与<strong>可移植性</strong>：一个明确的设计选择是<strong>避免</strong>依赖<strong>体系结构特定</strong>的特性（如 MPK）。此外，它也<strong>避免</strong>了如 <strong>上下文敏感 points-to 分析</strong> [15] 这类<strong>计算开销巨大</strong>的技术，以保证<strong>可扩展性</strong>。</p><hr><h2 id="_10-结论-conclusion" tabindex="-1"><a class="header-anchor" href="#_10-结论-conclusion"><span>10 结论（Conclusion）</span></a></h2><p>本文提出了 <strong>RustSan</strong>：一种为 Rust 程序 <strong>“改造” AddressSanitizer（ASan）</strong> 的设计。<strong>RustSan</strong> 通过对<strong>内存访问点的选择性插桩</strong>，显著提升了 ASan 在 Rust 程序上的性能。核心洞见在于：<strong>大量访问点</strong>在含有 <code>unsafe</code> 的程序中依然<strong>保持 Rust 的安全性保证</strong>，因此可以被<strong>识别</strong>并<strong>免除</strong>sanitizer 检查。我们的评估通过<strong>CVE 复现</strong>实证证明了 <strong>RustSan</strong> 的<strong>检测能力</strong>；在<strong>通用应用基准</strong>上，<strong>RustSan</strong> 相比 ASan 展现出 <strong>62.3%</strong> 的性能提升；在<strong>模糊测试</strong>实验中，平均提升为 <strong>23.52%</strong>。</p><h2 id="附录" tabindex="-1"><a class="header-anchor" href="#附录"><span>附录</span></a></h2><h3 id="a-cve-case-study" tabindex="-1"><a class="header-anchor" href="#a-cve-case-study"><span>A. CVE case study</span></a></h3><p>我们在此给出若干<strong>案例研究</strong>，分析 Rust 中内存错误的根因以及 <strong>RustSan</strong> 对它们的检测。</p><figure><img src="'+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="案例-1-cve-2018-21000" tabindex="-1"><a class="header-anchor" href="#案例-1-cve-2018-21000"><span>案例 1：CVE-2018-21000</span></a></h4><p>该 CVE 属于 Rust 对 <code>transmute</code> 的实现中的<strong>堆溢出</strong>。问题的根源在 <em>Listing 4a</em> 的第 5 行：<code>Vec::from_raw_parts</code> 是 Rust 标准库函数，用于从<strong>原始指针</strong>构造新的向量对象，函数参数依次为<strong>向量长度</strong>与<strong>容量</strong>。这里的错误是<strong>第二、第三个参数的顺序被颠倒</strong>。在 Rust 术语中，<strong>容量</strong>（capacity）表示为未来插入元素所预留的<strong>最大空间</strong>，而<strong>长度</strong>（length）表示当前向量中<strong>实际元素个数</strong>。因此，被错误构造的向量极易在后续使用中导致<strong>对象边界之外</strong>的内存访问。在我们的复现中，<strong>RustSan</strong> 报告了在一个<strong>伪安全站点</strong>（false-safe site）上，对一个<strong>不安全对象</strong>触及了<strong>对象末端 redzone</strong> 的访问。</p><h4 id="案例-2-cve-2021-45713" tabindex="-1"><a class="header-anchor" href="#案例-2-cve-2021-45713"><span>案例 2：CVE-2021-45713</span></a></h4><p>该 CVE 发生在 <code>rusqlite</code> 中，是一起<strong>释放后使用（use-after-free）</strong>，由 <strong>unsafe Rust</strong> 中<strong>违背 Rust 对象生命周期保证</strong>引起。在 <em>Listing 4b</em> 的第 16 行，<code>update_hook</code> API 将闭包<strong>强制转换</strong>为函数指针，并把它<strong>注册</strong>到 <code>unsafe</code> 代码块中的<strong>外部（C/C++）库</strong>。<code>unsafe</code> Rust 与这些外部库<strong>都不遵守</strong> Rust 的生命周期保证。其结果是：当该<strong>闭包被回调</strong>且相关对象被<strong>销毁</strong>时，产生了<strong>释放后使用</strong>。在本 CVE 的复现中，<strong>RustSan</strong> 在一个<strong>伪安全站点</strong>上报告了对<strong>已隔离（quarantined）的安全对象</strong>的访问。</p><h3 id="b-taint-source-reduction-with-hir-mir-analysis" tabindex="-1"><a class="header-anchor" href="#b-taint-source-reduction-with-hir-mir-analysis"><span>B. Taint source reduction with HIR/MIR analysis</span></a></h3><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们还评估了 <strong>RustSan</strong> 与 <strong>XRust</strong> [38] 在 <strong>HIR/MIR 分析</strong>中用于<strong>污点源（taint source）识别</strong>的方法（即§4中所述的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">I1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord">1</span></span></span></span> 与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">I2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord">2</span></span></span></span>）。需要注意的是，<strong>XRust</strong> 将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">I1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord">1</span></span></span></span>（即 <strong>所有位于 <code>unsafe</code> 代码块中的语句</strong>）<strong>直接</strong>视为污点源；而 <strong>RustSan</strong> 使用的是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">I2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord">2</span></span></span></span>，它是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">I1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord">1</span></span></span></span> 的<strong>精炼子集</strong>，<strong>只包含写语句</strong>。此外，<strong>RustSan</strong> 能够识别<strong>内联函数</strong>中的语句，而 <strong>XRust</strong> 会<strong>遗漏</strong>这类语句。因而，采用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">I2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord">2</span></span></span></span> 会<strong>减少</strong>污点源的数量；但与此同时，<strong>把内联函数中的语句也纳入考虑</strong>，又会使 RustSan 的污点源集合<strong>相较 XRust 增加</strong>。即便如此，实验显示 <strong>RustSan</strong> 的污点源集合规模<strong>平均减少了 12.86%</strong>。这意味着 <strong>RustSan</strong> 在 HIR/MIR 阶段输出了<strong>更为精细</strong>的分析结果，<strong>传递</strong>到 LLVM 阶段后，<strong>缓解</strong>了 LLVM IR 分析的复杂度。</p><h3 id="c-heap-allocator-microbenchmark" tabindex="-1"><a class="header-anchor" href="#c-heap-allocator-microbenchmark"><span>C. Heap allocator microbenchmark</span></a></h3><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>RustSan</strong> 修改了 <strong>ASan</strong> 的堆分配器，使其按照 <strong>RustSan</strong> 的影子内存（shadow memory）方案为新分配的内存“着色”。<br> 为衡量<strong>运行期影子内存管理</strong>所带来的开销，我们比较了在 <strong>RustSan</strong> 与 <strong>ASan</strong> 下，对于不同分配尺寸时 <code>malloc()</code> 的<strong>平均执行时间</strong>。对每一种内存大小，我们将分配操作（<code>malloc()</code>）<strong>重复执行 1000 万次</strong>。</p><p><strong>图6</strong> 展示了实验结果：相对于 <strong>ASan</strong> 的分配器，<strong>RustSan</strong> 的分配器<strong>平均额外开销为 5.52%</strong>。基于该微基准结果，我们认为：在通用应用与模糊测试（fuzzing）基准中，由堆分配器改动引入的影响<strong>可以忽略不计</strong>。</p><h2 id="citation" tabindex="-1"><a class="header-anchor" href="#citation"><span>Citation</span></a></h2>',229)]))}const v=t(y,[["render",I],["__file","RustSan：Retrofitting AddressSanitizer for Efficient Sanitization of Rust.html.vue"]]),M=JSON.parse(`{"path":"/posts/scholar/RustSan%EF%BC%9ARetrofitting%20AddressSanitizer%20for%20Efficient%20Sanitization%20of%20Rust.html","title":"RustSan: Retrofitting AddressSanitizer for Efficient Sanitization of Rust","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-10-15T00:00:00.000Z","category":["Rust"],"description":"RustSan: Retrofitting AddressSanitizer for Efficient Sanitization of Rust 论文收录于第33届 USENIX Security Symposium（USENIX Security ’24，CCF A） 的会议论文集，链接：https://www.usenix.org/confere...","head":[["meta",{"property":"og:url","content":"https://iXanadu13.github.io/posts/scholar/RustSan%EF%BC%9ARetrofitting%20AddressSanitizer%20for%20Efficient%20Sanitization%20of%20Rust.html"}],["meta",{"property":"og:site_name","content":"Xanadu13's Blog"}],["meta",{"property":"og:title","content":"RustSan: Retrofitting AddressSanitizer for Efficient Sanitization of Rust"}],["meta",{"property":"og:description","content":"RustSan: Retrofitting AddressSanitizer for Efficient Sanitization of Rust 论文收录于第33届 USENIX Security Symposium（USENIX Security ’24，CCF A） 的会议论文集，链接：https://www.usenix.org/confere..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://iXanadu13.github.io/assets/images/scholar/RustSan/figure1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-15T14:24:37.000Z"}],["meta",{"property":"article:published_time","content":"2025-10-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-15T14:24:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RustSan: Retrofitting AddressSanitizer for Efficient Sanitization of Rust\\",\\"image\\":[\\"https://iXanadu13.github.io/assets/images/scholar/RustSan/figure1.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/RustSan/figure2.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/RustSan/listing1.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/RustSan/figure3.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/RustSan/listing2.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/RustSan/table1.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/RustSan/table2.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/RustSan/listing3.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/RustSan/table3.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/RustSan/figure4.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/RustSan/figure5.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/RustSan/table4.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/RustSan/table5.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/RustSan/listing4.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/RustSan/table6.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/RustSan/figure6.png\\"],\\"datePublished\\":\\"2025-10-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-15T14:24:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Xanadu13\\",\\"url\\":\\"https://github.com/iXanadu13\\"}]}"]]},"headers":[{"level":2,"title":"摘要","slug":"摘要","link":"#摘要","children":[]},{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. 背景（Background）","slug":"_2-背景-background","link":"#_2-背景-background","children":[{"level":3,"title":"2.1 AddressSanitizer","slug":"_2-1-addresssanitizer","link":"#_2-1-addresssanitizer","children":[]},{"level":3,"title":"2.2 Rust 的安全模型（Rust safety model）","slug":"_2-2-rust-的安全模型-rust-safety-model","link":"#_2-2-rust-的安全模型-rust-safety-model","children":[]}]},{"level":2,"title":"3. RUSTSAN 概览","slug":"_3-rustsan-概览","link":"#_3-rustsan-概览","children":[{"level":3,"title":"3.1 定义与内存校验模型","slug":"_3-1-定义与内存校验模型","link":"#_3-1-定义与内存校验模型","children":[]},{"level":3,"title":"3.2 跨 IR 分析（Cross-IR analysis）","slug":"_3-2-跨-ir-分析-cross-ir-analysis","link":"#_3-2-跨-ir-分析-cross-ir-analysis","children":[]},{"level":3,"title":"3.3 RustSan 的影子内存方案（RustSan shadow memory scheme）","slug":"_3-3-rustsan-的影子内存方案-rustsan-shadow-memory-scheme","link":"#_3-3-rustsan-的影子内存方案-rustsan-shadow-memory-scheme","children":[]}]},{"level":2,"title":"4. 跨 IR：Rust 的 HIR/MIR 分析","slug":"_4-跨-ir-rust-的-hir-mir-分析","link":"#_4-跨-ir-rust-的-hir-mir-分析","children":[{"level":3,"title":"4.1 背景：Rust 的 HIR/MIR","slug":"_4-1-背景-rust-的-hir-mir","link":"#_4-1-背景-rust-的-hir-mir","children":[]},{"level":3,"title":"4.2 语句级内存访问跟踪（Statement-level memory access tracking）","slug":"_4-2-语句级内存访问跟踪-statement-level-memory-access-tracking","link":"#_4-2-语句级内存访问跟踪-statement-level-memory-access-tracking","children":[]},{"level":3,"title":"4.3 递归安全作用域分析（Recursive safety scope analysis）","slug":"_4-3-递归安全作用域分析-recursive-safety-scope-analysis","link":"#_4-3-递归安全作用域分析-recursive-safety-scope-analysis","children":[]},{"level":3,"title":"4.4 分配函数识别（Allocation function identification）","slug":"_4-4-分配函数识别-allocation-function-identification","link":"#_4-4-分配函数识别-allocation-function-identification","children":[]}]},{"level":2,"title":"5. 跨 IR：LLVM IR 分析","slug":"_5-跨-ir-llvm-ir-分析","link":"#_5-跨-ir-llvm-ir-分析","children":[{"level":3,"title":"5.1 对象与访问点的分类流水线（Object and site classification pipeline）","slug":"_5-1-对象与访问点的分类流水线-object-and-site-classification-pipeline","link":"#_5-1-对象与访问点的分类流水线-object-and-site-classification-pipeline","children":[]},{"level":3,"title":"5.2 分配点安全性的识别（Allocation site safety identification）","slug":"_5-2-分配点安全性的识别-allocation-site-safety-identification","link":"#_5-2-分配点安全性的识别-allocation-site-safety-identification","children":[]},{"level":3,"title":"5.3 将分析技术适配到 Rust（Adapting analysis techniques to Rust）","slug":"_5-3-将分析技术适配到-rust-adapting-analysis-techniques-to-rust","link":"#_5-3-将分析技术适配到-rust-adapting-analysis-techniques-to-rust","children":[]}]},{"level":2,"title":"6. RustSan 的影子内存方案（shadow memory scheme）","slug":"_6-rustsan-的影子内存方案-shadow-memory-scheme","link":"#_6-rustsan-的影子内存方案-shadow-memory-scheme","children":[{"level":3,"title":"6.1 感知安全性的对象分配（Safety-aware object allocation）","slug":"_6-1-感知安全性的对象分配-safety-aware-object-allocation","link":"#_6-1-感知安全性的对象分配-safety-aware-object-allocation","children":[]},{"level":3,"title":"6.2 选择性插桩（Selective instrumentation）","slug":"_6-2-选择性插桩-selective-instrumentation","link":"#_6-2-选择性插桩-selective-instrumentation","children":[]}]},{"level":2,"title":"7. 评估（Evaluation）","slug":"_7-评估-evaluation","link":"#_7-评估-evaluation","children":[{"level":3,"title":"7.1 unsafe Rust 的使用统计（Unsafe Rust usage statistics）","slug":"_7-1-unsafe-rust-的使用统计-unsafe-rust-usage-statistics","link":"#_7-1-unsafe-rust-的使用统计-unsafe-rust-usage-statistics","children":[]},{"level":3,"title":"7.2 检测能力：选择性插桩的稳健性（Detection capability: robustness of selective instrumentation）","slug":"_7-2-检测能力-选择性插桩的稳健性-detection-capability-robustness-of-selective-instrumentation","link":"#_7-2-检测能力-选择性插桩的稳健性-detection-capability-robustness-of-selective-instrumentation","children":[]},{"level":3,"title":"7.3 检测能力：跨安全级别的对象访问（Detection capability: cross-safety object access）","slug":"_7-3-检测能力-跨安全级别的对象访问-detection-capability-cross-safety-object-access","link":"#_7-3-检测能力-跨安全级别的对象访问-detection-capability-cross-safety-object-access","children":[]},{"level":3,"title":"7.4 使用 RustSan 的编译时间（Compile time with RustSan）","slug":"_7-4-使用-rustsan-的编译时间-compile-time-with-rustsan","link":"#_7-4-使用-rustsan-的编译时间-compile-time-with-rustsan","children":[]},{"level":3,"title":"7.5 微基准（Microbenchmarks）","slug":"_7-5-微基准-microbenchmarks","link":"#_7-5-微基准-microbenchmarks","children":[]},{"level":3,"title":"7.6 通用应用中的运行时开销（Runtime overhead in general applications）","slug":"_7-6-通用应用中的运行时开销-runtime-overhead-in-general-applications","link":"#_7-6-通用应用中的运行时开销-runtime-overhead-in-general-applications","children":[]},{"level":3,"title":"7.7 模糊测试（Fuzzing）","slug":"_7-7-模糊测试-fuzzing","link":"#_7-7-模糊测试-fuzzing","children":[]}]},{"level":2,"title":"8. 安全性与稳健性讨论","slug":"_8-安全性与稳健性讨论","link":"#_8-安全性与稳健性讨论","children":[{"level":3,"title":"8.1 实证验证（Empirical validation）","slug":"_8-1-实证验证-empirical-validation","link":"#_8-1-实证验证-empirical-validation","children":[]},{"level":3,"title":"8.2 定性分析（Qualitative analysis）","slug":"_8-2-定性分析-qualitative-analysis","link":"#_8-2-定性分析-qualitative-analysis","children":[]}]},{"level":2,"title":"9. 相关工作（Related Work）","slug":"_9-相关工作-related-work","link":"#_9-相关工作-related-work","children":[{"level":3,"title":"9.1 面向内存缺陷检测的 Sanitizer","slug":"_9-1-面向内存缺陷检测的-sanitizer","link":"#_9-1-面向内存缺陷检测的-sanitizer","children":[]},{"level":3,"title":"9.2 面向性能的 Sanitizer 优化","slug":"_9-2-面向性能的-sanitizer-优化","link":"#_9-2-面向性能的-sanitizer-优化","children":[]},{"level":3,"title":"9.3 Rust 程序加固","slug":"_9-3-rust-程序加固","link":"#_9-3-rust-程序加固","children":[]}]},{"level":2,"title":"10 结论（Conclusion）","slug":"_10-结论-conclusion","link":"#_10-结论-conclusion","children":[]},{"level":2,"title":"附录","slug":"附录","link":"#附录","children":[{"level":3,"title":"A. CVE case study","slug":"a-cve-case-study","link":"#a-cve-case-study","children":[]},{"level":3,"title":"B. Taint source reduction with HIR/MIR analysis","slug":"b-taint-source-reduction-with-hir-mir-analysis","link":"#b-taint-source-reduction-with-hir-mir-analysis","children":[]},{"level":3,"title":"C. Heap allocator microbenchmark","slug":"c-heap-allocator-microbenchmark","link":"#c-heap-allocator-microbenchmark","children":[]}]},{"level":2,"title":"Citation","slug":"citation","link":"#citation","children":[]}],"git":{"createdTime":1760538277000,"updatedTime":1760538277000,"contributors":[{"name":"Xanadu13","email":"xanadu13@qq.com","commits":1}]},"readingTime":{"minutes":57.78,"words":17333},"filePathRelative":"posts/scholar/RustSan：Retrofitting AddressSanitizer for Efficient Sanitization of Rust.md","localizedDate":"2025年10月15日","excerpt":"\\n<p>论文收录于第33届 USENIX Security Symposium（USENIX Security ’24，CCF A） 的会议论文集，链接：<a href=\\"https://www.usenix.org/conference/usenixsecurity24/presentation/cho-kyuwon\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.usenix.org/conference/usenixsecurity24/presentation/cho-kyuwon</a>。</p>\\n<h2>摘要</h2>\\n","autoDesc":true}`);export{v as comp,M as data};
