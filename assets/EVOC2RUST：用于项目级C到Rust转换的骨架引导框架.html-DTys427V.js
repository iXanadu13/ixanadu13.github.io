import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as o,o as r}from"./app-CKdWXRzV.js";const g="/assets/images/scholar/EVOC2RUST/figure1.png",a="/assets/images/scholar/EVOC2RUST/figure2.png",e="/assets/images/scholar/EVOC2RUST/table1.png",i="/assets/images/scholar/EVOC2RUST/table2.png",l="/assets/images/scholar/EVOC2RUST/table3.png",c="/assets/images/scholar/EVOC2RUST/table4.png",p="/assets/images/scholar/EVOC2RUST/table5.png",d="/assets/images/scholar/EVOC2RUST/figure3.png",u="/assets/images/scholar/EVOC2RUST/table6.png",h="/assets/images/scholar/EVOC2RUST/figure4.png",m={};function R(C,t){return r(),n("div",null,t[0]||(t[0]=[o('<h1 id="evoc2rust-a-skeleton-guided-framework-for-project-level-c-to-rust-translation" tabindex="-1"><a class="header-anchor" href="#evoc2rust-a-skeleton-guided-framework-for-project-level-c-to-rust-translation"><span>EVOC2RUST: A Skeleton-guided Framework for Project-Level C-to-Rust Translation</span></a></h1><p>论文来自 <a href="https://arxiv.org/abs/2508.04295" target="_blank" rel="noopener noreferrer">arXiv预印本</a></p><h2 id="摘要" tabindex="-1"><a class="header-anchor" href="#摘要"><span>摘要</span></a></h2><p>Rust 在编译期提供的安全性保证，使其非常适合用于安全关键系统，因此对将遗留的 C 代码库迁移到 Rust 的需求不断增长。尽管已有多种方法被提出来完成这一任务，但它们都存在固有权衡：基于规则（rule-based）的方法在满足代码安全性与 Rust 习惯用法方面面临挑战；而基于大语言模型（LLM）的方法由于整个代码库中模块之间存在大量依赖，常常无法生成<strong>语义等价</strong>的 Rust 代码。近期研究表明，这两类方案都主要局限于<strong>小规模程序</strong>。</p><p>本文提出 <strong>EVOC2RUST</strong>，一个用于将<strong>整套 C 项目</strong>自动转换为<strong>等价 Rust 项目</strong>的框架。EVOC2RUST 采用一种由<strong>骨架（skeleton）引导</strong>的项目级翻译策略。其流水线包含三个“进化式”的阶段：</p><ol><li>首先将 C 项目分解为功能模块，使用<strong>特征映射（feature mapping）增强</strong>的 LLM 来转换定义与宏，并生成通过类型检查的<strong>函数桩（stub）</strong>，从而形成<strong>可编译的 Rust 骨架</strong>；</li><li>随后<strong>增量式地</strong>翻译各个函数，用翻译结果替换相应的桩占位符；</li><li>最后通过<strong>结合 LLM 与静态分析</strong>来修复编译错误。</li></ol><p>凭借这种进化式增强，EVOC2RUST 结合了基于规则方法与基于 LLM 方法的优势。我们在开源基准与<strong>六个工业级项目</strong>上的评估表明，EVOC2RUST 在<strong>项目级 C→Rust 翻译</strong>上具有更优性能：平均而言，相比基于 LLM 的方法，语法与语义准确率分别提升 <strong>17.24%</strong> 与 <strong>14.32%</strong>；相比基于规则的工具，<strong>代码安全率</strong>提高 <strong>96.79%</strong>。在<strong>模块级</strong>上，即使面对复杂代码库与长函数，EVOC2RUST 在工业项目上仍可达到 <strong>92.25%</strong> 的编译通过率与 <strong>89.53%</strong> 的测试通过率。</p><h2 id="索引词" tabindex="-1"><a class="header-anchor" href="#索引词"><span>索引词</span></a></h2><p>C-to-Rust Conversion, Project-level Code Translation, Skeleton Guided, Feature Mapping, Large Language Models</p><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>将遗留的 C 代码库迁移为同等功能的 Rust 项目，已在软件工程领域成为<strong>强烈的现实需求</strong> [1][2]。在实际生产环境中的 C 系统里，<strong>内存安全</strong>相关的漏洞是最常见的一类严重安全缺陷；来自 Google 与 Microsoft 的行业报告显示，这类漏洞约占<strong>高危漏洞的 70% 左右</strong> [3]。这一共识推动了工程实践的范式转变：转向通过<strong>安全的编程语言</strong>在<strong>编译期</strong>提供严格的安全保证 [4]。作为回应，现代系统编程语言 <strong>Rust</strong> 崭露头角，凭借在编译期<strong>强制</strong>执行严格的<strong>所有权/借用模型</strong>，提供内存安全保障，成为领先的替代方案 [5]。</p><p>近期工作提出了<strong>基于规则（rule-based）<strong>的工具 [6]–[8]，主要在一种简洁的编译中间表示上施行</strong>以语法为主</strong>的转换，将 C 代码转为 Rust。此类翻译天然容易生成<strong>不符合 Rust 惯用风格</strong>的低层次结构代码，且可能包含<strong>语义不准确</strong>之处 [9]。另一类工作采用<strong>基于大语言模型（LLM）<strong>的方法 [10]–[12]，利用代码 LLM 的理解能力完成翻译。但由于缺乏</strong>成对（平行）的 C↔Rust 训练数据</strong>，且两种语言在语义/风格上差异显著，这些方法常常无法生成<strong>语义等价</strong>的 Rust 代码 [13]。尽管<strong>自动化代码翻译</strong>已被广泛研究 [14]–[16]，<strong>项目级</strong>的 C→Rust 翻译仍面临特殊挑战：</p><h3 id="挑战一-为保证安全而产生的显著-语言鸿沟" tabindex="-1"><a class="header-anchor" href="#挑战一-为保证安全而产生的显著-语言鸿沟"><span>挑战一：为保证安全而产生的显著“语言鸿沟”</span></a></h3><p>C 与 Rust 在<strong>安全模型</strong>上存在根本差异：C 允许<strong>宽松的类型检查</strong>、<strong>不受限的指针运算</strong>以及<strong>手动内存管理</strong>；而 Rust 则在编译期强制执行<strong>严格的类型安全</strong>、基于<strong>所有权</strong>的内存安全保证，并通过<strong>借用规则</strong>约束引用的使用。现有<strong>基于规则</strong>的转换器常为达成功能而<strong>牺牲安全性</strong>，依赖<strong>裸指针</strong>、<code>unsafe</code> 块或<strong>外部 C 函数</strong> [9]。<strong>基于 LLM</strong> 的方法虽能在一定程度上改进安全性，但常<strong>缺乏充分的上下文理解</strong>（例如变量作用域、指针生命周期等），可能导致逻辑错误或<strong>内存安全违规</strong>，使得译出的 Rust 代码仍不可靠 [17]。因此，<strong>单独</strong>依赖基于规则或基于 LLM 的方法，往往<strong>难以稳定满足</strong> Rust 严苛的安全要求。</p><h3 id="挑战二-项目级的代码依赖与结构一致性" tabindex="-1"><a class="header-anchor" href="#挑战二-项目级的代码依赖与结构一致性"><span>挑战二：项目级的代码依赖与结构一致性</span></a></h3><p>将<strong>整个 C 项目</strong>完成迁移，远比翻译<strong>孤立函数</strong>更具挑战：译出的 Rust 项目必须<strong>保留跨模块依赖</strong>并维持<strong>一致的项目结构层级</strong> [18][19]。代码类 LLM 往往难以处理如此<strong>大尺度的上下文</strong>，从而引发<strong>引用断裂</strong>、<strong>API 不一致</strong>或<strong>模块边界错误</strong> [9]。结果是，现有方法多仅在<strong>小规模程序</strong>（例如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≤</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">\\le 100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">100</span></span></span></span> 行代码）上表现良好 [10][20]，在<strong>真实项目场景</strong>中表现不足。</p><hr><p>在本文中，我们提出 <strong>EVOC2RUST</strong>：一个用于将<strong>完整 C 项目</strong>自动翻译为<strong>等价 Rust 代码</strong>的框架。为弥合语言差异并确保安全（对应<strong>挑战一</strong>），EVOC2RUST 以<strong>安全保持（safety-preserving）映射</strong>增强 LLM，覆盖<strong>七类核心语言要素</strong>：<strong>类型（types）</strong>、<strong>宏（macros）</strong>、<strong>函数（functions）</strong>、<strong>运算符（operators）</strong>、<strong>语法结构（syntax structures）</strong>、<strong>全局量（globals）<strong>以及</strong>可变参数（variadic arguments）</strong>。为实现<strong>项目级</strong>翻译（对应<strong>挑战二</strong>），EVOC2RUST 引入 <strong>骨架引导（skeleton-guided）</strong> 的三阶段翻译策略：</p><ol><li><strong>分析与分解</strong>：解析输入的 C 项目，抽取高层元数据，并将项目<strong>分解为功能模块</strong>；随后生成一个<strong>可编译的 Rust 骨架</strong>，其中各函数以 <strong>占位桩（stub）</strong> 形式存在。</li><li><strong>增量式翻译</strong>：利用结合了上述<strong>特征映射</strong>的 LLM，<strong>逐步</strong>将这些函数桩翻译为具体实现，并<strong>替换</strong>骨架中的占位符。</li><li><strong>迭代式修复</strong>：将 LLM 与<strong>静态分析</strong>结合，<strong>迭代修复编译错误</strong>并细化输出结果。</li></ol><p>这种<strong>进化式</strong>流程有效融合了<strong>基于规则</strong>与<strong>基于学习</strong>两类方法的优势，在自动化 C→Rust 迁移中，于<strong>正确性</strong>与<strong>安全性</strong>之间取得<strong>务实平衡</strong>。</p><p>我们在一个名为 <strong>Vivo-Bench</strong> 的开源基准 [21]，以及我们自建、包含 <strong>6</strong> 个工业级项目的数据集 <strong>C2R-Bench</strong> 上评估 <strong>EVOC2RUST</strong>。实验结果表明，EVOC2RUST 在项目级 C→Rust 翻译任务上<strong>显著优于</strong>各类基线方法。与<strong>基于 LLM</strong>的方法相比，EVOC2RUST 在<strong>编译通过率</strong>上平均提升 <strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>23.72</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">23.72\\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">23.72%</span></span></span></span></strong>，在<strong>行级接受率（line acceptance rate）<strong>上平均提升 <strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>23.05</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">23.05\\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">23.05%</span></span></span></span></strong>，同时</strong>代码安全性</strong>也略有优势。与<strong>基于规则</strong>的方法相比，EVOC2RUST 的<strong>代码安全率</strong>平均<strong>高出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>70.19</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">70.19\\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">70.19%</span></span></span></span></strong>，而<strong>编译通过率</strong>与<strong>行级接受率</strong>仍保持在<strong>同一竞争水平</strong>。在<strong>模块级</strong>评测中，EVOC2RUST 在工业项目上的<strong>编译通过率</strong>达到 <strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>92.25</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">92.25\\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">92.25%</span></span></span></span></strong>，<strong>测试通过率</strong>达到 <strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>89.53</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">89.53\\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">89.53%</span></span></span></span></strong>。我们的<strong>消融实验</strong>进一步验证了各组件在 EVOC2RUST 中的关键作用，其中<strong>安全保持映射（safety-preserving mapping）<strong>是该方法的</strong>基石</strong>。</p><p>主要贡献：</p><ul><li>我们提出了一种<strong>面向项目级</strong>的 C→Rust 代码翻译新方法，兼顾<strong>语法正确性</strong>、<strong>语义等价性</strong>与<strong>内存安全性</strong>。</li><li>我们在 C 与 Rust 的<strong>核心语言要素</strong>之间定义了<strong>安全保持映射</strong>，以增强 LLM 的<strong>安全意识</strong>与<strong>约束遵循能力</strong>。</li><li>我们在<strong>开源场景</strong>与<strong>工业场景</strong>对 EVOC2RUST 进行了系统评测。结果显示，EVOC2RUST <strong>整体优于</strong>现有基线，能够将 C 项目<strong>有效翻译</strong>为<strong>正确且安全</strong>的 Rust 代码。</li></ul><h2 id="_2-方法-approach" tabindex="-1"><a class="header-anchor" href="#_2-方法-approach"><span>2. 方法（APPROACH）</span></a></h2><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>图 1 展示了 <strong>EVOC2RUST</strong> 的整体架构，包含三个关键步骤：（1）<strong>骨架构建（Skeleton construction）</strong>：将 C 项目分解为模块，并构建一个用于组装 Rust 模块的 <strong>Rust 项目骨架</strong>（见 §II-A）；（2）<strong>增量式翻译（Incremental translation）</strong>：依据<strong>安全保持的语言映射</strong>翻译骨架中的各个模块（见 §II-B）；（3）<strong>生成后修复（Post-generation repair）</strong>：将基于 LLM 的细化与<strong>静态分析</strong>结合，用于代码优化（见 §II-C）。</p><h3 id="a-项目骨架构建-project-skeleton-construction" tabindex="-1"><a class="header-anchor" href="#a-项目骨架构建-project-skeleton-construction"><span>A. 项目骨架构建（Project Skeleton Construction）</span></a></h3><p>一种直接的项目级翻译思路是<strong>逐个函数翻译</strong>，再把它们汇总成项目。然而，<strong>天真地聚合</strong>已翻译的函数常会导致<strong>级联的相互依赖错误</strong>。为此，<strong>EVOC2RUST</strong> 采用<strong>骨架引导</strong>的策略：在<strong>项目元数据</strong>的指导下构建一个<strong>可编译的 Rust 项目骨架</strong>，并<strong>增量式</strong>地用已翻译的函数去填充它。</p><p>对给定的 C 项目，EVOC2RUST 使用 <strong>Tree-sitter</strong> [22] 解析<strong>函数签名</strong>、<strong>调用图</strong>、<strong>结构体</strong>与<strong>类型定义</strong>。这些元素被组织为<strong>项目元数据</strong>，包括：文件名、<code>include</code> 语句、宏定义、类型声明、全局标识符、函数签名，以及 <strong>“声明 ↔ 源文件”</strong> 的映射表。随后，这些元数据被<strong>系统化地</strong>通过<strong>基于规则</strong>的转换替换为 Rust 等价物。例如：C 的 <code>include</code> 依赖被转换为 Rust 的 <code>use</code> 导入；标识符声明被转换为 Rust 的 <code>pub use</code> 语句（如 <code>pub use {Rust_filename}::{identifier_name}</code>），其中文件名由<strong>声明到文件</strong>的映射表提供。</p><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>基于转换后的元数据，EVOC2RUST 构建了一个<strong>忠实保留原始 C 项目结构组织</strong>的 <strong>Rust 项目骨架</strong>（见图 2）。骨架由从 C 的<strong>定义、宏与函数签名</strong>自动翻译得到的 Rust 结构组成。每个 C 函数都会在 Rust 中分配一个<strong>通过类型检查</strong>的<strong>占位“哑函数”</strong>：其签名为翻译后的签名，函数体使用 <code>unimplemented!()</code> 宏占位。这样的<strong>占位符</strong>是<strong>安全的替身</strong>，即使函数体尚未翻译，项目也能<strong>先行通过编译</strong>。</p><p>这种<strong>骨架引导</strong>的做法，使得函数体可以被<strong>逐步翻译并插入</strong>，从而保证<strong>上下文正确性</strong>，并<strong>消除函数间依赖错误</strong>。因此，即便是<strong>具有复杂模块交互</strong>的大型项目，该流程也能<strong>平滑地</strong>支持翻译、编译与修复。</p><h3 id="b-基于安全保持映射的模块翻译-module-translation-with-safety-preserving-mapping" tabindex="-1"><a class="header-anchor" href="#b-基于安全保持映射的模块翻译-module-translation-with-safety-preserving-mapping"><span>B. 基于安全保持映射的模块翻译（Module Translation with Safety-preserving Mapping）</span></a></h3><p>EVOC2RUST 使用 <strong>LLM</strong> 将 C 模块自动翻译为 Rust 结构：先把<strong>定义、宏、函数签名</strong>转换出来以组装骨架，再把<strong>函数体</strong>翻译后<strong>填充</strong>骨架中的占位哑函数。为在翻译过程中<strong>保持安全与语义一致</strong>，EVOC2RUST 用一套<strong>全面的语言映射</strong>来增强 LLM，涵盖<strong>七大类</strong>：</p><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li><p><strong>类型映射（Type Mapping）</strong>。对每一种 C 类型，我们都建立了一个对应的 Rust 类型（见表I）。例如，我们引入 <code>cstr!()</code> 宏来保证经由该宏得到的所有字符串都<strong>保持以空字节结尾（null-terminated）<strong>的性质，从而避免在</strong>加密/压缩</strong>算法中出现不一致。基于每种 C 类型可用的操作，我们在 Rust 中实现<strong>对应的操作</strong>。鉴于 C 的<strong>指针</strong>支持<strong>加减运算</strong>、<strong>取址</strong>和<strong>下标访问</strong>等，我们在 Rust 中实现了与之对应的 <strong>trait</strong>；对于 C <strong>数组</strong>可<strong>衰变为指针</strong>的特性，我们允许数组通过 <code>cast()</code> 方法<strong>转换为指针类型</strong>。</p></li><li><p><strong>类型转换（Type Conversion）</strong>。我们实现了 <code>CastIntoTyped</code> <strong>trait</strong> 来在 Rust 中执行类型转换，涵盖<strong>整数之间</strong>以及<strong>不同指针类型之间</strong>的转换；同时<strong>允许指针→整数</strong>（但<strong>禁止整数→指针</strong>）的转换。示例：<code>a = (uint16_t)b</code> 可译为 <code>a = b.cast::&lt;u16&gt;()</code>；<code>pi = (int*)pu</code> 可译为 <code>pi = pu.cast::&lt;Ptr&lt;i32&gt;&gt;()</code>。由于 Rust 具备<strong>类型推断</strong>，我们也允许不带显式类型的 <code>cast()</code> 来模拟 C 的<strong>隐式转换</strong>。在<strong>修复阶段</strong>，当需要修正由隐式转换导致的类型错误时，<strong>无类型参数</strong>的 <code>cast()</code> 能显著提升 LLM 优化的成功率。</p></li><li><p><strong>宏/函数映射（Macro/Function Mapping）</strong>。对 C 的原生宏（如 <code>NULL</code>、<code>__LINE__</code>），我们提供 Rust 端的对等实现。对 C 的原生函数（如 <code>malloc</code>、<code>free</code>、<code>memcpy</code>），我们实现<strong>等价功能的 Rust 函数</strong>，并<strong>优先采用安全方法</strong>，而非直接调用与之<strong>逐字对等</strong>但<strong>不安全</strong>的底层实现（例如用不安全的 <code>std::ptr::copy</code> 来实现 <code>memmove</code> 仅作为内部细节）。通过简明的提示，LLM 会遵循<strong>将原生 C 函数 <code>name()</code> 翻译为 <code>c_name!()</code> 宏</strong>的规则。</p></li></ol><blockquote><p>笔者注：简单地基于提示词实现？</p></blockquote><ol start="4"><li><p><strong>语法结构映射（Syntax Structure Mapping）</strong>。Rust 的 <code>for</code> 循环与 C 的 <code>for</code> 在行为上<strong>并不相同</strong>，直接逐字翻译可能带来<strong>语义错误</strong>；此外，C 的 <code>do while</code> 在 Rust 中<strong>没有直接等价物</strong>，而 <code>switch</code> 与 Rust 的 <code>match</code> 也存在差异，容易诱发<strong>逻辑错误</strong>。为此，我们实现了 <code>c_for!</code>、<code>c_do!</code>、<code>c_switch!</code> 等宏，以<strong>复现 C 的语法与逻辑</strong>；并通过提示引导 LLM 将原始语法<strong>翻译为这些宏</strong>。</p></li><li><p><strong>运算符映射（Operator Mapping）</strong>。我们为 C 特有的运算符在 Rust 中提供对应实现，包括 <code>++</code>、<code>--</code>、<code>&amp;</code> 与 <code>sizeof()</code>。其中，<code>sizeof()</code> 被映射为两个宏：<code>c_sizeof!()</code> 与 <code>c_sizeofval!()</code>。自增/自减被实现为<strong>四个函数</strong>（涵盖<strong>前缀</strong>与<strong>后缀</strong>），适用于<strong>所有整数与指针类型</strong>。我们还要求模型不要把 <code>&amp;</code> 翻译为 Rust 的借用运算符 <code>&amp;</code> / <code>&amp;mut</code>，而是翻译为<strong>获取当前值指针</strong>的 <code>c_ref!()</code> 宏。</p></li><li><p><strong>全局变量映射（Global Variable Mapping）</strong>。在 Rust 中使用<strong>可变的全局变量</strong>（<code>static mut</code>）是不安全的，因此我们定义 <code>Global&lt;T&gt;</code> 类型来<strong>安全地管理</strong>全局量；其实现内部使用 <code>Mutex</code> 来保证<strong>线程安全</strong>，从而<strong>消除不安全代码</strong>的需求。我们还提供 <code>global!()</code> 宏以支持<strong>惰性初始化</strong>。</p></li></ol><blockquote><p>笔者注：能否明确地分析出线程安全无同步的情况（例如ThreadLocal）？</p></blockquote><ol start="7"><li><strong>可变参数映射（Variadic Argument Mapping）</strong>。可变参数主要用于<strong>日志</strong>和<strong>字符串格式化</strong>。因此我们定义 <code>VaList</code> 类型（本质为一个 <code>Slice</code>，内部包含对多个实现了 <code>Display</code> trait 的值的引用），并提供 <code>va_format!()</code> 宏用于字符串格式化。我们还利用可变参数来实现 C 函数（如 <code>snprintf</code>）在 Rust 端的<strong>等价物</strong>。</li></ol><p>上述<strong>特征映射</strong>均被表述为<strong>转换样式（pattern）</strong>，每个样式明确给出其<strong>动机</strong>、<strong>影响</strong>、<strong>解决方案</strong>及<strong>对应代码示例</strong>（见表II）。通过凝练高级工程师的实践经验，这些样式把<strong>隐性专业知识</strong>固化为<strong>可复用的 C→Rust 迁移规则</strong>。</p><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为引导 LLM 进行<strong>准确且合乎惯用法</strong>的翻译，我们会基于<strong>输入的 C 代码</strong>检索最相关的样式：具体而言，同时对<strong>输入片段</strong>与<strong>样例样式</strong>编码为<strong>稠密向量</strong>，计算<strong>余弦相似度</strong>，选出 <strong>Top-K</strong> 个最接近的样式。随后将这些样式<strong>注入到 LLM 提示词</strong>中，以如下<strong>结构化模板</strong>来约束其输出。</p><h4 id="提示模板-将-c-模块翻译为-rust" tabindex="-1"><a class="header-anchor" href="#提示模板-将-c-模块翻译为-rust"><span>（提示模板）将 C 模块翻译为 Rust</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>将 C 的［macro/definition/function］翻译为 Rust。</span></span>
<span class="line"><span>Patterns（样式）：{retrieved transformation patterns}</span></span>
<span class="line"><span>Demonstrations（示例）：{paired C-to-Rust examples}</span></span>
<span class="line"><span>C Source Code（C 源码）：{input source code}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="c-生成后修复-post-generation-repair" tabindex="-1"><a class="header-anchor" href="#c-生成后修复-post-generation-repair"><span>C. 生成后修复（Post-Generation Repair）</span></a></h3><p>最终，<strong>EVOC2RUST</strong> 在编译驱动下对已翻译的 Rust 代码进行<strong>级联式修复</strong>：把<strong>基于 LLM</strong>的修补与<strong>语法规则</strong>相结合。对每段代码片段，它会依据编译器反馈<strong>生成多个修复候选</strong>，只保留那些能够<strong>减少错误计数</strong>的结果，并<strong>迭代</strong>直到无法进一步改进为止。</p><p>虽然<strong>基于规则</strong>的方法擅长处理<strong>琐碎且定义清晰</strong>的错误，而 <strong>LLM</strong> 更善于应对<strong>复杂问题</strong>，但我们观察到：一些<strong>持续存在的低层语法错误</strong>（例如<strong>括号/括弧不匹配</strong>）会严重削弱两种修复技术的效果，尤其会让<strong>确定性的规则修正</strong>束手无策。为此，EVOC2RUST 设计了<strong>三步修复链</strong>：</p><ol><li><p><strong>括号修复（Bracket Repair）</strong><br> 使用 LLM 分析<strong>编译输出</strong>与<strong>报错信息</strong>，以修正不匹配的括号及类似的语法问题。提示词包含：修复<strong>指南</strong>、<strong>错误/正确</strong>示例对、当前错误的 Rust 片段以及<strong>对应的编译错误</strong>。</p><h4 id="提示模板-括号修复" tabindex="-1"><a class="header-anchor" href="#提示模板-括号修复"><span>（提示模板）括号修复</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>请依据下述编译错误信息，修复下面这段 Rust 代码中的编译问题（可能由括号/圆括号不匹配引起）。</span></span>
<span class="line"><span>只修复“括号不匹配”的行，不要修改任何其它代码。</span></span>
<span class="line"><span>Demonstrations（示例对）：{example pairs of incorrect/correct Rust code}</span></span>
<span class="line"><span>Rust Source Code（Rust 源码）：{input source code}</span></span>
<span class="line"><span>Compilation Error Messages（编译错误信息）：{input error messages}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>规则修复（Rule-Based Repair）</strong><br> 我们将常见的<strong>语法层</strong>问题抽象为一组<strong>基于正则</strong>的转换样式（修复规则），例如：<code>derive</code> 宏的调整、去除<strong>冗余的</strong> <code>cast()</code> 操作、以及修复像 <code>s[s.i]</code> 这类数组访问模式（它会同时触发<strong>可变/不可变借用</strong>冲突）等。</p></li><li><p><strong>LLM 细化（LLM Refinement）</strong><br> 最后一步继续借助 LLM 处理遗留的<strong>语义差异</strong>与更<strong>复杂的编译级</strong>问题，例如<strong>类型不一致</strong>、<strong>不符合惯用法的用法</strong>或<strong>结构性不一致</strong>。提示词包含：<strong>细化指南</strong>、<strong>示例修复对</strong>、错误的 Rust 翻译及其<strong>编译信息</strong>。</p><h4 id="提示模板-llm-细化" tabindex="-1"><a class="header-anchor" href="#提示模板-llm-细化"><span>（提示模板）LLM 细化</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>请依据以下编译信息，修复下面这段 Rust 代码中的编译问题：</span></span>
<span class="line"><span>Instruction（细化指南）：{refinement guidelines}</span></span>
<span class="line"><span>Demonstrations（示例对）：{example pairs of incorrect/correct Rust code}</span></span>
<span class="line"><span>Rust Source Code（Rust 源码）：{input source code}</span></span>
<span class="line"><span>Compilation Information（编译信息）：{input compilation information}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_3-实验设置-experimental-setup" tabindex="-1"><a class="header-anchor" href="#_3-实验设置-experimental-setup"><span>3. 实验设置（EXPERIMENTAL SETUP）</span></a></h2><p>我们开展实验以评估 <strong>EVOC2RUST</strong> 的有效性，旨在回答以下研究问题：</p><ul><li><strong>RQ1：</strong> EVOC2RUST 将<strong>完整 C 项目</strong>翻译为<strong>等价且安全</strong>的 Rust 项目有多有效？</li><li><strong>RQ2：</strong> EVOC2RUST 在<strong>模块级</strong>能够达到怎样的转换准确度？</li><li><strong>RQ3：</strong> EVOC2RUST 的关键组成模块对其<strong>整体性能</strong>的贡献程度如何？</li></ul><h3 id="a-比较方法-comparison-methods" tabindex="-1"><a class="header-anchor" href="#a-比较方法-comparison-methods"><span>A. 比较方法（Comparison Methods）</span></a></h3><p>我们将 EVOC2RUST 与三类 C→Rust 翻译方法进行对比：<strong>基于规则</strong>（C2Rust）、<strong>基于 LLM</strong>（Self-Repair 与 Tymcrat）、以及<strong>混合技术</strong>（C2SaferRust）。此外，我们还引入<strong>不带仓库上下文</strong>的<strong>直接 LLM 生成</strong>作为基线。</p><p>具体而言，我们与以下基线进行对比评估：</p><ul><li><strong>C2Rust</strong> [6]：一种<strong>基于规则</strong>的 C→Rust 翻译器，依赖 <strong>AST 分析</strong>与<strong>手工定义</strong>的转换规则完成迁移。</li><li><strong>C2SaferRust</strong> [23]：一种<strong>混合式</strong>方法，在 C2Rust 框架之上融合 <strong>LLM 驱动的后处理</strong>，并采用<strong>测试驱动的优化</strong>来提升生成 Rust 代码的<strong>惯用性</strong>与<strong>安全性</strong>。我们采用原工作默认配置，进行 <strong>5</strong> 轮优化迭代。</li><li><strong>Self-Repair</strong> [24]：一种<strong>多智能体自修复</strong>框架，面向<strong>项目规模</strong>的 C→Rust 翻译；在<strong>文件级</strong>翻译中引入<strong>迭代式编译-测试反馈</strong>以自动修错。我们使用默认设置：每个任务进行 <strong>3</strong> 轮自修复（含编译驱动与测试驱动两类修复）。</li><li><strong>Tymcrat</strong> [25]：一种<strong>项目级</strong>翻译方法，通过<strong>类型迁移</strong>、为每个函数生成<strong>多个候选 Rust 签名</strong>，并结合<strong>编译器反馈</strong>迭代解决类型错误，从而提高翻译质量。我们采用默认配置：<strong>每个函数输出 4 个候选签名</strong>。</li><li><strong>LLM-direct</strong>：一种<strong>零样本提示</strong>的直接 C→Rust 翻译基线。为缓解其在<strong>项目一致性</strong>与<strong>依赖解析</strong>方面的先天不足，我们将该方案<strong>嵌入到我们的项目骨架构建框架</strong>之中实现。</li></ul><p>所有基线均基于其<strong>官方发布代码</strong>实现。为确保公平比较，我们将其原始<strong>主干模型</strong>统一替换为 <strong>DeepSeek-V3</strong> [26]。</p><h3 id="b-评估策略与指标-evaluation-strategy-and-metrics" tabindex="-1"><a class="header-anchor" href="#b-评估策略与指标-evaluation-strategy-and-metrics"><span>B. 评估策略与指标（Evaluation Strategy and Metrics）</span></a></h3><p>我们在<strong>项目级</strong>与<strong>模块级</strong>两种粒度评估 C→Rust 翻译性能。</p><h4 id="项目级评估-project-level-evaluation" tabindex="-1"><a class="header-anchor" href="#项目级评估-project-level-evaluation"><span>项目级评估（Project-level Evaluation）</span></a></h4><p>我们在项目级翻译上与各基线进行对比。为模拟<strong>真实场景</strong>中<strong>缺少标准实现</strong>的情况，我们从基准中<strong>移除所有参考实现</strong>。评测遵循一种<strong>增量式的编译验证策略</strong>：先构建包含<strong>占位 Rust 模块</strong>的<strong>项目骨架</strong>，随后<strong>逐步</strong>以翻译代码替换这些占位模块，并在每次替换后进行编译验证；任一失败的模块会<strong>回退</strong>为原占位实现。</p><p>项目级性能通过三项指标衡量：</p><ul><li><strong>Incremental Compilation Pass Rate（ICompRate）</strong>：当模块被<strong>增量集成</strong>进项目骨架时，<strong>成功通过编译</strong>的模块比例，用以度量语法正确性（定义见 [18]）。</li><li><strong>Line Acceptance Rate（AccRate）</strong> [27]：考虑到<strong>整个项目</strong>的编译难度，我们评估翻译代码与<strong>人工校正版本</strong>的一致性。<strong>Precision</strong> 统计初次翻译中<strong>未被修改</strong>的行，<strong>Recall</strong> 统计这些行在最终<strong>验证解</strong>中的保留情况。</li><li><strong>Code Safe Rate（SafeRate）</strong> [28]：生成 Rust 代码中<strong>内存安全语句</strong>所占的比例。</li></ul><h4 id="模块级评估-module-level-evaluation" tabindex="-1"><a class="header-anchor" href="#模块级评估-module-level-evaluation"><span>模块级评估（Module-level Evaluation）</span></a></h4><p>我们进一步通过一种<strong>填空式验证策略</strong>评估模块级的转换准确度：对测试集中的每个 C 模块（如 <code>Func_C</code>），若存在已知的 Rust 等价实现（如 <code>Func_R</code>），则从 Rust 参考实现中<strong>移除</strong> <code>Func_R</code>，使用翻译方法由 <code>Func_C</code> 生成 <code>Func_R&#39;</code>，将其集成到<strong>部分 Rust 项目</strong>中，并通过<strong>编译与测试用例</strong>验证其正确性。</p><p>模块级的<strong>语法与语义</strong>正确性通过两项指标衡量：</p><ul><li><strong>Fill-in Compilation Pass Rate（FCompRate）</strong>：当把生成模块<strong>替换</strong>至 Rust 参考实现中对应位置时，能够<strong>成功编译</strong>的模块比例。</li><li><strong>Test Pass Rate（TestRate）</strong> [24]：在上述替换条件下，能够<strong>通过全部对应测试用例</strong>的模块比例。</li></ul><h3 id="c-数据集-datasets" tabindex="-1"><a class="header-anchor" href="#c-数据集-datasets"><span>C. 数据集（Datasets）</span></a></h3><p>我们在 <strong>Vivo-Bench</strong> [21] 开源数据集与自建的 <strong>C2R-Bench</strong>（包含 6 个工业级项目）上评估 <strong>EVOC2RUST</strong>。<br><strong>Vivo-Bench</strong> 来自 <em>2025 Vivo C-to-Rust 创新竞赛</em>，包含 19 个算法型 C 项目，覆盖 <strong>200</strong> 个函数、<strong>95</strong> 个定义与 <strong>29</strong> 个“非函数”宏。这些项目由 <strong>1–3</strong> 个文件组成，单文件代码行数（LOC）从 <strong>33</strong> 到 <strong>630</strong> 不等。两位 Rust 开发者在 LLM 的辅助下通过修错与补测，产出经验证的译文，确保<strong>函数级完整覆盖</strong>，共得到 <strong>113</strong> 个顶层测试用例。</p><p>为了评估<strong>工业场景</strong>，我们构建了 <strong>C2R-Bench</strong>：来自华为软件生态的 <strong>6</strong> 个<strong>生产级</strong> C 项目的基准。所选项目均为<strong>单线程</strong>的<strong>用户态应用</strong>，仅依赖<strong>标准 C 库</strong>。这些项目具有<strong>多文件架构</strong>与显著的<strong>跨文件依赖</strong>，源码规模从 <strong>280</strong> 到 <strong>3,724</strong> LOC 不等。三位高级开发者采用<strong>LLM 辅助翻译</strong>产出参考实现，随后通过执行 <strong>222</strong> 个顶层测试用例来验证 Rust 输出。</p><p>Vivo-Bench [21] 与 C2R-Bench 中的每个项目均包含 4 个关键组成：<strong>C 源码、C 测例、Rust 翻译结果</strong>以及<strong>对应的 Rust 测试用例</strong>。详尽统计见表III。</p><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="d-实现细节-implementation-details" tabindex="-1"><a class="header-anchor" href="#d-实现细节-implementation-details"><span>D. 实现细节（Implementation Details）</span></a></h3><p>我们以 <strong>DeepSeek-V3</strong> [26] 作为基础模型实现 <strong>EVOC2RUST</strong>，利用其在多种编程语言（含 C 与 Rust）上的大规模预训练，以加强<strong>跨语言理解</strong>。<br> 用于<strong>代码翻译</strong>时，我们配置模型为<strong>贪心解码</strong>（greedy decoding），并设置 $ \\text{max_tokens} = 4096 $。<br> 用于<strong>代码分析</strong>时，我们采用 <strong>Tree-sitter v0.22.3</strong> [22] 解析 C 项目，并使用 <strong>rustc</strong> [29] 作为 Rust 编译器。<br> 我们使用 <strong>BGE-M3</strong> [30] 生成代码向量表征，通过<strong>余弦相似度</strong>检索<strong>最相近的 Top-10</strong> 个转换样式（patterns）。在<strong>效率</strong>与<strong>效果</strong>之间做权衡，我们将修复迭代上限设为：<strong>括号修复 5 轮</strong>，<strong>LLM 细化 3 轮</strong>。</p><p>为测量<strong>行级接受率</strong>（AccRate），我们为所有评测方法<strong>人工建立并验证</strong>参考实现。遵循严格的验证流程：由 3 位作者分别使用目标方法对每个项目的源码与测试套件完成<strong>完整翻译</strong>；生成的 Rust 代码先进行<strong>编译与测试</strong>，随后在 <strong>Claude Sonnet 4</strong> [31] 的交互式辅助下<strong>手动迭代修正</strong>，直到<strong>全部测试通过</strong>。最后，另外 3 位工程师对这些参考实现进行<strong>代码评审</strong>，以再次确认其<strong>语义正确性</strong>。</p><p>所有实验均在 Linux 服务器上进行：<strong>Ubuntu 23.10</strong>，两块 <strong>NVIDIA GeForce RTX 4090</strong> GPU，<strong>CUDA 12.4</strong>。</p><h2 id="_4-结果与分析-results-and-analysis" tabindex="-1"><a class="header-anchor" href="#_4-结果与分析-results-and-analysis"><span>4. 结果与分析（RESULTS AND ANALYSIS）</span></a></h2><h3 id="a-主要结果-rq1" tabindex="-1"><a class="header-anchor" href="#a-主要结果-rq1"><span>A. 主要结果（RQ1）</span></a></h3><p>EVOC2RUST 的主要实验结果见表IV。它在两个数据集上<strong>全面优于</strong>所有基线方法，在三项综合指标上均取得<strong>最高分</strong>。</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>与<strong>基于规则</strong>与<strong>混合式</strong>基线相比，EVOC2RUST 在<strong>生成安全的 Rust 代码</strong>方面展现出显著优势。尽管 <strong>C2Rust</strong> 与 <strong>C2SaferRust</strong> 在<strong>编译通过率</strong>上接近完美（例如在 Vivo-Bench 上为 100%），它们<strong>容易生成不安全代码</strong>：在两个数据集上的<strong>代码安全率</strong>，C2Rust 仅为 <strong>0%</strong> 与 <strong>1.83%</strong>；C2SaferRust 即便结合了 LLM 的优化，也仅达到 <strong>60%</strong> 与 <strong>48.24%</strong>。这说明：<strong>单纯的语法级翻译</strong>，即使叠加 LLM 的后处理，也<strong>无法稳定满足</strong> Rust 的安全要求。我们的方法通过<strong>由“安全保证”的特征映射增强的 LLM 翻译</strong>，<strong>主动抑制</strong>不安全代码的产生。</p><p>在<strong>基于 LLM</strong>的方法中，EVOC2RUST 在所有评测指标上也保持<strong>稳定领先</strong>。在 <strong>Vivo-Bench</strong> 上，它的<strong>编译成功率</strong>比所有基线<strong>高出 12.65%～64.51%</strong>，<strong>行级接受率</strong>高出 <strong>7.57%～46.30%</strong>，同时仍保持 <strong>98%</strong> 的高<strong>代码安全率</strong>。在更具挑战的 <strong>C2R-Bench</strong> 上，它实现 <strong>93.84%</strong> 的编译成功（<strong>比各基线高 21.82%～44.63%</strong>），且<strong>行级接受率超过 97%</strong>。这些优势源自我们<strong>骨架引导</strong>、<strong>特征映射增强</strong>的翻译路径。</p><p>更具体地，与 <strong>Self-Repair</strong> 相比，EVOC2RUST 在 <strong>C2R-Bench</strong> 上的<strong>编译成功率</strong>提升 <strong>44.63%</strong>，<strong>行级接受率</strong>提升 <strong>54.38%</strong>。Self-Repair 的<strong>文件级处理</strong>经常超过 DeepSeek-V3 的 <strong>4096</strong> token 输出上限，导致<strong>代码截断</strong>与<strong>程序不完整</strong>这一关键限制。与 <strong>Tymcrat</strong> 相比，EVOC2RUST 在更具挑战的 C2R-Bench 上<strong>编译成功率</strong>也高出 <strong>21.82%</strong>。Tymcrat 通过<strong>多样化签名生成</strong>与<strong>上下文增强</strong>降低初始错误，但因为缺少<strong>专家提炼的结构化翻译指导</strong>，在复杂场景中效果受到限制。<strong>LLM-direct</strong> 表现最差：平均<strong>编译成功率</strong>仅 <strong>46.08%</strong>；<strong>行级接受指标</strong>也偏低（<strong>Precision 55.40%</strong>、<strong>Recall 52.33%</strong>），其原因在于 <strong>C↔Rust 语言差异</strong>与<strong>Transformer 上下文窗口</strong>的先天约束。</p><blockquote><p>笔者注：这里的数据有点乱啊，和表格里的很多都对不上，比如55.40%从未在表格里出现</p></blockquote><blockquote><p><strong>RQ1 的回答。</strong> 在将<strong>完整 C 项目</strong>翻译为 Rust 的任务上，EVOC2RUST 在两个数据集上相较所有基线方法<strong>始终占优</strong>，并在<strong>编译成功</strong>、<strong>行级接受</strong>与<strong>代码安全</strong>三项指标的综合得分中居首。</p></blockquote><hr><h3 id="b-模块级翻译-rq2" tabindex="-1"><a class="header-anchor" href="#b-模块级翻译-rq2"><span>B. 模块级翻译（RQ2）</span></a></h3><p>我们进一步针对 EVOC2RUST 的<strong>模块级代码翻译准确度</strong>进行专门评估——这是该方法的<strong>核心技术组件</strong>之一。评估在 <strong>Vivo-Bench</strong> 与 <strong>C2R-Bench</strong> 上进行，并采用两种基础模型：<strong>DeepSeek-V3</strong> 与 <strong>Qwen3-32B</strong> [32]，以覆盖不同的模型规模与架构范式。</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如表V所示，EVOC2RUST 在<strong>模块粒度</strong>上表现突出：<br> 在 <strong>DeepSeek-V3</strong> 下，它在 <strong>Vivo-Bench</strong> 上达到 <strong>100%</strong> <strong>编译通过</strong>与 <strong>99.07%</strong> <strong>测试通过</strong>；在 <strong>C2R-Bench</strong> 上也保持稳健（<strong>92.25%</strong> 编译通过，<strong>89.53%</strong> 测试通过）。即便在参数量小 <strong>20×</strong> 的 <strong>Qwen3-32B</strong> 上，EVOC2RUST 仍取得<strong>可接受</strong>结果（<strong>80.63%</strong> 编译通过，<strong>77.91%</strong> 测试通过），显示出<strong>对模型规模的鲁棒性</strong>。</p><p>值得注意的是，<strong>测试通过率</strong>与<strong>编译成功率</strong>之间呈现<strong>高度一致</strong>：能正确编译的 Rust 模块通常也能通过测试。这一一致性来自我们方法的<strong>双重机制</strong>：<strong>特征映射</strong>抑制语义错误，<strong>编译器引导的修复</strong>维持逻辑正确的纠错过程。</p><p>我们的评估还揭示了影响翻译质量的<strong>两个关键因素</strong>：<strong>项目复杂度</strong>与<strong>函数长度</strong>。复杂项目（控制流与数据依赖精细、宏与依赖繁多）会持续挑战 LLM 的理解能力——这在我们对 C2R-Bench 中 6 个工业项目的分析中得到体现。例如，<strong>cmpt1z</strong> 项目（复杂宏与依赖）在不同模型下的<strong>测试通过率</strong>为 <strong>86.35%</strong> 与 <strong>70.79%</strong>；而更“简单”的 <strong>sha256</strong> 则稳定达到 <strong>100%</strong>。此外，<strong>函数长度</strong>与<strong>翻译成功</strong>显著<strong>负相关</strong>（见图 3）：</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对 <strong>DeepSeek-V3</strong>，随着函数变长，测试通过率从 <strong>97.46%</strong> 降至 <strong>81.13%</strong>；<br> 对 <strong>Qwen3-32B</strong>，下降更加明显——从 <strong>88.68%</strong> 至 <strong>41.96%</strong>。<br> 尽管存在这种随长度下降的趋势，EVOC2RUST 在 <strong>DeepSeek-V3</strong> 下的<strong>平均通过率</strong>仍达 <strong>94.02%</strong>，表明即便面对<strong>长函数</strong>也具备<strong>良好鲁棒性</strong>。</p><blockquote><p><strong>RQ2 的回答。</strong> 我们的方法在<strong>模块级翻译</strong>上表现稳健：在不同模型规模下的<strong>编译成功率</strong>为 <strong>92.25%～100%</strong>、<strong>测试通过率</strong>为 <strong>77.91%～99.07%</strong>，证明其在应对<strong>代码复杂度</strong>与<strong>函数长度</strong>挑战时同样有效。</p></blockquote><h3 id="c-消融实验-rq3" tabindex="-1"><a class="header-anchor" href="#c-消融实验-rq3"><span>C. 消融实验（RQ3）</span></a></h3><p>为评估 <strong>EVOC2RUST</strong> 各组件的贡献并验证我们的设计选择，我们进行<strong>消融实验</strong>：逐步移除方法中的关键组件——<strong>括号修复</strong>、<strong>规则修复</strong>、<strong>LLM 细化</strong>与<strong>特征映射</strong>。我们基于 <strong>DeepSeek-V3</strong> 作为基础模型，在 <strong>C2R-Bench</strong> 数据集上评估各变体。</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如表VI 所示，EVOC2RUST 的每个组件都对整体效果至关重要。其中，<strong>特征映射</strong>机制影响最大：一旦移除，该机制，<strong>ICompRate</strong> 与 <strong>FCompRate</strong> 将分别从 <strong>74.29%</strong> 降至 <strong>56.67%</strong> 与从 <strong>81.06%</strong> 降至 <strong>33%</strong>；对<strong>语义正确性</strong>的影响同样显著，<strong>TestRate</strong> 从 <strong>79.91%</strong> 降至 <strong>30.27%</strong>。这强调了特征映射在<strong>桥接 C 与 Rust 结构差异</strong>方面的重要性：通过<strong>预定义转换样式</strong>将 C 的惯用法映射到<strong>安全的</strong> Rust 等价实现，尤其在缺少一一对应构造时更为关键。</p><p><strong>级联修复链</strong>也显著促进了 C→Rust 的翻译质量。若同时移除三种修复（<code>-w/o repair#1-3</code>），性能将明显下降：<strong>ICompRate</strong> 降低 <strong>19.55%</strong>、<strong>FCompRate</strong> 降低 <strong>11.19%</strong>、<strong>TestRate</strong> 降低 <strong>9.62%</strong>。在这条链路中，<strong>规则修复（repair#2）<strong>贡献最大：平均提升</strong>编译通过率</strong> <strong>9.68%</strong>、<strong>测试通过率</strong> <strong>4.45%</strong>。<strong>LLM 细化（repair#3）<strong>在此基础上进一步带来 <strong>4.27%</strong> 的</strong>语法</strong>收益与 <strong>8.98%</strong> 的<strong>语义</strong>收益，且不会牺牲代码安全。</p><p>值得注意的是，在大多数消融变体中，<strong>代码安全</strong>基本稳定在 <strong>≈97%</strong>，这归功于特征映射机制：它将<strong>低层操作</strong>封装进<strong>经验证的安全构造</strong>中，从而保证<strong>不安全代码</strong>比例稳定（安全分仅有 <strong>≤1%</strong> 的轻微波动）。然而，<strong>无引导的直接生成</strong>（同时<strong>缺失映射与修复</strong>）会使安全性<strong>骤降</strong>到 <strong>82.43%</strong>，从反面证明了我们机制的必要性。</p><blockquote><p><strong>RQ3 的回答。</strong> EVOC2RUST 的每个组件都对总体性能<strong>有显著贡献</strong>。其中，<strong>特征映射</strong>为弥合 C↔Rust <strong>语义鸿沟</strong>提供了<strong>安全且可靠</strong>的底座；而<strong>级联修复链</strong>进一步<strong>清除残余错误</strong>，最大化<strong>语法与语义正确性</strong>。</p></blockquote><hr><h3 id="d-案例研究-case-study" tabindex="-1"><a class="header-anchor" href="#d-案例研究-case-study"><span>D. 案例研究（Case Study）</span></a></h3><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们选取红黑树的核心函数 <code>rb_tree_rotate</code> 作为案例（见图4），展示 <strong>EVOC2RUST</strong> 的有效性。该函数涉及的<strong>复杂指针操作</strong>代表了<strong>低层 C 代码</strong>中<strong>最难以</strong>安全、正确翻译的一类场景，也揭示了其他方法常见的失效模式。</p><p>如图 4 所示，基线方法在此场景中表现不佳：<br><strong>LLM-direct</strong> 因<strong>项目级接口不匹配</strong>而失败——在需要<strong>可变引用</strong>（<code>&amp;mut</code>）的地方传入了<strong>裸指针</strong>（<code>*mut</code>）。这暴露出其<strong>缺乏项目级上下文感知</strong>；且依赖裸指针会不可避免地引入 <code>unsafe</code> 块，从根本上<strong>削弱内存安全</strong>目标。<strong>Self-Repair</strong> 虽尝试以 <code>Box&lt;T&gt;</code> 进行更符合 Rust 惯用法且更安全的翻译，但在函数层面引入了<strong>所有权错误</strong>（例如 <em>use of moved value</em>），说明在<strong>缺乏系统化框架</strong>的情况下，手工将 <strong>C 风格内存管理</strong>重构为<strong>安全的 Rust 惯用法</strong>非常困难。</p><p>相较之下，<strong>EVOC2RUST</strong> 生成了<strong>正确且稳健</strong>的译文。其成功源于我们的<strong>特征映射</strong>：使用统一的 <strong><code>Ptr&lt;T&gt;</code> 智能指针</strong>在<strong>项目范围内</strong>保持<strong>C 式指针语义</strong>与<strong>类型一致性</strong>；再结合<strong>灵活的</strong><code>.cast()</code> <strong>类型转换</strong>方法，同时解决了<strong>接口不匹配</strong>与<strong>所有权</strong>两类导致其他方法失败的问题。通过将<strong>低层 C 操作</strong>系统化地映射到<strong>安全的抽象层</strong>，EVOC2RUST 在其他方法难以奏效的地方，依然能够产出<strong>正确且完全安全</strong>的翻译。</p><blockquote><p>笔者注：体现了引入对等抽象层的重要性（<code>Ptr&lt;T&gt;</code>对应c语言的指针，<code>.cast()</code>对应c语言的任意类型转换）</p></blockquote><h2 id="_5-讨论-discussion" tabindex="-1"><a class="header-anchor" href="#_5-讨论-discussion"><span>5. 讨论（DISCUSSION）</span></a></h2><h3 id="a-为什么-evoc2rust-有效" tabindex="-1"><a class="header-anchor" href="#a-为什么-evoc2rust-有效"><span>A. 为什么 <strong>EvoC2RUST</strong> 有效？</span></a></h3><p><strong>EvoC2RUST</strong> 将 LLM 的能力、多智能体协作、知识增强技术、静态程序分析与基于规则的转换<strong>综合进一个统一框架</strong>，用于自动化的项目级 C→Rust 翻译。其有效性主要来源于以下三点：</p><ol><li><p><strong>骨架引导的翻译（Skeleton-guided Translation）。</strong><br><strong>EvoC2RUST</strong> 利用程序分析将大型 C 项目<strong>分解为可复用的模块组件</strong>，为模块装配生成一个<strong>可编译的 Rust 骨架</strong>，并通过<strong>将已转换的 Rust 代码插入骨架结构</strong>来执行<strong>增量式的函数级翻译</strong>。这种骨架引导策略使得翻译、编译与修复都与原始项目结构保持一致，并且<strong>在 LLM 的上下文窗口限制内</strong>完成，同时允许<strong>并行的模块翻译</strong>而不被<strong>跨模块依赖</strong>牵制。</p></li><li><p><strong>特征映射（Feature Mapping）。</strong><br><strong>EvoC2RUST</strong> 通过带有<strong>安全保证</strong>的特征映射，引导 LLM 弥合 C→Rust 的<strong>语义鸿沟</strong>，覆盖 <strong>types、macros、functions、operators、syntax structures、globals、variadic arguments</strong> 等要素。按需<strong>动态检索</strong>的映射使 LLM 能对齐到<strong>精确的一一对应</strong>，从而<strong>有效抑制幻觉</strong>。</p></li><li><p><strong>级联的生成后修复（Cascading Post-Generation Repairs）。</strong><br> 在 LLM 完成初译之后，<strong>EvoC2RUST</strong> 采用<strong>以编译为驱动</strong>的级联修复机制：（1）在<strong>编译检查</strong>的保障下<strong>迭代细化</strong> Rust 代码；（2）将 <strong>LLM 的语义理解</strong> 与 <strong>基于规则的语法修正</strong> 协同起来；（3）提供<strong>可扩展的体系结构</strong>，以便在未来<strong>集成新的修复技术</strong>。</p></li></ol><hr><h3 id="b-局限性与效度威胁-limitations-and-threats-to-validity" tabindex="-1"><a class="header-anchor" href="#b-局限性与效度威胁-limitations-and-threats-to-validity"><span>B. 局限性与效度威胁（Limitations and Threats to Validity）</span></a></h3><p>我们识别出以下对本方法效度的限制与潜在威胁：</p><p><strong>内部效度（Internal Validity）。</strong><br> 主要威胁来自<strong>正确性验证</strong>目前依赖预定义的测试用例。若采用更健壮的验证技术，如 <strong>fuzzing</strong> [33] 与 <strong>self-debugging</strong> [34][35]，可提升测试覆盖率并发现<strong>细微的语义错误</strong>。在<strong>行级接受率</strong>的度量上，我们使用由 <strong>Claude</strong> 生成、并经<strong>人工专家复核</strong>的结果作为<strong>真实标注</strong>。此类人工验证确保了超越自动化测试的正确性，但<strong>在更大规模数据集上可能难以扩展</strong>。未来工作应探索<strong>半自动化验证</strong>，在<strong>准确性</strong>与<strong>效率</strong>间取得平衡。</p><p><strong>外部效度（External Validity）。</strong><br> 外部效度主要受两方面威胁：</p><ol><li><strong>可泛化性（Generalizability）。</strong> 虽然我们的翻译流水线被设计为可支持<strong>多语言对</strong>，但当前实现<strong>专注于 C→Rust</strong>，以便推动<strong>项目级迁移研究</strong>。受资源限制，当前评测仅涉及 <strong>DeepSeek-V3</strong> 与 <strong>Qwen3-32B</strong> 两个基础模型。这一选择并不影响对<strong>框架本身</strong>的评估有效性——本文的重点在于<strong>方法架构</strong>而非<strong>模型对比</strong>。我们明确指出，<strong>引入更多模型</strong>进行扩展评测是重要的后续方向。</li><li><strong>数据集特性（Dataset characteristics）。</strong> 我们的评估使用了<strong>开源 Vivo-Bench</strong> 与<strong>工业级 C2R-Bench</strong>；然而，这两类数据集目前<strong>限定为单线程、用户态 C 项目</strong>，并依赖 <strong>ISO C 标准库</strong>。未来工作应进一步覆盖更复杂的场景，例如<strong>多线程</strong>、<strong>第三方库</strong>以及<strong>内核态代码</strong>。</li></ol><h2 id="_6-相关工作-related-work" tabindex="-1"><a class="header-anchor" href="#_6-相关工作-related-work"><span>6. 相关工作（RELATED WORK）</span></a></h2><h3 id="a-c→rust-翻译" tabindex="-1"><a class="header-anchor" href="#a-c→rust-翻译"><span>A. C→Rust 翻译</span></a></h3><p>现有的自动 C→Rust 翻译方法大致分为三类：<strong>基于规则</strong>、<strong>基于 LLM</strong> 与<strong>混合式</strong>技术。</p><p><strong>基于规则的翻译。</strong><br> 此类方法通过分析程序语法并<strong>手工设计</strong>转换规则来完成程序变换，常见如基于 AST 的转换。开源转译器 <strong>C2Rust</strong> [6] 即是代表：借助 Clang 的 AST 生成<strong>语义等价</strong>的 Rust 代码。然而，它往往产生<strong>非惯用</strong>的 Rust 代码，并且在几乎所有函数签名上都需要 <code>unsafe</code>。鉴于这些局限，后续研究提出了有针对性的改进：Emre 等 [20][36] 将 <strong>rustc</strong> 的编译反馈引入以提升<strong>指针安全</strong>；Zhang 等 [7] 对指针操作进行<strong>静态所有权分析</strong>；Ling 等 [28] 以<strong>模式匹配</strong>做<strong>源码到源码</strong>的 API 安全转换；Hong 等 [8][37]–[39] 则通过自定义分析处理一系列特定构造，如<strong>锁 API</strong>、<strong>输出参数</strong>、<strong>联合体</strong>与 <strong>I/O API</strong>。此外，Han 等 [40] 用 <strong>C 风格语法糖</strong>在 Rust 中模拟控制流差异；Fromherz 等 [41] 给出将 C 的一个<strong>子集</strong>形式化翻译到<strong>安全的</strong> Rust。然则，这些方法通常需要专家投入大量时间<strong>手工编写规则</strong>；而最终生成的目标程序常常在<strong>可读性</strong>与<strong>安全性</strong>上仍显不足。</p><p><strong>基于 LLM 的翻译。</strong><br> 近年，大语言模型因<strong>无需手工规则</strong>即可生成<strong>更合乎惯用法</strong>的代码，而在代码翻译上展现潜力。Eniser 等 [10] 提出 <strong>FLOURINE</strong>，利用 <strong>fuzz 测试</strong>在无需现有测试用例的情况下验证译后 Rust 与原始 C 代码的<strong>语义等价</strong>；Yang 等 [11] 使用 <strong>MSWasm</strong> 的测试框架，将其适配到<strong>多语言（含 C）→Rust</strong> 的翻译；Nitin 等 [12] 将<strong>静态规格</strong>、<strong>I/O 测试</strong>与<strong>自然语言描述</strong>结合以增强 LLM 翻译；Farrukh 等 [42] 构建了一个<strong>多智能体框架</strong>，进行<strong>迭代式纠错</strong>。不过，相较基于规则的方法，当前基于 LLM 的方法在<strong>翻译准确率</strong>上仍偏低，主要原因在于缺乏<strong>大规模 C↔Rust 平行语料</strong>，难以弥合两种语言的<strong>根本语义差异</strong> [13]。</p><p><strong>混合式技术。</strong><br> 近期研究显示，将<strong>基于规则</strong>与<strong>基于 LLM</strong>的方法结合，能在 C→Rust 翻译中发挥互补优势。例如 <strong>C2SaferRust</strong> [23] 采用 <strong>LLM 后处理</strong>对 C2Rust 的输出进行<strong>迭代细化</strong>，在<strong>自动化验证测试</strong>的帮助下同时提升<strong>安全性保证</strong>与<strong>代码惯用性</strong>，并保持<strong>功能等价</strong>。在此基础上，<strong>EvoC2RUST</strong> 提出一种<strong>新的混合框架</strong>：在<strong>两阶段</strong>中协同整合<strong>基于规则</strong>与<strong>基于 LLM</strong>的方法。翻译阶段用<strong>语言特征映射（即转换规则）<strong>引导 LLM 解决 C→Rust 的</strong>语义差异</strong>；修复阶段采用<strong>以编译为驱动</strong>的<strong>级联修复</strong>机制，将 LLM 的<strong>语义理解</strong>与<strong>基于规则的语法修正</strong>结合，优化生成 Rust 代码的整体质量。我们的方法在<strong>翻译准确性</strong>与<strong>安全保证</strong>之间取得了<strong>务实的平衡</strong>，以支持自动化的 C→Rust 迁移。</p><h3 id="b-以-llm-实现的项目级代码翻译" tabindex="-1"><a class="header-anchor" href="#b-以-llm-实现的项目级代码翻译"><span>B. 以 LLM 实现的项目级代码翻译</span></a></h3><p>尽管多数现有方法聚焦于<strong>小规模</strong>的 C 代码翻译，近来的工作开始探索<strong>项目级</strong> LLM 翻译。其做法通常是：先通过程序分析将 C 项目分解为<strong>基于依赖</strong>的翻译单元，再进行翻译并<strong>重新装配</strong>为可运行的 Rust 项目。</p><p>Shiraishi 等 [18] 率先开展了项目级翻译，利用<strong>项目元数据</strong>维持跨单元的一致性；但其主要关注<strong>编译成功</strong>，并未确保<strong>功能等价</strong>。<strong>Syzygy</strong> [19] 与 <strong>RustMap</strong> [43] 同时翻译 C 函数及其关联测试，并利用<strong>编译/测试反馈</strong>修复生成的 Rust 代码；但它们需要关于目标函数的<strong>完整依赖上下文</strong>，这并非总能自动抽取，有时还需要<strong>人工补充</strong>（例如 RustMap 的 “ASK Me” 机制）。此外，其<strong>测试与分析框架</strong>在工业场景下面对<strong>复杂特性与数据结构</strong>（如<strong>复杂对象结构</strong>与<strong>循环引用</strong>）时，<strong>可扩展性受限</strong>。</p><p>Khatry 等 [24] 与 Ou 等 [13] 构建了<strong>仓库级</strong>的 C/C++→Rust 评测基准，并配套了诸如 <strong>Self-Repair</strong> 等技术。然而，它们的方法依赖<strong>带标注的 Rust 函数接口</strong>，而这在工业场景中<strong>很少可用</strong>。为缓解该限制，Hong 等 [25] 提出 <strong>Tymcrat</strong>，一种基于<strong>类型推断</strong>的<strong>自动函数签名翻译</strong>方法。</p><p>不同于按依赖顺序<strong>串行</strong>翻译模块、且需要完整项目上下文的做法，<strong>EvoC2RUST</strong> 引入了<strong>骨架引导</strong>策略：首先构建一个<strong>可编译的 Rust 骨架</strong>，然后执行<strong>增量的函数级翻译</strong>。该策略不仅支持<strong>并行翻译</strong>，还通过<strong>将 LLM 与跨模块依赖解耦</strong>来降低翻译复杂度，从而<strong>提升翻译正确性</strong>。</p><h2 id="_7-结论-conclusion" tabindex="-1"><a class="header-anchor" href="#_7-结论-conclusion"><span>7. 结论（CONCLUSION）</span></a></h2><p>我们提出 <strong>EvoC2RUST</strong>，一个由 LLM 驱动的<strong>整项目</strong> C→Rust 自动翻译新框架。EvoC2RUST 采用<strong>特征映射增强</strong>的 LLM 实施<strong>骨架引导</strong>的代码翻译，并在此基础上结合 <strong>LLM 能力</strong>与<strong>静态分析</strong>进行<strong>混合式错误修复</strong>。在开源与工业两类基准上，EvoC2RUST 在<strong>语法准确性</strong>、<strong>语义等价性</strong>与<strong>内存安全性</strong>方面均表现出<strong>持续领先</strong>的性能。</p><p>尽管近年已有进展，C→Rust 翻译仍是一个<strong>开放挑战</strong>，尤其在涉及<strong>多线程</strong>、<strong>第三方库</strong>以及<strong>内核态代码</strong>等跨领域复杂场景时更为困难。为推动该领域发展，我们提出两条关键的研究方向：<br> (1) <strong>开发新的细化技术</strong>，充分利用持续演进的 LLM 能力（例如 <strong>fuzzing</strong> [33] 与<strong>自调试</strong> [34][35] 等）；<br> (2) <strong>探索将语言模型作为自主智能体</strong> [44] 的路径，使其具备<strong>多步推理</strong>与<strong>反思</strong>能力，以更好地处理复杂的翻译任务。<br> 这些方向为后续研究提供了<strong>有前景的路线</strong>。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2><h3 id="translating-c-to-safer-rust" tabindex="-1"><a class="header-anchor" href="#translating-c-to-safer-rust"><span>Translating C to safer Rust</span></a></h3><blockquote><p>PACMPL – OOPSLA 2021（OOPSLA 专刊）、CCF A</p></blockquote><h3 id="aliasing-limits-on-translating-c-to-safe-rust" tabindex="-1"><a class="header-anchor" href="#aliasing-limits-on-translating-c-to-safe-rust"><span>Aliasing Limits on Translating C to Safe Rust</span></a></h3><blockquote><p>PACMPL – OOPSLA 2023（OOPSLA 专刊）、CCF A</p></blockquote><h3 id="forcrat-automatic-i-o-api-translation-from-c-to-rust-via-origin-and-capability-analysis" tabindex="-1"><a class="header-anchor" href="#forcrat-automatic-i-o-api-translation-from-c-to-rust-via-origin-and-capability-analysis"><span>Forcrat: Automatic I/O API Translation from C to Rust via Origin and Capability Analysis</span></a></h3><blockquote><p><a href="https://arxiv.org/abs/2506.01427" target="_blank" rel="noopener noreferrer">arXiv预印本</a></p></blockquote><h3 id="to-tag-or-not-to-tag-translating-c-s-unions-to-rust-s-tagged-unions" tabindex="-1"><a class="header-anchor" href="#to-tag-or-not-to-tag-translating-c-s-unions-to-rust-s-tagged-unions"><span>To Tag, or Not to Tag: Translating C&#39;s Unions to Rust&#39;s Tagged Unions</span></a></h3><blockquote><p>ASE 2024（IEEE/ACM International Conference on Automated Software Engineering）、CCF A</p></blockquote>',142)]))}const L=s(m,[["render",R],["__file","EVOC2RUST：用于项目级C到Rust转换的骨架引导框架.html.vue"]]),v=JSON.parse(`{"path":"/posts/scholar/EVOC2RUST%EF%BC%9A%E7%94%A8%E4%BA%8E%E9%A1%B9%E7%9B%AE%E7%BA%A7C%E5%88%B0Rust%E8%BD%AC%E6%8D%A2%E7%9A%84%E9%AA%A8%E6%9E%B6%E5%BC%95%E5%AF%BC%E6%A1%86%E6%9E%B6.html","title":"EVOC2RUST: A Skeleton-guided Framework for Project-Level C-to-Rust Translation","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-10-21T00:00:00.000Z","category":["Rust"],"tag":["c2rust"],"description":"EVOC2RUST: A Skeleton-guided Framework for Project-Level C-to-Rust Translation 论文来自 arXiv预印本 摘要 Rust 在编译期提供的安全性保证，使其非常适合用于安全关键系统，因此对将遗留的 C 代码库迁移到 Rust 的需求不断增长。尽管已有多种方法被提出来完成这一任务...","head":[["meta",{"property":"og:url","content":"https://iXanadu13.github.io/posts/scholar/EVOC2RUST%EF%BC%9A%E7%94%A8%E4%BA%8E%E9%A1%B9%E7%9B%AE%E7%BA%A7C%E5%88%B0Rust%E8%BD%AC%E6%8D%A2%E7%9A%84%E9%AA%A8%E6%9E%B6%E5%BC%95%E5%AF%BC%E6%A1%86%E6%9E%B6.html"}],["meta",{"property":"og:site_name","content":"Xanadu13's Blog"}],["meta",{"property":"og:title","content":"EVOC2RUST: A Skeleton-guided Framework for Project-Level C-to-Rust Translation"}],["meta",{"property":"og:description","content":"EVOC2RUST: A Skeleton-guided Framework for Project-Level C-to-Rust Translation 论文来自 arXiv预印本 摘要 Rust 在编译期提供的安全性保证，使其非常适合用于安全关键系统，因此对将遗留的 C 代码库迁移到 Rust 的需求不断增长。尽管已有多种方法被提出来完成这一任务..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://iXanadu13.github.io/assets/images/scholar/EVOC2RUST/figure1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-21T15:21:05.000Z"}],["meta",{"property":"article:tag","content":"c2rust"}],["meta",{"property":"article:published_time","content":"2025-10-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-21T15:21:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"EVOC2RUST: A Skeleton-guided Framework for Project-Level C-to-Rust Translation\\",\\"image\\":[\\"https://iXanadu13.github.io/assets/images/scholar/EVOC2RUST/figure1.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/EVOC2RUST/figure2.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/EVOC2RUST/table1.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/EVOC2RUST/table2.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/EVOC2RUST/table3.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/EVOC2RUST/table4.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/EVOC2RUST/table5.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/EVOC2RUST/figure3.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/EVOC2RUST/table6.png\\",\\"https://iXanadu13.github.io/assets/images/scholar/EVOC2RUST/figure4.png\\"],\\"datePublished\\":\\"2025-10-21T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-21T15:21:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Xanadu13\\",\\"url\\":\\"https://github.com/iXanadu13\\"}]}"]]},"headers":[{"level":2,"title":"摘要","slug":"摘要","link":"#摘要","children":[]},{"level":2,"title":"索引词","slug":"索引词","link":"#索引词","children":[]},{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[{"level":3,"title":"挑战一：为保证安全而产生的显著“语言鸿沟”","slug":"挑战一-为保证安全而产生的显著-语言鸿沟","link":"#挑战一-为保证安全而产生的显著-语言鸿沟","children":[]},{"level":3,"title":"挑战二：项目级的代码依赖与结构一致性","slug":"挑战二-项目级的代码依赖与结构一致性","link":"#挑战二-项目级的代码依赖与结构一致性","children":[]}]},{"level":2,"title":"2. 方法（APPROACH）","slug":"_2-方法-approach","link":"#_2-方法-approach","children":[{"level":3,"title":"A. 项目骨架构建（Project Skeleton Construction）","slug":"a-项目骨架构建-project-skeleton-construction","link":"#a-项目骨架构建-project-skeleton-construction","children":[]},{"level":3,"title":"B. 基于安全保持映射的模块翻译（Module Translation with Safety-preserving Mapping）","slug":"b-基于安全保持映射的模块翻译-module-translation-with-safety-preserving-mapping","link":"#b-基于安全保持映射的模块翻译-module-translation-with-safety-preserving-mapping","children":[]},{"level":3,"title":"C. 生成后修复（Post-Generation Repair）","slug":"c-生成后修复-post-generation-repair","link":"#c-生成后修复-post-generation-repair","children":[]}]},{"level":2,"title":"3. 实验设置（EXPERIMENTAL SETUP）","slug":"_3-实验设置-experimental-setup","link":"#_3-实验设置-experimental-setup","children":[{"level":3,"title":"A. 比较方法（Comparison Methods）","slug":"a-比较方法-comparison-methods","link":"#a-比较方法-comparison-methods","children":[]},{"level":3,"title":"B. 评估策略与指标（Evaluation Strategy and Metrics）","slug":"b-评估策略与指标-evaluation-strategy-and-metrics","link":"#b-评估策略与指标-evaluation-strategy-and-metrics","children":[]},{"level":3,"title":"C. 数据集（Datasets）","slug":"c-数据集-datasets","link":"#c-数据集-datasets","children":[]},{"level":3,"title":"D. 实现细节（Implementation Details）","slug":"d-实现细节-implementation-details","link":"#d-实现细节-implementation-details","children":[]}]},{"level":2,"title":"4. 结果与分析（RESULTS AND ANALYSIS）","slug":"_4-结果与分析-results-and-analysis","link":"#_4-结果与分析-results-and-analysis","children":[{"level":3,"title":"A. 主要结果（RQ1）","slug":"a-主要结果-rq1","link":"#a-主要结果-rq1","children":[]},{"level":3,"title":"B. 模块级翻译（RQ2）","slug":"b-模块级翻译-rq2","link":"#b-模块级翻译-rq2","children":[]},{"level":3,"title":"C. 消融实验（RQ3）","slug":"c-消融实验-rq3","link":"#c-消融实验-rq3","children":[]},{"level":3,"title":"D. 案例研究（Case Study）","slug":"d-案例研究-case-study","link":"#d-案例研究-case-study","children":[]}]},{"level":2,"title":"5. 讨论（DISCUSSION）","slug":"_5-讨论-discussion","link":"#_5-讨论-discussion","children":[{"level":3,"title":"A. 为什么 EvoC2RUST 有效？","slug":"a-为什么-evoc2rust-有效","link":"#a-为什么-evoc2rust-有效","children":[]},{"level":3,"title":"B. 局限性与效度威胁（Limitations and Threats to Validity）","slug":"b-局限性与效度威胁-limitations-and-threats-to-validity","link":"#b-局限性与效度威胁-limitations-and-threats-to-validity","children":[]}]},{"level":2,"title":"6. 相关工作（RELATED WORK）","slug":"_6-相关工作-related-work","link":"#_6-相关工作-related-work","children":[{"level":3,"title":"A. C→Rust 翻译","slug":"a-c→rust-翻译","link":"#a-c→rust-翻译","children":[]},{"level":3,"title":"B. 以 LLM 实现的项目级代码翻译","slug":"b-以-llm-实现的项目级代码翻译","link":"#b-以-llm-实现的项目级代码翻译","children":[]}]},{"level":2,"title":"7. 结论（CONCLUSION）","slug":"_7-结论-conclusion","link":"#_7-结论-conclusion","children":[]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[{"level":3,"title":"Translating C to safer Rust","slug":"translating-c-to-safer-rust","link":"#translating-c-to-safer-rust","children":[]},{"level":3,"title":"Aliasing Limits on Translating C to Safe Rust","slug":"aliasing-limits-on-translating-c-to-safe-rust","link":"#aliasing-limits-on-translating-c-to-safe-rust","children":[]},{"level":3,"title":"Forcrat: Automatic I/O API Translation from C to Rust via Origin and Capability Analysis","slug":"forcrat-automatic-i-o-api-translation-from-c-to-rust-via-origin-and-capability-analysis","link":"#forcrat-automatic-i-o-api-translation-from-c-to-rust-via-origin-and-capability-analysis","children":[]},{"level":3,"title":"To Tag, or Not to Tag: Translating C's Unions to Rust's Tagged Unions","slug":"to-tag-or-not-to-tag-translating-c-s-unions-to-rust-s-tagged-unions","link":"#to-tag-or-not-to-tag-translating-c-s-unions-to-rust-s-tagged-unions","children":[]}]}],"git":{"createdTime":1761060065000,"updatedTime":1761060065000,"contributors":[{"name":"Xanadu13","email":"xanadu13@qq.com","commits":1}]},"readingTime":{"minutes":36.39,"words":10917},"filePathRelative":"posts/scholar/EVOC2RUST：用于项目级C到Rust转换的骨架引导框架.md","localizedDate":"2025年10月21日","excerpt":"\\n<p>论文来自 <a href=\\"https://arxiv.org/abs/2508.04295\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">arXiv预印本</a></p>\\n<h2>摘要</h2>\\n<p>Rust 在编译期提供的安全性保证，使其非常适合用于安全关键系统，因此对将遗留的 C 代码库迁移到 Rust 的需求不断增长。尽管已有多种方法被提出来完成这一任务，但它们都存在固有权衡：基于规则（rule-based）的方法在满足代码安全性与 Rust 习惯用法方面面临挑战；而基于大语言模型（LLM）的方法由于整个代码库中模块之间存在大量依赖，常常无法生成<strong>语义等价</strong>的 Rust 代码。近期研究表明，这两类方案都主要局限于<strong>小规模程序</strong>。</p>","autoDesc":true}`);export{L as comp,v as data};
