import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as l}from"./app-BEddMf0O.js";const t={};function n(h,i){return l(),a("div",null,i[0]||(i[0]=[e(`<h1 id="java中的日志库" tabindex="-1"><a class="header-anchor" href="#java中的日志库"><span>Java中的日志库</span></a></h1><h2 id="主要日志系统" tabindex="-1"><a class="header-anchor" href="#主要日志系统"><span>主要日志系统</span></a></h2><h3 id="jul" tabindex="-1"><a class="header-anchor" href="#jul"><span>JUL</span></a></h3><p>Java标准库<code>java.util.logging</code>，但不常用。</p><h3 id="log4j" tabindex="-1"><a class="header-anchor" href="#log4j"><span>Log4j</span></a></h3><p>Log4j 的短板在于性能，在Logback 和 Log4j2 出来之后，Log4j的使用也减少了。</p><h3 id="logback" tabindex="-1"><a class="header-anchor" href="#logback"><span>Logback</span></a></h3><p>同样由Log4j的作者开发，提供了性能更好的实现，异步 logger，Filter等更多的特性。</p><h3 id="log4j2" tabindex="-1"><a class="header-anchor" href="#log4j2"><span>Log4j2</span></a></h3><p>由Log4j维护者开发，诞生晚于logback，因此吸收了slf4j和logback的一些优点（比如日志模板），性能也比较好。在设计上分离Facade和Implementation，即<code>log4j-api</code>和 <code>log4j-core</code>。</p><p>log4j2实现了“无垃圾”和“低垃圾”模式。简单地说，log4j2在记录日志时，能够重用对象（如String等），尽可能避免实例化新的临时对象，减少因日志记录产生的垃圾对象，减少垃圾回收带来的性能下降</p><h2 id="日志facade-抽象框架" tabindex="-1"><a class="header-anchor" href="#日志facade-抽象框架"><span>日志Facade（抽象框架）</span></a></h2><h3 id="common-logging" tabindex="-1"><a class="header-anchor" href="#common-logging"><span>common-logging</span></a></h3><p>common-logging 是 apache 的一个开源项目。也称Jakarta Commons Logging，缩写 JCL，支持多种具体日志实现（如 Log4j、JUL）。 但它在编译时会进行静态绑定，将代码和日志实现绑定在一起。如果需要切换日志框架，就必须重新引入特定的 JAR 包，这样的机制显得麻烦且不够灵活。</p><h3 id="slf4j" tabindex="-1"><a class="header-anchor" href="#slf4j"><span>slf4j</span></a></h3><p>全称为 Simple Logging Facade for Java，采用运行时动态绑定，开发者只需依赖 SLF4J 接口，具体的日志实现可以通过运行时选择（如 Logback、Log4j 等），无需修改代码或重新编译，极大提高了灵活性。</p><p>同样由Log4j、logback的作者Ceki Gulcu开发。</p><p>在 Common-Logging 或其他传统日志框架中，为了避免无意义的字符串拼接开销，通常需要手动检查日志级别是否启用，例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isDebugEnabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;id: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;, name: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而slf4j提供了更便捷的方式：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;id: {}, name: {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, id, name);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>无需手动检查日志级别，SLF4J 会在底层自动优化，避免不必要的字符串拼接。且代码更简洁，提升开发效率。</p><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><p>以下写法中存在问题，即使日志级别高于debug，不需输出日志，也会执行字符串拼接、调用toJson方法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 即使不输出，也会执行字符串拼接</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;start process request, url: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> url);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 即使不输出，也会调用toJson方法</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;receive request: {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toJson</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正确写法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 没有多余计算开销</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;start process request, url: {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, url);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // slf4j/log4j2</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 采用懒求值</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;receive request: {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, () </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> toJson</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request));</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // log4j2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;receive request: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> toJson</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request));</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // log4j2</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 回归原始，做额外判断</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isDebugEnabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// slf4j/log4j2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;receive request: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> toJson</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request));</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，不应在程序中滥用获取当前caller、行号、函数名等等属性，因为基本上这些实现都基于堆栈信息stacktrace，而获取堆栈信息的代价是昂贵的。</p>`,28)]))}const g=s(t,[["render",n],["__file","log-in-java.html.vue"]]),r=JSON.parse(`{"path":"/posts/java/log-in-java.html","title":"Java中的日志库","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-01-26T00:00:00.000Z","category":["Java"],"tag":["Log"],"description":"Java中的日志库 主要日志系统 JUL Java标准库java.util.logging，但不常用。 Log4j Log4j 的短板在于性能，在Logback 和 Log4j2 出来之后，Log4j的使用也减少了。 Logback 同样由Log4j的作者开发，提供了性能更好的实现，异步 logger，Filter等更多的特性。 Log4j2 由Log...","head":[["meta",{"property":"og:url","content":"https://iXanadu13.github.io/posts/java/log-in-java.html"}],["meta",{"property":"og:site_name","content":"Xanadu13's Blog"}],["meta",{"property":"og:title","content":"Java中的日志库"}],["meta",{"property":"og:description","content":"Java中的日志库 主要日志系统 JUL Java标准库java.util.logging，但不常用。 Log4j Log4j 的短板在于性能，在Logback 和 Log4j2 出来之后，Log4j的使用也减少了。 Logback 同样由Log4j的作者开发，提供了性能更好的实现，异步 logger，Filter等更多的特性。 Log4j2 由Log..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-26T11:41:48.000Z"}],["meta",{"property":"article:tag","content":"Log"}],["meta",{"property":"article:published_time","content":"2025-01-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-26T11:41:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中的日志库\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-26T11:41:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Xanadu13\\",\\"url\\":\\"https://github.com/iXanadu13\\"}]}"]]},"headers":[{"level":2,"title":"主要日志系统","slug":"主要日志系统","link":"#主要日志系统","children":[{"level":3,"title":"JUL","slug":"jul","link":"#jul","children":[]},{"level":3,"title":"Log4j","slug":"log4j","link":"#log4j","children":[]},{"level":3,"title":"Logback","slug":"logback","link":"#logback","children":[]},{"level":3,"title":"Log4j2","slug":"log4j2","link":"#log4j2","children":[]}]},{"level":2,"title":"日志Facade（抽象框架）","slug":"日志facade-抽象框架","link":"#日志facade-抽象框架","children":[{"level":3,"title":"common-logging","slug":"common-logging","link":"#common-logging","children":[]},{"level":3,"title":"slf4j","slug":"slf4j","link":"#slf4j","children":[]}]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}],"git":{"createdTime":1737891708000,"updatedTime":1737891708000,"contributors":[{"name":"Xanadu13","email":"xanadu13@qq.com","commits":1}]},"readingTime":{"minutes":2.36,"words":709},"filePathRelative":"posts/java/log-in-java.md","localizedDate":"2025年1月26日","excerpt":"\\n<h2>主要日志系统</h2>\\n<h3>JUL</h3>\\n<p>Java标准库<code>java.util.logging</code>，但不常用。</p>\\n<h3>Log4j</h3>\\n<p>Log4j 的短板在于性能，在Logback 和 Log4j2 出来之后，Log4j的使用也减少了。</p>\\n<h3>Logback</h3>\\n<p>同样由Log4j的作者开发，提供了性能更好的实现，异步 logger，Filter等更多的特性。</p>\\n<h3>Log4j2</h3>\\n<p>由Log4j维护者开发，诞生晚于logback，因此吸收了slf4j和logback的一些优点（比如日志模板），性能也比较好。在设计上分离Facade和Implementation，即<code>log4j-api</code>和 <code>log4j-core</code>。</p>","autoDesc":true}`);export{g as comp,r as data};
