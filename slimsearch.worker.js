const{entries:$}=Object,{fromEntries:et}=Object,st="ENTRIES",D="KEYS",W="VALUES",_="";class S{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=b(this._path);if(b(s)===_)return{done:!1,value:this.result()};const n=t.get(b(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=b(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>b(t)).filter(t=>t!==_).join("")}value(){return b(this._path).node.get(_)}result(){switch(this._type){case W:return this.value();case D:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const b=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,r=o+s,c=new Uint8Array(r*o).fill(s+1);for(let i=0;i<o;++i)c[i]=i;for(let i=1;i<r;++i)c[i*o]=i;return q(e,t,s,n,c,1,o,""),n},q=(e,t,s,n,o,r,c,i)=>{const h=r*c;t:for(const u of e.keys())if(u===_){const l=o[h-1];l<=s&&n.set(i,[e.get(u),l])}else{let l=r;for(let f=0;f<u.length;++f,++l){const m=u[f],g=c*l,y=g-c;let d=o[g];const a=Math.max(0,l-s-1),w=Math.min(c-1,l+s);for(let p=a;p<w;++p){const O=m!==t[p],C=o[y+p]+ +O,k=o[y+p+1]+1,x=o[g+p]+1,v=o[g+p+1]=Math.min(C,k,x);v<d&&(d=v)}if(d>s)continue t}q(e.get(u),t,s,n,o,l,c,i+u)}};class z{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=I(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,r]=L(n);for(const c of o.keys())if(c!==_&&c.startsWith(r)){const i=new Map;return i.set(c.slice(r.length),o.get(c)),new z(i,t)}}return new z(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new S(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=F(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){return F(this._tree,t)?.has(_)??!1}keys(){return new S(this,D)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,E(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new S(this,W)}[Symbol.iterator](){return this.entries()}static from(t){const s=new z;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return z.from(Object.entries(t))}}const I=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),I(e.get(n),t.slice(n.length),s);return s.push([e,t]),I(void 0,"",s)},F=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return F(e.get(s),t.slice(s.length))},E=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const r of e.keys())if(r!==_&&t[n]===r[0]){const c=Math.min(s-n,r.length);let i=1;for(;i<c&&t[n+i]===r[i];)++i;const h=e.get(r);if(i===r.length)e=h;else{const u=new Map;u.set(r.slice(i),h),e.set(t.slice(n,n+i),u),e.delete(r),e=u}n+=i;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=I(e,t);if(s!==void 0){if(s.delete(_),s.size===0)R(n);else if(s.size===1){const[o,r]=s.entries().next().value;A(n,o,r)}}},R=e=>{if(e.length===0)return;const[t,s]=L(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&A(e.slice(0,-1),n,o)}},A=(e,t,s)=>{if(e.length===0)return;const[n,o]=L(e);n.set(o+t,s),n.delete(o)},L=e=>e[e.length-1],rt=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r\p{Z}\p{P}]+/u,j="or",N="and",ct="and_not",ut=(e,t)=>{e.includes(t)||e.push(t)},B=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,M=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[j]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:r,match:c}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,c),B(n.terms,r)}}return e},[N]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:r,terms:c,match:i}=t.get(n);B(o.terms,c),s.set(n,{score:o.score+r,terms:o.terms,match:Object.assign(o.match,i)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,r)=>{const{k:c,b:i,d:h}=r;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(c+1)/(e+c*(1-i+i*n/o)))},at=e=>(t,s,n)=>({term:t,fuzzy:typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy??!1,prefix:typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0,termBoost:typeof e.boostTerm=="function"?e.boostTerm(t,s,n):1}),H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),r=o.get(t);r?.get(s)==null?H(e,s,t,n):r.get(s)<=1?r.size<=1?o.delete(t):r.delete(s):r.set(s,r.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},gt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:j,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},pt={combineWith:N,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},Y={minDirtFactor:.1,minDirtCount:20},yt={..._t,...Y},K=Symbol("*"),wt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,r]of e._documentIds){const c=n.boostDocument?n.boostDocument(r,"",e._storedFields.get(o)):1;s.set(o,{score:c,terms:[],match:{}})}return s},U=(e,t=j)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},T=(e,t,s,n,o,r,c,i,h,u=new Map)=>{if(r==null)return u;for(const l of Object.keys(c)){const f=c[l],m=e._fieldIds[l],g=r.get(m);if(g==null)continue;let y=g.size;const d=e._avgFieldLength[m];for(const a of g.keys()){if(!e._documentIds.has(a)){ft(e,m,a,s),y-=1;continue}const w=i?i(e._documentIds.get(a),s,e._storedFields.get(a)):1;if(!w)continue;const p=g.get(a),O=e._fieldLength.get(a)[m],C=dt(p,y,e._documentCount,O,d,h),k=n*o*f*w*C,x=u.get(a);if(x){x.score+=k,ut(x.terms,t);const v=G(x.match,s);v?v.push(l):x.match[s]=[l]}else u.set(a,{score:k,terms:[t],match:{[s]:[l]}})}}return u},xt=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields??e._options.fields).reduce((d,a)=>({...d,[a]:G(n.boost,a)||1}),{}),{boostDocument:r,weights:c,maxFuzzy:i,bm25:h}=n,{fuzzy:u,prefix:l}={...J.weights,...c},f=e._index.get(t.term),m=T(e,t.term,t.term,1,t.termBoost,f,o,r,h);let g,y;if(t.prefix&&(g=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,a=d<1?Math.min(i,Math.round(t.term.length*d)):d;a&&(y=e._index.fuzzyGet(t.term,a))}if(g)for(const[d,a]of g){const w=d.length-t.term.length;if(!w)continue;y?.delete(d);const p=l*d.length/(d.length+.3*w);T(e,t.term,d,p,t.termBoost,a,o,r,h,m)}if(y)for(const d of y.keys()){const[a,w]=y.get(d);if(!w)continue;const p=u*d.length/(d.length+w);T(e,t.term,d,p,t.termBoost,a,o,r,h,m)}return m},Q=(e,t,s={})=>{if(t===K)return wt(e,s);if(typeof t!="string"){const l={...s,...t,queries:void 0},f=t.queries.map(m=>Q(e,m,l));return U(f,l.combineWith)}const{tokenize:n,processTerm:o,searchOptions:r}=e._options,c={tokenize:n,processTerm:o,...r,...s},{tokenize:i,processTerm:h}=c,u=i(t).flatMap(l=>h(l)).filter(l=>!!l).map(at(c)).map(l=>xt(e,l,c));return U(u,c.combineWith)},X=(e,t,s={})=>{const n=Q(e,t,s),o=[];for(const[r,{score:c,terms:i,match:h}]of n){const u=i.length||1,l={id:e._documentIds.get(r),score:c*u,terms:Object.keys(h),queryTerms:i,match:h};Object.assign(l,e._storedFields.get(r)),(s.filter==null||s.filter(l))&&o.push(l)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},zt=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:r,terms:c}of X(e,t,s)){const i=c.join(" "),h=n.get(i);h!=null?(h.score+=r,h.count+=1):n.set(i,{score:r,terms:c,count:1})}const o=[];for(const[r,{score:c,terms:i,count:h}]of n)o.push({suggestion:r,terms:i,score:c/h});return o.sort(P),o};class bt{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...gt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions},autoSuggestOptions:{...pt,...t.autoSuggestOptions}},this._index=new z,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=Y,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[r,c]of n)o[r]=Object.fromEntries(c);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,version:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const vt=e=>new bt(e),kt=({documentCount:e,nextId:t,fieldIds:s,averageFieldLength:n,dirtCount:o,version:r},c)=>{if(r!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const i=vt(c);return i._documentCount=e,i._nextId=t,i._idToShortId=new Map,i._fieldIds=s,i._avgFieldLength=n,i._dirtCount=o??0,i._index=new z,i},It=(e,t)=>{const{index:s,documentIds:n,fieldLength:o,storedFields:r}=e,c=kt(e,t);c._documentIds=M(n),c._fieldLength=M(o),c._storedFields=M(r);for(const[i,h]of c._documentIds)c._idToShortId.set(h,i);for(const[i,h]of s){const u=new Map;for(const l of Object.keys(h))u.set(parseInt(l,10),M(h[l]));c._index.set(i,u)}return c},V=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let r=0,c=0;const i=(u,l=!1)=>{let f;c===0?f=u.length>20?`… ${u.slice(-20)}`:u:l?f=u.length+c>100?`${u.slice(0,100-c)}… `:u:f=u.length>20?`${u.slice(0,20)} … ${u.slice(-20)}`:u,f&&o.push(f),c+=f.length,l||(o.push(["mark",t]),c+=t.length,c>=100&&o.push(" …"))};let h=s.indexOf(n,r);if(h===-1)return null;for(;h>=0;){const u=h+n.length;if(i(e.slice(r,h)),r=u,c>100)break;h=s.indexOf(n,r)}return c<100&&i(e.slice(r),!0),o},Mt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),Ot=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return X(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:r,terms:c,score:i}=o,h=r.includes("@"),u=r.includes("#"),[l,f]=r.split(/[#@]/),m=Number(l),g=c.sort((d,a)=>d.length-a.length).filter((d,a)=>c.slice(a+1).every(w=>!w.includes(d))),{contents:y}=n[m]??={title:"",contents:[]};if(h)y.push([{type:"customField",id:m,index:f,display:g.map(d=>o.c.map(a=>V(a,d))).flat().filter(d=>d!==null)},i]);else{const d=g.map(a=>V(o.h,a)).filter(a=>a!==null);if(d.length&&y.push([{type:u?"heading":"title",id:m,...u&&{anchor:f},display:d},i]),"t"in o&&o.t)for(const a of o.t){const w=g.map(p=>V(a,p)).filter(p=>p!==null);w.length&&y.push([{type:"text",id:m,...u&&{anchor:f},display:w},i])}}}),$(n).sort(([,o],[,r])=>"max"==="total"?Mt(o,r):Ot(o,r)).map(([o,{title:r,contents:c}])=>{if(!r){const i=rt(t,o);i&&(r=i.h)}return{title:r,contents:c.map(([i])=>i)}})},tt=(e,t,s={})=>{const n=zt(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},Ct=et($(JSON.parse("{\"/\":{\"documentCount\":92,\"nextId\":92,\"documentIds\":{\"0\":\"0\",\"1\":\"1\",\"2\":\"2\",\"3\":\"2#第二章-形式文法和形式语言\",\"4\":\"2#句型\",\"5\":\"2#句子\",\"6\":\"2#语言\",\"7\":\"2#等价文法\",\"8\":\"2#_1型文法\",\"9\":\"2#_2型文法\",\"10\":\"2#_3型文法\",\"11\":\"2#短语\",\"12\":\"2#直接短语\",\"13\":\"2#句柄\",\"14\":\"3\",\"15\":\"3#前置\",\"16\":\"3#解决ar启动40错误\",\"17\":\"4\",\"18\":\"4#git-merge-failed\",\"19\":\"5\",\"20\":\"5#bash切换用户\",\"21\":\"6\",\"22\":\"7\",\"23\":\"8\",\"24\":\"8#下载iso镜像文件\",\"25\":\"8#下载vmware\",\"26\":\"8#使用macos-unlocker\",\"27\":\"8#创建虚拟机\",\"28\":\"8#mac虚拟机-启动\",\"29\":\"8#ref\",\"30\":\"9\",\"31\":\"9#solution-1-埃氏筛\",\"32\":\"9#solution-2-线性筛-欧拉筛\",\"33\":\"9#solution-3-埃氏筛-bitset\",\"34\":\"10\",\"35\":\"10#题目大意\",\"36\":\"10#input\",\"37\":\"10#output\",\"38\":\"10#sample-input\",\"39\":\"10#sample-output\",\"40\":\"10#solution\",\"41\":\"11\",\"42\":\"11#共用内存\",\"43\":\"11#size计算\",\"44\":\"12\",\"45\":\"12#原始版本\",\"46\":\"12#使用hash替代递归\",\"47\":\"12#随机选择多种加密算法\",\"48\":\"12#ref\",\"49\":\"13\",\"50\":\"13#constexpr初探——阶乘\",\"51\":\"13#模板元编程——斐波那契数列\",\"52\":\"13#自定义后缀\",\"53\":\"13#简易的c-编译时字符串混淆\",\"54\":\"13#ref\",\"55\":\"14\",\"56\":\"14#使用原生指针和unsafe实现自引用\",\"57\":\"14#将局部变量生命周期变为-static\",\"58\":\"14#problem\",\"59\":\"14#solution\",\"60\":\"14#错误处理相关\",\"61\":\"14#将option类型转换为result类型\",\"62\":\"14#将result类型转换为option类型\",\"63\":\"14#option-transpose\",\"64\":\"14#全局变量\",\"65\":\"14#启动时初始化-后续只读\",\"66\":\"14#运行时需要修改\",\"67\":\"14#ref\",\"68\":\"15\",\"69\":\"15#使用指定的rust版本\",\"70\":\"15#pub关键字\",\"71\":\"15#ref\",\"72\":\"16\",\"73\":\"16#基本配置\",\"74\":\"16#迁移\",\"75\":\"16#常用指令\",\"76\":\"16#连接wsl桌面\",\"77\":\"16#ref\",\"78\":\"17\",\"79\":\"18\",\"80\":\"18#安装kali-linux\",\"81\":\"18#安装黑科技kex\",\"82\":\"18#运行kex\",\"83\":\"18#最终解决方法\",\"84\":\"19\",\"85\":\"20\",\"86\":\"21\",\"87\":\"22\",\"88\":\"23\",\"89\":\"24\",\"90\":\"25\",\"91\":\"26\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2],\"1\":[2,2],\"2\":[5],\"3\":[6],\"4\":[1,29],\"5\":[1,12],\"6\":[1,32],\"7\":[2,17],\"8\":[2,8],\"9\":[2,45],\"10\":[2,33],\"11\":[1,16],\"12\":[2,18],\"13\":[1,26],\"14\":[11],\"15\":[1,90],\"16\":[5,160],\"17\":[5],\"18\":[4,51],\"19\":[3],\"20\":[3,19],\"21\":[10,95],\"22\":[26,33],\"23\":[6,19],\"24\":[3,6],\"25\":[2,16],\"26\":[4,43],\"27\":[2,90],\"28\":[5,29],\"29\":[1],\"30\":[2,26],\"31\":[6,84],\"32\":[9,87],\"33\":[8,97],\"34\":[8,17],\"35\":[2,46],\"36\":[1,65],\"37\":[1,13],\"38\":[3,10],\"39\":[3,3],\"40\":[1,195],\"41\":[5],\"42\":[2,51],\"43\":[2,63],\"44\":[8,25],\"45\":[2,152],\"46\":[4,165],\"47\":[4,32],\"48\":[1,19],\"49\":[4],\"50\":[4,59],\"51\":[9,67],\"52\":[2,26],\"53\":[7,119],\"54\":[1,30],\"55\":[4,72],\"56\":[8,236],\"57\":[6],\"58\":[1],\"59\":[1,8],\"60\":[2],\"61\":[6,46],\"62\":[6,56],\"63\":[5,39],\"64\":[1,55],\"65\":[6,103],\"66\":[4,56],\"67\":[1,30],\"68\":[7],\"69\":[5,93],\"70\":[2,56],\"71\":[1,18],\"72\":[2,31],\"73\":[2,42],\"74\":[1,83],\"75\":[2,21],\"76\":[3,22],\"77\":[1,10],\"78\":[5,111],\"79\":[10],\"80\":[4,6],\"81\":[4,8],\"82\":[2,138],\"83\":[3,45],\"84\":[7,156],\"85\":[0,4],\"86\":[1],\"87\":[1],\"88\":[1],\"89\":[1],\"90\":[1],\"91\":[1]},\"averageFieldLength\":[3.673913043478262,50.370009323819005],\"storedFields\":{\"0\":{\"h\":\"博客主页\"},\"1\":{\"h\":\"介绍页\",\"t\":[\"空空如也！\"]},\"2\":{\"h\":\"编译原理期末复习笔记\"},\"3\":{\"h\":\"第二章：形式文法和形式语言\"},\"4\":{\"h\":\"句型\",\"t\":[\"从文法的开始符号出发进行零步或多于零步的推导得到的文法符号串（S =*=> α）。句型可以既包含终结符号又包含非终结符号。\"]},\"5\":{\"h\":\"句子\",\"t\":[\"只包含终结符号的句型称为句子。句子是一种特殊的句型。\"]},\"6\":{\"h\":\"语言\",\"t\":[\"文法 G 推导出的所有句子组成的集合，称为语言，记为 L(G)，即：\",\"L(G)={x∣S=∗>x且x∈VT​∗}\"]},\"7\":{\"h\":\"等价文法\",\"t\":[\"一个文法对应一个语言，但一个语言可能由若干个文法产生它，这若干个文法是等价的，称为等价文法。\"]},\"8\":{\"h\":\"1型文法\",\"t\":[\"上下文有关文法，Context Sensitive Grammar\"]},\"9\":{\"h\":\"2型文法\",\"t\":[\"上下文无关文法，Context Free Grammar\",\"要求产生式左边只有1个非终结符号，高级程序设计语言大部分语法结构使用2型文法描述。\",\"例如：\",\"S -> aB | bA A -> a | aS | bAA B -> b | bS | aBB\"]},\"10\":{\"h\":\"3型文法\",\"t\":[\"正规文法，Regular Grammar\",\"对于每个产生式，只能是以下两种形式之一：\",\"(1) A -> a 或 A -> aB // 右线性文法 (2) A -> a 或 A -> Ba // 左线性文法\"]},\"11\":{\"h\":\"短语\",\"t\":[\"一棵子树的所有叶子自左至右排列起来形成一个相对于子树根的短语。\"]},\"12\":{\"h\":\"直接短语\",\"t\":[\"仅有父子两代的一棵子树，它的所有叶子自左至右排列起来所形成的符号串\"]},\"13\":{\"h\":\"句柄\",\"t\":[\"一个句型的分析树中最左最下那棵只有父子两代的子树的所有叶子的自左至右排列。\",\"最左直接短语称为句柄。\",\"短语、直接短语、句柄\"]},\"14\":{\"h\":\"解决在windows 11中无法使用eNSP的问题\"},\"15\":{\"h\":\"前置\",\"t\":[\"eNSP 1.3.00.100 Setup.exe\",\"VirtualBox-5.2.44-139111-Win.exe\",\"WinPcap_4_1_3.exe\",\"首先，你必须下载好这些软件，复制这些文件名自行google都不难下载到。（PS：基本上都是百度网盘链接，没会员的话估计要等一会儿）\",\"至于版本，不需要和我这里完全相同，以具体你搜到的教程为准。但是VirtualBox版本必须是5.x开头的，那些新版的7.x的肯定不行，如果你已经通过VirtualBox 7.x安装了虚拟机，那么很遗憾你必须在VirtualBox 7.x和eNSP之间做出取舍了。\",\"安装顺序看搜到的教程即可，不再赘述。\"]},\"16\":{\"h\":\"解决AR启动40错误\",\"t\":[\"当你满心欢喜地安装完eNSP，可能还顺便完成了计算机网络的HTTP、ARP实验，似乎一切正常。但如果你尝试启动一个AR路由器，你就会收到一个编号为40的启动错误。（其实启动FW设备也会这样，笔者也是在做NAT实验时发现，无论如何都绕不开AR路由器...）\",\"首先，请根据跳出的帮助，一步步照着完成，如果确认已经全部完成，但还是无法启动AR设备，而且你电脑还是Win11的话，那请接着看下去：\",\"首先，以管理员身份运行cmd，输入bcdedit：\",\"确认这里的hypervisorlaunchtype项的值为Off，如果不为Off，运行bcdedit /set hypervisorlaunchtype off即可。\",\"注意：执行完这条指令后必须重启计算机才能生效。 （不能关机再开机，必须选择重新启动）\",\"如果你和我一样是Windows 11 家庭版，可能还需要继续看下去：\",\"在cmd中输入regedit打开注册表编辑器，编辑->查找->输入CachedDrtmAuthIndex，不出意外的话能跳到类似于计算机\\\\HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\ControlSet001\\\\Control\\\\DeviceGuard的路径，然后把这里的两个项或者三个项的值均修改为0，再重启电脑。（我的三项初始值分别为0,1,1）\",\"重启完成后，就能愉快地使用AR路由器了~\"]},\"17\":{\"h\":\"记录有关Git的命令\"},\"18\":{\"h\":\"Git Merge Failed\",\"t\":[\"试图合并分支时，有时候会遇到这样的报错： Git Merge Failed fatal: You have not concluded your merge (MERGE_HEAD exists).\",\"有2种选择：\",\"输入git commit -m \\\"commit info\\\"合并分支。\",\"放弃本地分支，直接覆盖：\",\"git reset --hard git pull\"]},\"19\":{\"h\":\"Linux指令备忘录\"},\"20\":{\"h\":\"bash切换用户\",\"t\":[\"首先为其设置password：\",\"sudo passwd 要切换的用户名\",\"然后使用su指令切换即可：\",\"su 要切换的用户名\"]},\"21\":{\"h\":\"Nodejs中报错“Error: spawn EINVAL”\",\"t\":[\"这是由于执行子进程存在安全漏洞，因此在18.x, 20.x, 21.x版本中直接禁止了。\",\"详见：https://nodejs.org/en/blog/vulnerability/april-2024-security-releases-2\",\"需要在报错的包对应的scripts/install.js文件中加上shell: true：\",\"'use strict' const os = require('os'); const path = require('path'); const spawn = require('child_process').spawn; const gypArgs = ['rebuild']; if (process.env.NODE_PTY_DEBUG) { gypArgs.push('--debug'); } const gypProcess = spawn(os.platform() === 'win32' ? 'node-gyp.cmd' : 'node-gyp', gypArgs, { shell: true, cwd: path.join(__dirname, '..'), stdio: 'inherit' }); gypProcess.on('exit', function (code) { process.exit(code); });\"]},\"22\":{\"h\":\"解决vscode报错：找不到“cookie”的类型定义文件。程序包含该文件是因为: 隐式类型库 \\\"cookie\\\" 的入口点ts\",\"t\":[\"第一步：清理yarn缓存\",\"yarn cache clean\",\"第二步：删除node_modules文件夹和yarn.lock\",\"第三步：重新下载依赖\",\"yarn install\",\"然后你就会发现报错已经消失辣~\"]},\"23\":{\"h\":\"在VMware中安装MacOS虚拟机\",\"t\":[\"写在前面：如果宿主机是AMD的cpu，不需要再尝试了，直接放弃就行\"]},\"24\":{\"h\":\"下载iso镜像文件\",\"t\":[\"我下载的是这个：\"]},\"25\":{\"h\":\"下载VMware\",\"t\":[\"这个不多说，网上找个就行，我的是VMware Workstation 17 Pro\"]},\"26\":{\"h\":\"使用macOS Unlocker\",\"t\":[\"直接把仓库git clone或者下载下来即可，接着找到需要的win-install.cmd，右键以管理员身份运行。\",\"注意运行之前先把VMware关了，不然会遇到Permission Denied。\",\"如果忘关了，关闭VMware之后重新运行即可。\"]},\"27\":{\"h\":\"创建虚拟机\",\"t\":[\"打开VMware Workstation，右键新建虚拟机\",\"选择自定义安装\",\"硬件兼容性\",\"这里我使用了默认设置\",\"选择稍后安装映像文件\",\"选择操作系统类型\",\"设置虚拟机存放位置\",\"设置处理器数量\",\"我设置的是1个处理器和4个内核，可视情况调整\",\"虚拟机内存\",\"我使用的是默认值4096MB\",\"网络类型设置\",\"这里选择NAT或者桥接都行\",\"I/O控制器类型\",\"使用默认值\",\"磁盘类型\",\"使用默认值\",\"磁盘容量设置\",\"虚拟磁盘存放位置\",\"至此，虚拟机创建完成\",\"把下载好的iso镜像文件挂载到虚拟机\",\"右键你创建好的虚拟机，点击“设置”：\",\"修改.vmx文件\",\"找到存放vm的路径：\",\"使用记事本打开该文件，在最下面新开一行，加入以下内容：\",\"smc.version = \\\"0\\\"\"]},\"28\":{\"h\":\"mac虚拟机，启动！\",\"t\":[\"打开后会看到一个苹果图案，以及进度条。进度条走完之后就能进入以下页面：\",\"选择“简体中文”。\",\"接下来安装系统：\",\"等待安装完成：\"]},\"29\":{\"h\":\"Ref\"},\"30\":{\"h\":\"素数筛\",\"t\":[\"题目传送门：洛谷3383\",\"题意：给定一个范围 n ，有 q 个询问，每次输出第 k 小的素数。\"]},\"31\":{\"h\":\"Solution 1: 埃氏筛\",\"t\":[\"时间复杂度[1]：O(n⋅loglogn​)\",\"注意，这里的g[x] == 1表示确定x不是素数\",\"#include <iostream> #include <vector> typedef long long ll; using namespace std; const int N = 1e8 + 5; bool g[N]; int main(){ ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); g[0] = 1; g[1] = 1; for(int i = 2; i < 10000; ++i){ if (g[i]) continue; for (int j = i * i; j<N; j+=i) { g[j] = true; } } int n,q,cnt = 0; cin >> n >> q; vector<int> prime(n+2); for (int i = 2; i <= n; ++i) { if (!g[i]) prime[++cnt] = i; } while (q--){ int x; cin>>x; cout << prime[x] << '\\\\n'; } return 0; }\",\"测评用时：1.44s submit 1\"]},\"32\":{\"h\":\"Solution 2: 线性筛（欧拉筛）\",\"t\":[\"线性筛避免了对一个合数重复标记，达到了线性时间复杂度\",\"时间复杂度：O(n)\",\"#include <iostream> #include <vector> typedef long long ll; using namespace std; const int N = 1e8 + 5; int main(){ ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); int n,q; cin >> n >> q; vector<bool> g(N); vector<int> prime; for (int i = 2; i <= n; ++i) { if (!g[i]){ prime.push_back(i); } for (int pri_j : prime) { int mul = i * pri_j; if (mul > n) break; g[mul] = true; if (i % pri_j == 0){ break; } } } while (q--){ int x; cin>>x; cout << prime[x-1] << '\\\\n'; } return 0; }\",\"测评用时：0.75s submit 2\"]},\"33\":{\"h\":\"Solution 3: 埃氏筛+bitset\",\"t\":[\"由于bitset、vector<bool>存在常数优化，埃氏筛+bitset的效率可以接近线性筛\",\"#include <iostream> #include <vector> #include <bitset> typedef long long ll; using namespace std; const int N = 1e8 + 5; int main(){ ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); bitset<N> g; g[0] = 1; g[1] = 1; for(int i = 2; i < 10000; ++i){ if (g[i]) continue; for (int j = i * i; j<N; j+=i) { g[j] = true; } } int n,q,cnt = 0; cin >> n >> q; vector<int> prime(n+2); for (int i = 2; i <= n; ++i) { if (!g[i]) prime[++cnt] = i; } while (q--){ int x; cin>>x; cout << prime[x] << '\\\\n'; } return 0; }\",\"测评用时：0.82s submit 3\",\"只考虑筛的过程，如果要取出素数还需O(n)↩︎\"]},\"34\":{\"h\":\"HDOJ-1010 Tempter of the Bone\",\"t\":[\"题目传送门：http://acm.hdu.edu.cn/showproblem.php?pid=1010\"]},\"35\":{\"h\":\"题目大意\",\"t\":[\"小狗要逃离一个N×M的长方形迷宫，迷宫出口的门仅在第 T 秒时开一瞬间（不到1秒）。因此，小狗必须恰好在第 T 秒到达门口才能逃离。 每一秒，它可以向上下左右任意移动一格，且所有格子至多走一次。\"]},\"36\":{\"h\":\"Input\",\"t\":[\"输入由多个测试用例组成。 每个测试用例的第一行包含三个整数N、M和T(1<N,M<7,0<T<50)，分别表示迷宫的大小和门打开的时间。接下来的 N 行给出了迷宫布局，每行包含 M 个字符。字符是以下之一：\",\"X：无法通过的一堵墙\",\"S：起点\",\"D：出口的门\",\".：可走的方块\",\"输入以三个 0 结束，该测试用例不被处理。\"]},\"37\":{\"h\":\"Output\",\"t\":[\"对于每组样例，输出YES或NO表示小狗能否逃生。\"]},\"38\":{\"h\":\"Sample Input\",\"t\":[\"4 4 5 S.X. ..X. ..XD .... 3 4 5 S.X. ..X. ...D 0 0 0\"]},\"39\":{\"h\":\"Sample Output\",\"t\":[\"NO YES\"]},\"40\":{\"h\":\"Solution\",\"t\":[\"一道很明显的dfs题，因为题目存在恰好走 T 步的限制，因此定义状态为(x,y,step)即可。进入下一层递归前，标记上一个位置不可访问，并在回溯时恢复，也是比较基本的dfs搜索思想。\",\"一开始交了一发，虽然AC了，但耗时468ms，对这个耗时不是很满意，于是想了想可行的剪枝方式。\",\"因为所有方格至多走一次，因此如果 T>=N∗M−wall ( wall 是墙的数量)，直接输出 NO\",\"奇偶性剪枝：如果起点到终点的曼哈顿距离与 T 的奇偶性不一致，直接输出 NO （因为绕路不改变奇偶性，就算能重复走之前的路也不改变奇偶性）\",\"如果时间太短(t<abs(sx-ex)+abs(sy-ey)-2)，直接输出 NO\",\"有了前两个剪枝之后，可以优化到109ms。第三个剪枝效果不大，推测应该是这样的样例比较少。\",\"#include <bits/stdc++.h> using namespace std; const int N = 8; int n,m,t,sx,sy,ex,ey; char mp[N][N]; bool tag; int nxt[4][2]={1,0,0,1,-1,0,0,-1}; void dfs(int x,int y,int step){ if(tag || step>t) return; if(x==ex&&y==ey&&step==t){ tag= true; return; } for(int i=0;i<4;i++){ int nx=x+nxt[i][0]; int ny=y+nxt[i][1]; if(nx>=1&&nx<=n&&ny>=1&&ny<=m && mp[nx][ny]!='X'){ mp[nx][ny]='X'; dfs(nx,ny,step+1); mp[nx][ny]='.'; } } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); while (cin>>n>>m>>t,n||m||t){ int wall=0; for(int i=1;i<=n;i++){ for(int j=1;j<=m;j++){ cin>>mp[i][j]; if(mp[i][j]=='X') ++wall; else if(mp[i][j]=='S') sx=i,sy=j; else if(mp[i][j]=='D') ex=i,ey=j; } } if(n*m-wall<=t){ cout<<\\\"NO\\\\n\\\"; continue; } if((abs(sx+sy-ex-ey)&1)!=(t&1)){ cout<<\\\"NO\\\\n\\\"; continue; } if (t<abs(sx-ex)+abs(sy-ey)-2) { cout<<\\\"NO\\\\n\\\"; continue; } tag=false; mp[sx][sy]='X'; dfs(sx,sy,0); cout<<(tag?\\\"YES\\\":\\\"NO\\\")<<'\\\\n'; } }\"]},\"41\":{\"h\":\"C语言中的union\"},\"42\":{\"h\":\"共用内存\",\"t\":[\"union中的字段是共用内存的，比如可以用下面的代码判断机器是小端序还是大端序：\",\"#include <stdio.h> union U { char c; int i; }u; int main() { u.i = 1; if(u.c == 1) { printf(\\\"little-endian\\\"); } else { printf(\\\"big-endian\\\"); } }\"]},\"43\":{\"h\":\"size计算\",\"t\":[\"union的大小计算遵循以下的规则：\",\"联合的大小至少是最大成员的大小\",\"当最大成员大小不是最大对齐数的整数倍的时候，则对齐到最大对齐数的整数倍\",\"#include<stdio.h> union Un1 { char c[5]; // 1*5B int i; // 4*1B }; union Un2 { short c[7]; // 2*7B int i; // 4*1B }; int main() { printf(\\\"%d\\\\n\\\", sizeof(union Un1)); // 8 printf(\\\"%d\\\\n\\\", sizeof(union Un2)); // 16 }\"]},\"44\":{\"h\":\"C++中原生编译时字符串混淆实现\",\"t\":[\"C++中具有强大的模板元编程，可以不依赖任何外部库，仅使用C++ std实现编译时的字符串混淆。\"]},\"45\":{\"h\":\"原始版本\",\"t\":[\"在我的另一篇文章中提到过一个C++中字符串混淆的简易版本：\",\"但其中0x55是硬编码的，我们需要引入编译时随机数来消除这一硬编码。\",\"一个可行的编译期间随机数实例：\",\"#include <iostream> namespace { constexpr char time[] = __TIME__; constexpr int DigitToInt(char c) { return c - '0'; } const int seed = DigitToInt(time[7]) + DigitToInt(time[6]) * 10 + DigitToInt(time[4]) * 60 + DigitToInt(time[3]) * 600 + DigitToInt(time[1]) * 3600 + DigitToInt(time[0]) * 36000; } // 根据 N，生成随机数 value template<int N> struct MetaRandomGenerator { private: static constexpr unsigned a = 16807; // 7^5 static constexpr unsigned m = 2147483647; // 2^31 - 1 static constexpr unsigned s = MetaRandomGenerator<N - 1>::value; static constexpr unsigned lo = a * (s & 0xFFFF); // 低 16 位乘以 16807 static constexpr unsigned hi = a * (s >> 16); // 高 16 位乘以 16807 static constexpr unsigned result = lo + hi + ((hi & 0x7FFF) << 16); public: static constexpr unsigned max = m; static constexpr unsigned value = result > m ? result - m : result; }; template<> struct MetaRandomGenerator<0> { static constexpr unsigned value = seed; }; template<int N, int M> struct MetaRandom { static const int value = MetaRandomGenerator<N + 1>::value % M; }; int main() { int x = MetaRandom<__COUNTER__, 20>::value; int y = MetaRandom<__COUNTER__, 114514>::value; return 0; }\",\"但由于MetaRandom定义的模板template<int N, int M>中的N基于递归实现，在N较大时会生成大量递归嵌套。在gcc.godbolt.org上实测，若不额外指定参数，N无法超过225（使用编译参数-std=c++20 -O0）。\"]},\"46\":{\"h\":\"使用Hash替代递归\",\"t\":[\"#include <iostream> #include <cstdint> using namespace std; namespace { constexpr __attribute((always_inline)) uint32_t hash(uint32_t in) { constexpr uint32_t r[]{ 0xdf15236c, 0x16d16793, 0x3a697614, 0xe0fe08e4, 0xa3a53275, 0xccc10ff9, 0xb92fae55, 0xecf491de, 0x36e86773, 0x0ed24a6a, 0xd7153d80, 0x84adf386, 0x17110e76, 0x6d411a6a, 0xcbd41fed, 0x4b1d6b30}; uint32_t out{in ^ r[in & 0xF]}; out ^= std::rotl(in, 020) ^ r[(in >> 010) & 0xF]; out ^= std::rotl(in, 010) ^ r[(in >> 020) & 0xF]; out ^= std::rotr(in, 010) ^ r[(in >> 030) & 0xF]; return out; } template <size_t N> constexpr __attribute((always_inline)) uint32_t hash(char const (&str)[N]) { uint32_t h{}; for (uint32_t i{}; i < N; ++i) h ^= uint32_t(str[i]) << (i % 4 * 8); return hash(h); } template <size_t N> constexpr __attribute((always_inline)) uint32_t constexpr_rand_impl(char const (&file)[N], uint32_t line, uint32_t column = 0x8dc97987) { return hash(hash(__TIME__) ^ hash(file) ^ hash(line) ^ hash(column)); } } #define RANDOM(seed_) (constexpr_rand_impl(__FILE__, seed_)) template <int K, size_t... I> struct MetaString { constexpr __attribute((always_inline)) MetaString(const char *str) :seed_(static_cast<char>(constexpr_rand_impl(__FILE__, K))), buffer_{encrypt(str[I])...} {} const char *decrypt() { // ((cout << \\\"I=\\\" << I << \\\"\\\\n\\\"), ...); for (size_t i = 0; i < sizeof...(I); ++i) buffer_[i] = decrypt(buffer_[i]); buffer_[sizeof...(I)] = 0; return const_cast<const char*>(buffer_); } private: constexpr char encrypt(char c) const { return c ^ seed_; } constexpr char decrypt(char c) const { return encrypt(c); } private: char seed_; volatile char buffer_[sizeof...(I) + 1]; // 避免编译器过度优化 }; template <int K, std::size_t... I> constexpr __attribute((always_inline)) auto index_seq_helper(const char *str, std::index_sequence<I...>) { return MetaString<K, I...>(str).decrypt(); } // constexpr __attribute((always_inline)) const char* operator \\\"\\\"_obf(const char *str, size_t) // { // constexpr auto seq = make_index_sequence<sizeof(str)-1>{}; // return index_seq_helper(str, seq); // } // 注意，sizeof(\\\"123\\\") == 4，但是auto str \\\"123\\\"; sizeof(str) == 8 (返回了const char*长度) // 因此在这里只能使用宏，不能使用自定义后缀 #define STR_OBF(str) (index_seq_helper<__COUNTER__>(str, make_index_sequence<sizeof(str) - 1>{})) int main() { cout << STR_OBF(\\\"Hello, world\\\") << '\\\\n'; return 0; }\",\"注意：以上算法的随机数的分布并不均匀，特别是在取 ai​=i<<n 的情况下，尽管在这一应用场景下我们并不关心这些问题。\"]},\"47\":{\"h\":\"随机选择多种加密算法\",\"t\":[\"上述代码可以对每个字符串生成不同的xor种子，但加密方式都是异或一个随机值。我们可以利用模板偏特化来实现随机选择加密算法：\"]},\"48\":{\"h\":\"Ref\",\"t\":[\"https://sunocean.life/blog/blog/2022/01/28/C++-metastr\",\"https://gist.github.com/KoneLinx/d3601597248bed423daf1a7cf7bd9533\"]},\"49\":{\"h\":\"C++高级特性实例\"},\"50\":{\"h\":\"constexpr初探——阶乘\",\"t\":[\"#include <iostream> using namespace std; constexpr int fac(int n) { return n <= 1 ? 1 : (n * fac(n-1)); } int main() { constexpr auto x = fac(5); }\",\"注意这里的x是在编译期间求值的，生成的汇编代码大致如下：\",\"main: push rbp mov rbp, rsp mov DWORD PTR [rbp-4], 120 mov eax, 0 pop rbp ret\"]},\"51\":{\"h\":\"模板元编程——斐波那契数列\",\"t\":[\"模板元编程是一种广泛应用于C++库开发的编程范式。在巧妙的模板的帮助下，程序员可以在编译时执行算法。C++模板元程序被证明是图灵完备的，因此可以在编译时间内执行大规模的算法。\",\"#include <iostream> using namespace std; template <int N> struct Fibonacci { static constexpr int value = Fibonacci<N - 1>::value + Fibonacci<N - 2>::value; }; template <> struct Fibonacci<1> { static constexpr int value = 1; }; template <> struct Fibonacci<0> { static constexpr int value = 0; }; int main() { constexpr auto x = Fibonacci<20>::value; }\"]},\"52\":{\"h\":\"自定义后缀\",\"t\":[\"#include <iostream> using namespace std; long double operator \\\"\\\"_km(long double); int main() { auto dis = 1.2_km; }\"]},\"53\":{\"h\":\"简易的C++编译时字符串混淆\",\"t\":[\"#include <iostream> using namespace std; template <size_t... I> struct MetaString1 { constexpr __attribute((always_inline)) MetaString1(const char *str) : buffer_{encrypt(str[I])...}{} const char *decrypt() { for (size_t i = 0; i < sizeof...(I); ++i) buffer_[i] = decrypt(buffer_[i]); buffer_[sizeof...(I)] = 0; return const_cast<const char*>(buffer_); } private: constexpr char encrypt(char c) const { return c ^ 0x55; } constexpr char decrypt(char c) const { return encrypt(c); } private: volatile char buffer_[sizeof...(I) + 1]; // 避免编译器过度优化 }; template <std::size_t... I> constexpr __attribute((always_inline)) auto index_seq_helper(const char *str, std::index_sequence<I...>) { return MetaString1<I...>(str).decrypt(); } // 注意，sizeof(\\\"123\\\") == 4，但是auto str \\\"123\\\"; sizeof(str) == 8 (返回了const char*长度) // 因此在这里只能使用宏，不能使用自定义后缀 #define OBFUSCATED1(str) (index_seq_helper(str, make_index_sequence<sizeof(str) - 1>{})) int main() { cout << OBFUSCATED1(\\\"Hello, world\\\") << '\\\\n'; return 0; }\",\"使用-O1编译参数即可在编译结果中消除字符串常量\\\"Hello, world\\\"。\",\"此外，这里采用了固定的xor加密算法c ^ 0x55，可以使用随机xor值、随机使用多种加密算法等方式进一步提升加密强度。\"]},\"54\":{\"h\":\"Ref\",\"t\":[\"https://github.com/andrivet/ADVobfuscator\",\"https://www.researchgate.net/publication/259005783_Random_number_generator_for_C_template_metaprograms\",\"https://www.zhihu.com/question/378525362/answer/1072878269\",\"https://gist.github.com/KoneLinx/d3601597248bed423daf1a7cf7bd9533\"]},\"55\":{\"h\":\"Rust 学习笔记\",\"t\":[\"Rust具有一些让人眼前一亮的特点：无GC也不需手动管理内存、高性能、安全性强等等。但其诸多优点背后的代价，就是学习曲线相当陡峭。\",\"Rust的困难，不在于语言特性，而在于：\",\"具体实践中如何运用学到的技巧\",\"遇到了坑时（生命周期、借用错误，自引用等）如何迅速、正确的解决\",\"大量的标准库API的熟练使用，这是保证开发效率的关键\"]},\"56\":{\"h\":\"使用原生指针和unsafe实现自引用\",\"t\":[\"algo.course.rs上的实现，在此记录一下\",\"pub struct Tree { count: usize, root: *mut Node, } #[derive(Debug)] struct Node { data: i32, // Null指针这里代表\\\"None`; right.is_null() ==> 没有right child left: *mut Node, right: *mut Node, parent: *mut Node, } impl Tree { pub fn new() -> Self { Self { count: 0, root: std::ptr::null_mut(), } } // 返回tree的节点数量 pub fn node_count(&self) -> usize { assert!(self.count != 0 || self.root.is_null()); self.count } // 在tree中新增一项，插入成功则返回true,若给定的数据在tree上已经存在，则返回false pub fn insert(&mut self, data: i32) -> bool { if self.root.is_null() { self.root = Node::new(data); } else { if !insert_node(self.root, data) { return false; } } self.count += 1; true } // 找到tree上的指定项，若找到，返回true pub fn find(&self, data: i32) -> bool { !find_node(self.root, data).is_null() } // 返回tree的字符串形式，用于Debug pub fn display(&self) -> String { display_node(self.root, 0) } // 使用中序遍历来返回tree中的所有数据 pub fn inorder(&self) -> Vec<i32> { let mut v = vec![]; if !self.root.is_null() { let mut node = leftmost_child(self.root); loop { if node.is_null() { break; } unsafe { v.push((*node).data); } node = successor_of_node(node); } } v } // 从tree上移除指定项, 若该项存在且被成功移除，则返回true，否则都返回false pub fn remove(&mut self, data: i32) -> bool { let node = find_node(self.root, data); if node.is_null() { false } else { self.remove_node(node); self.count -= 1; true } } // 在tree上找到指定项的继任者 pub fn successor(&self, data: i32) -> Option<i32> { unsafe { let node = find_node(self.root, data); if !node.is_null() { let nodesucc = successor_of_node(node); if !nodesucc.is_null() { return Some((*nodesucc).data); } } None } } // 从tree上移除指定的节点 fn remove_node(&mut self, node: *mut Node) { unsafe { let lchild = (*node).left; let rchild = (*node).right; if lchild.is_null() && rchild.is_null() { // 节点没有子节点，所以可以安全移除 self.replace_node(node, std::ptr::null_mut()); } else if !lchild.is_null() && !rchild.is_null() { // 节点的左右子节点都在，我们需要找到该节点的继任者，然后将继任者的数据赋给当前节点，然后再递归删除继任者 let succ = successor_of_node(node); assert!(!succ.is_null()); (*node).data = (*succ).data; self.remove_node(succ); } else if !lchild.is_null() { // 节点只有左子节点，所以使用后者替代前者 self.replace_node(node, lchild); } else if !rchild.is_null() { // 节点只有右子节点，所以使用后者替代前者 self.replace_node(node, rchild); } else { panic!(\\\"unreachable\\\"); } } } // 使用`r`节点来替换目标`node`节点 fn replace_node(&mut self, node: *mut Node, r: *mut Node) { unsafe { let parent = (*node).parent; if parent.is_null() { // Removing the root node. self.root = r; if !r.is_null() { (*r).parent = std::ptr::null_mut(); } } else { if !r.is_null() { (*r).parent = parent; } if (*parent).left == node { (*parent).left = r; } else if (*parent).right == node { (*parent).right = r; } } // 被替换的节点不再被使用，因此可以回收它：通过`Box`拿走它的所有权，然后它会被自动drop Box::from_raw(node); } } } impl Drop for Tree { fn drop(&mut self) { // 也许不是性能最高的实现，但是简单，而且有用 while !self.root.is_null() { self.remove_node(self.root); } } } impl Node { fn new(data: i32) -> *mut Self { Box::into_raw(Box::new(Self { data, left: std::ptr::null_mut(), right: std::ptr::null_mut(), parent: std::ptr::null_mut(), })) } fn new_with_parent(data: i32, parent: *mut Node) -> *mut Self { Box::into_raw(Box::new(Self { data, left: std::ptr::null_mut(), right: std::ptr::null_mut(), parent, })) } } // 在节点子树上创建新的节点 fn insert_node(node: *mut Node, data: i32) -> bool { unsafe { if (*node).data == data { false } else if data < (*node).data { if (*node).left.is_null() { (*node).left = Node::new_with_parent(data, node); true } else { insert_node((*node).left, data) } } else { if (*node).right.is_null() { (*node).right = Node::new_with_parent(data, node); true } else { insert_node((*node).right, data) } } } } // 在`fromnode`的子树上寻找目标数据，如果没找到则返回`null` fn find_node(fromnode: *mut Node, data: i32) -> *mut Node { unsafe { if fromnode.is_null() || (*fromnode).data == data { fromnode } else if data < (*fromnode).data { find_node((*fromnode).left, data) } else { find_node((*fromnode).right, data) } } } // 返回`node`子树的字符串形式，同时指定缩进字符数 fn display_node(node: *const Node, indent: usize) -> String { let indent_str = \\\" \\\".repeat(indent); if node.is_null() { indent_str + \\\".\\\\n\\\" } else { unsafe { let mut s = format!(\\\"{}{}\\\\n\\\", indent_str, (*node).data); s.push_str(&display_node((*node).left, indent + 2)); s.push_str(&display_node((*node).right, indent + 2)); s } } } // 找到`node`最左边的子节点，如果没有，就返回`node`自身, `node`不能为null fn leftmost_child(node: *mut Node) -> *mut Node { unsafe { if (*node).left.is_null() { node } else { leftmost_child((*node).left) } } } // 在tree上找到`node`的继任者 fn successor_of_node(node: *mut Node) -> *mut Node { unsafe { if !(*node).right.is_null() { // 若node有一个右子节点，则继任者是该右子节点的最左子节点，若该右子节点没有子节点，则继任者就是右子节点 leftmost_child((*node).right) } else { // 没有右子节点，则找到一个父节点，当前node是该父节点的左子节点, 若在root之前都没找到，说明node没有继任者 parent_with_left(node) } } } // 在`node`的祖先中找到它的父节点,且`node`必须是该父节点的左子节点 fn parent_with_left(node: *mut Node) -> *mut Node { unsafe { // 若`node`有父节点，且该父节点拥有左子节点，同时`node`就是这个左子节点，那么该父节点就是我们的目标 let parent = (*node).parent; if !parent.is_null() { if std::ptr::eq((*parent).left, node) { return parent; } return parent_with_left(parent); } // `node`没有父节点 std::ptr::null_mut() } } fn main() { }\"]},\"57\":{\"h\":\"将局部变量生命周期变为'static\"},\"58\":{\"h\":\"Problem\"},\"59\":{\"h\":\"Solution\",\"t\":[\"使用leak、Box::leak等方法：\"]},\"60\":{\"h\":\"错误处理相关\"},\"61\":{\"h\":\"将Option类型转换为Result类型\",\"t\":[\"使用ok_or方法：\",\"fn foo(abs_path: &str) -> Result<String, String> { let path = PathBuf::from(abs_path); let relative = path.file_name() .ok_or(format!(\\\"Failed to get relative_name for `{}`\\\", abs_path))?; let res = relative.to_str().unwrap(); Ok(res.to_owned()) }\"]},\"62\":{\"h\":\"将Result类型转换为Option类型\",\"t\":[\"使用ok方法：\",\"fn divide(dividend: f64, divisor: f64) -> Result<f64, String> { if divisor == 0.0 { Err(String::from(\\\"除数不能为零\\\")) } else { Ok(dividend / divisor) } } #[test] fn test_divide() { let result_ok: Result<f64, String> = divide(10.0, 2.0); let option_some: Option<f64> = result_ok.ok(); assert_eq!(option_some, Some(5.0)); let result_err: Result<f64, String> = divide(10.0, 0.0); let option_none: Option<f64> = result_err.ok(); assert_eq!(option_none, None); }\"]},\"63\":{\"h\":\"Option#transpose()\",\"t\":[\"将Option<Result<T, E>>转换为Result<Option<T>, E>：\",\"#[derive(Debug, Eq, PartialEq)] struct SomeErr; let x: Result<Option<i32>, SomeErr> = Ok(Some(5)); let y: Option<Result<i32, SomeErr>> = Some(Ok(5)); assert_eq!(x, y.transpose());\"]},\"64\":{\"h\":\"全局变量\",\"t\":[\"在Rust中，出于安全性的考量，全局变量的使用并不像C++那样简单。这样很容易理解，如果定义一个不受保护的全局变量，在多个线程同时修改、写的同时有线程读等情况下，很容易出现脏数据。\",\"当然也不是完全禁止全局字段，以下记录几种常用的解决方式：\"]},\"65\":{\"h\":\"启动时初始化，后续只读\",\"t\":[\"使用强大的社区库lazy_static：\",\"[dependencies] lazy_static = \\\"1.5.0\\\"\",\"use lazy_static::lazy_static; use std::collections::HashMap; lazy_static! { static ref HASHMAP: HashMap<u32, &'static str> = { let mut m = HashMap::new(); m.insert(0, \\\"foo\\\"); m.insert(1, \\\"bar\\\"); m.insert(2, \\\"baz\\\"); m }; } fn main() { // First access to `HASHMAP` initializes it println!(\\\"The entry for `0` is \\\\\\\"{}\\\\\\\".\\\", HASHMAP.get(&0).unwrap()); // Any further access to `HASHMAP` just returns the computed value println!(\\\"The entry for `1` is \\\\\\\"{}\\\\\\\".\\\", HASHMAP.get(&1).unwrap()); }\",\"在rust 1.70之后，也可以直接使用标准库中的OnceLock：\",\"use std::collections::HashMap; use std::sync::OnceLock; fn hashmap() -> &'static HashMap<u32, &'static str> { static HASHMAP: OnceLock<HashMap<u32, &str>> = OnceLock::new(); HASHMAP.get_or_init(|| { let mut m = HashMap::new(); m.insert(0, \\\"foo\\\"); m.insert(1, \\\"bar\\\"); m.insert(2, \\\"baz\\\"); m }) } fn main() { // First access to `HASHMAP` initializes it println!(\\\"The entry for `0` is \\\\\\\"{}\\\\\\\".\\\", hashmap().get(&0).unwrap()); // Any further access to `HASHMAP` just returns the computed value println!(\\\"The entry for `1` is \\\\\\\"{}\\\\\\\".\\\", hashmap().get(&1).unwrap()); }\",\"使用unsafe裸指针： https://stackoverflow.com/questions/63433547/more-efficient-alternative-to-thread-local-and-lazy-static\"]},\"66\":{\"h\":\"运行时需要修改\",\"t\":[\"use std::sync::Mutex; use lazy_static::lazy_static; lazy_static! { static ref NAMES: Mutex<String> = Mutex::new(String::from(\\\"Sunface, Jack, Allen\\\")); } fn main() { let mut v = NAMES.lock().unwrap(); v.push_str(\\\", Myth\\\"); println!(\\\"{}\\\",v); }\",\"当然，每次访问时会有轻微的性能损失，为了支持多线程这是不可避免的。\"]},\"67\":{\"h\":\"Ref\",\"t\":[\"https://github.com/rustcn-org/rust-algos/blob/fbcdccf3e8178a9039329562c0de0fd01a3372fb/src/unsafe/self-ref.md\",\"https://crates.io/crates/lazy_static\",\"https://course.rs/advance/global-variable.html\"]},\"68\":{\"h\":\"记录一些Rust中的小技巧\"},\"69\":{\"h\":\"使用指定的Rust版本\",\"t\":[\"对于管理多版本，直接使用Rustup即可。在cmd中输入\",\"rustup show\",\"即可查看已安装的工具链版本，以及现在使用的默认版本。使用\",\"rustup default 1.72.0-x86_64-pc-windows-gnu\",\"即可切换到对应版本。\",\"但如果不想切换默认Rust版本，只想为某一项目使用指定版本，可以在项目所在目录新建rust-toolchain文件，在第一行写上版本限制，例如：\",\"1.76.0\",\"1.76.0-x86_64-pc-windows-gnu\",\"如果需要更详细地指定工具链版本，可以新建一个rust-toolchain.toml文件，例如：\",\"[toolchain] channel = \\\"nightly-2024-11-07\\\" components = [ \\\"rustfmt\\\", \\\"rust-analyzer\\\", \\\"miri\\\", \\\"rust-docs\\\", \\\"clippy\\\", \\\"rust-src\\\"] profile = \\\"default\\\"\",\"以上配置将在此项目中启用nightly特性。\"]},\"70\":{\"h\":\"pub关键字\",\"t\":[\"pub关键字能控制字段、方法的可访问性，且能限定到在特定模块。\",\"/// 在本项目内public pub(crate) fn hello() { } /// 仅在mod `ir`内public pub struct Graph { pub(in crate::ir) globals: GlobalValueMapCell, pub(in crate::ir) func_tys: FuncTypeMapCell, values: HashMap<Value, ValueData>, bbs: HashMap<BasicBlock, BasicBlockData>, }\"]},\"71\":{\"h\":\"Ref\",\"t\":[\"https://github.com/pku-minic/koopa/blob/master/src/ir/dfg.rs#L15\"]},\"72\":{\"h\":\"WSL备忘录\",\"t\":[\"在做计网实验时，之前用的一直都是VMware，最近偶然接触到WSL(Windows Subsystem for Linux)，在此记录基本配置过程。\"]},\"73\":{\"h\":\"基本配置\",\"t\":[\"介绍视频（需要武林绝学，或者b站随便找个都行）\",\"支持的GUI应用：https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/gui-apps\",\"取消自动挂载：https://devblogs.microsoft.com/commandline/automatically-configuring-wsl/\"]},\"74\":{\"h\":\"迁移\",\"t\":[\"wsl默认安装在C盘，建议趁刚安装时迁移到容量充足的其他盘\",\"查看当前安装的所有WSL\",\"wsl --list -v\",\"左边的*表示默认项\",\"先导出WSL到指定路径\",\"wsl --export Ubuntu-20.04 E:\\\\wsl\\\\Ubuntu-20.04.tar\",\"删除你要导出的wsl\",\"wsl --unregister Ubuntu-20.04\",\"从第2步中导出的tar文件导入wsl，这里指定了version为2\",\"格式：wsl --import <WSL名称> <导入后wsl工作路径> <wsl压缩包路径>\",\"wsl --import Ubuntu-20.04 E:\\\\wsl\\\\ubuntu-20.04 E:\\\\wsl\\\\Ubuntu-20.04.tar --version 2\",\"配置先前的默认登录用户\",\"格式：<EXE> config --default-user <用户名>\",\"ubuntu2004.exe config --default-user xanadu13\",\"如果是kali-linux：\",\"kali.exe config --default-user xanadu13\"]},\"75\":{\"h\":\"常用指令\",\"t\":[\"软链接挂载文件夹：\",\"ln -s /mnt/e/wsl/share ~/share\",\"运行指定wsl：\",\"wsl -d kali-linux\"]},\"76\":{\"h\":\"连接wsl桌面\",\"t\":[\"目前已知kali-linux wsl可以通过类似远程桌面的方式连接，具体见我的另一篇文章：\"]},\"77\":{\"h\":\"Ref\",\"t\":[\"https://www.jianshu.com/p/2a2d16029dc2\"]},\"78\":{\"h\":\"在WSL中使用Docker\",\"t\":[\"今天尝试在WSL中使用Docker，运行\",\"docker run hello-world\",\"获得报错：\",\"Get https://registry-1.docker.io/v2/: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaitin headers)\",\"尝试了很多解决方案，比如更改docker镜像源、修改/etc/docker/daemon.json、配置/etc/resolv.conf中的nameserver为8.8.8.8、在前面加sudo等等，都没有成功。\",\"最终解决方案：\",\"在/etc/systemd/system/docker.service.d/proxy.conf添加\",\"[Service] Environment=\\\"HTTP_PROXY=http://127.0.0.1:7890/\\\" Environment=\\\"HTTPS_PROXY=http://127.0.0.1:7890/\\\" Environment=\\\"NO_PROXY=localhost,127.0.0.1\\\"\",\"其中127.0.0.1和7890分别为你的武林绝学的代理服务器默认地址、默认端口。\",\"然后重启服务：\",\"sudo systemctl daemon-reload sudo systemctl restart docker\",\"再执行docker run hello-world，顺利成功！\"]},\"79\":{\"h\":\"在WSL中使用kali-linux踩坑记录\"},\"80\":{\"h\":\"安装kali-linux\",\"t\":[\"wsl --install kali-linux\"]},\"81\":{\"h\":\"安装黑科技kex\",\"t\":[\"sudo apt install kali-win-kex\"]},\"82\":{\"h\":\"运行kex\",\"t\":[\"按照视频里说的尝试运行kex --esm --ip -sound会提示找不到命令，如果直接运行kex，输完密码，等待大概十秒钟后，提示开启成功：\",\"但是TigerVNC连接不上：\",\"google了好久，找到一个遇到相同问题的： https://www.reddit.com/r/bashonubuntuonwindows/comments/icu9ks/why_winkex_does_not_working_please_help_me/?rdt=50615\",\"但是下面的回答没有帮助。\",\"再次搜索一番，发现了这个帖子：https://access.redhat.com/solutions/5011721\",\"我们知道，linux里各种设备都是文件，输密码也会有一个密码文件。而在非sudo下试图登录时没有读取密码文件的权限，因此才有“Opening password file failed”。\",\"尝试sudo kex之后，发现可以正常进入kali-linux桌面：\",\"kali-linux桌面\",\"但是这里和默认用户下的桌面、各种文件夹是不互通的，而且笔者也不喜欢在root下运行wsl，因为此时你可以随意删除主机系统文件。\"]},\"83\":{\"h\":\"最终解决方法\",\"t\":[\"在主机上安装TigerVNC：https://sourceforge.net/projects/tigervnc\",\"在kali-linux的bash中执行kex，启动win-kex server，然后直接使用TigerVNC连接wsl即可。\",\"这里的端口号(5901)填win-kex server启动后开放给你的端口。\"]},\"84\":{\"h\":\"kali-linux wsl自启动问题\",\"t\":[\"开始使用wsl后，有一次偶然发现kali-linux会自启动，长期处于Running状态。（运行wsl --list -v查看wsl状态）\",\"一开始google搜索“关闭kali-linux自启动”相关内容，粗略浏览后都不符合我的情况，因为正常情况下未特殊配置wsl的话，kali-linux是不会自启动的。\",\"后面偶然找到了这篇文章：\",\"https://superuser.com/questions/1746617/wsl2-kali-wont-stop-and-it-always-starts-on-boot/1746987#1746987\",\"照着做就能发现，是Armoury Crate一直在后台扫盘，意外扫到wsl文件导致kali-linux自启动。\",\"使用G-Helper替代Armoury Crate后，问题成功解决。（卸载还挺麻烦，得先去官网下专用卸载工具，卸载完后重启并进入BIOS，关闭自动开启Armoury Crate的选项，然后再重启）\",\"卸载之后没想到还有意外收获，之前我的笔记本一般用不了一上午，到上午第五节课基本就没电了，现在续航显示来到了恐怖的8小时：\",\"图中我已经用了3个半小时，估计实际续航在6-7小时左右。\",\"最后，放一张当天的浏览记录，不多作评价了。\"]},\"85\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"86\":{\"h\":\"Posts\"},\"87\":{\"h\":\"Algo\"},\"88\":{\"h\":\"Hdoj\"},\"89\":{\"h\":\"Cpp\"},\"90\":{\"h\":\"Rust\"},\"91\":{\"h\":\"Wsl\"}},\"dirtCount\":0,\"index\":[[\"评价\",{\"1\":{\"84\":1}}],[\"放\",{\"1\":{\"84\":1}}],[\"放弃\",{\"1\":{\"18\":1,\"23\":1}}],[\"半小时\",{\"1\":{\"84\":1}}],[\"恐怖\",{\"1\":{\"84\":1}}],[\"显示\",{\"1\":{\"84\":1}}],[\"续航\",{\"1\":{\"84\":2}}],[\"课\",{\"1\":{\"84\":1}}],[\"收获\",{\"1\":{\"84\":1}}],[\"收到\",{\"1\":{\"16\":1}}],[\"选项\",{\"1\":{\"84\":1}}],[\"选择\",{\"0\":{\"47\":1},\"1\":{\"16\":1,\"18\":1,\"27\":4,\"28\":1,\"47\":1}}],[\"专用\",{\"1\":{\"84\":1}}],[\"官网\",{\"1\":{\"84\":1}}],[\"得\",{\"1\":{\"84\":1}}],[\"得到\",{\"1\":{\"4\":1}}],[\"麻烦\",{\"1\":{\"84\":1}}],[\"挺\",{\"1\":{\"84\":1}}],[\"卸载\",{\"1\":{\"84\":4}}],[\"扫到\",{\"1\":{\"84\":1}}],[\"扫盘\",{\"1\":{\"84\":1}}],[\"意外\",{\"1\":{\"84\":2}}],[\"篇文章\",{\"1\":{\"84\":1}}],[\"符合\",{\"1\":{\"84\":1}}],[\"符号\",{\"1\":{\"4\":2,\"5\":1,\"9\":1}}],[\"符号串\",{\"1\":{\"4\":1,\"12\":1}}],[\"浏览\",{\"1\":{\"84\":2}}],[\"粗略\",{\"1\":{\"84\":1}}],[\"处于\",{\"1\":{\"84\":1}}],[\"处理\",{\"1\":{\"36\":1}}],[\"处理器\",{\"1\":{\"27\":2}}],[\"填\",{\"1\":{\"83\":1}}],[\"机上安装\",{\"1\":{\"83\":1}}],[\"机器\",{\"1\":{\"42\":1}}],[\"主\",{\"1\":{\"83\":1}}],[\"主机\",{\"1\":{\"82\":1}}],[\"主页\",{\"0\":{\"0\":1}}],[\"喜欢\",{\"1\":{\"82\":1}}],[\"互通\",{\"1\":{\"82\":1}}],[\"才有\",{\"1\":{\"82\":1}}],[\"才能\",{\"1\":{\"16\":1,\"35\":1}}],[\"权限\",{\"1\":{\"82\":1}}],[\"各种\",{\"1\":{\"82\":2}}],[\"知道\",{\"1\":{\"82\":1}}],[\"帖子\",{\"1\":{\"82\":1}}],[\"十秒钟\",{\"1\":{\"82\":1}}],[\"密码文件\",{\"1\":{\"82\":2}}],[\"密码\",{\"1\":{\"82\":2}}],[\"里\",{\"1\":{\"82\":2}}],[\"按照\",{\"1\":{\"82\":1}}],[\"科技\",{\"0\":{\"81\":1}}],[\"黑\",{\"0\":{\"81\":1}}],[\"坑\",{\"0\":{\"79\":1}}],[\"坑时\",{\"1\":{\"55\":1}}],[\"踩\",{\"0\":{\"79\":1}}],[\"服务\",{\"1\":{\"78\":1}}],[\"端口号\",{\"1\":{\"83\":1}}],[\"端口\",{\"1\":{\"78\":1,\"83\":1}}],[\"添加\",{\"1\":{\"78\":1}}],[\"源\",{\"1\":{\"78\":1}}],[\"镜像\",{\"1\":{\"78\":1}}],[\"镜像文件\",{\"0\":{\"24\":1},\"1\":{\"27\":1}}],[\"获得\",{\"1\":{\"78\":1}}],[\"今天\",{\"1\":{\"78\":1}}],[\"见\",{\"1\":{\"76\":1}}],[\"远程桌面\",{\"1\":{\"76\":1}}],[\"桌面\",{\"0\":{\"76\":1},\"1\":{\"82\":3}}],[\"连接\",{\"0\":{\"76\":1},\"1\":{\"76\":1,\"82\":1,\"83\":1}}],[\"软\",{\"1\":{\"75\":1}}],[\"软件\",{\"1\":{\"15\":1}}],[\"登录\",{\"1\":{\"74\":1,\"82\":1}}],[\"压缩包\",{\"1\":{\"74\":1}}],[\"工作\",{\"1\":{\"74\":1}}],[\"工具\",{\"1\":{\"69\":2,\"84\":1}}],[\"名称\",{\"1\":{\"74\":1}}],[\"格式\",{\"1\":{\"74\":2}}],[\"格子\",{\"1\":{\"35\":1}}],[\"导致\",{\"1\":{\"84\":1}}],[\"导入\",{\"1\":{\"74\":2}}],[\"导出\",{\"1\":{\"74\":2}}],[\"充足\",{\"1\":{\"74\":1}}],[\"趁刚\",{\"1\":{\"74\":1}}],[\"建议\",{\"1\":{\"74\":1}}],[\"迁移\",{\"0\":{\"74\":1},\"1\":{\"74\":1}}],[\"zh\",{\"1\":{\"73\":1}}],[\"zhihu\",{\"1\":{\"54\":1}}],[\"随意\",{\"1\":{\"82\":1}}],[\"随便\",{\"1\":{\"73\":1}}],[\"随机\",{\"0\":{\"47\":1},\"1\":{\"47\":2,\"53\":2}}],[\"随机数\",{\"1\":{\"45\":3,\"46\":1}}],[\"站\",{\"1\":{\"73\":1}}],[\"绝学\",{\"1\":{\"73\":1,\"78\":1}}],[\"武林\",{\"1\":{\"73\":1,\"78\":1}}],[\"视频\",{\"1\":{\"73\":1,\"82\":1}}],[\"偶然\",{\"1\":{\"72\":1,\"84\":2}}],[\"计网\",{\"1\":{\"72\":1}}],[\"计算\",{\"0\":{\"43\":1},\"1\":{\"43\":1}}],[\"计算机\",{\"1\":{\"16\":2}}],[\"计算机网络\",{\"1\":{\"16\":1}}],[\"本\",{\"1\":{\"70\":1}}],[\"本地\",{\"1\":{\"18\":1}}],[\"模块\",{\"1\":{\"70\":1}}],[\"模板\",{\"0\":{\"51\":1},\"1\":{\"44\":1,\"45\":1,\"47\":1,\"51\":3}}],[\"限定\",{\"1\":{\"70\":1}}],[\"限制\",{\"1\":{\"40\":1,\"69\":1}}],[\"性\",{\"1\":{\"70\":1}}],[\"性能\",{\"1\":{\"56\":1,\"66\":1}}],[\"控制\",{\"1\":{\"70\":1}}],[\"控制器\",{\"1\":{\"27\":1}}],[\"启用\",{\"1\":{\"69\":1}}],[\"启动\",{\"0\":{\"16\":1,\"28\":1,\"65\":1},\"1\":{\"16\":4,\"83\":2}}],[\"配置\",{\"0\":{\"73\":1},\"1\":{\"69\":1,\"72\":1,\"74\":1,\"78\":1,\"84\":1}}],[\"详细\",{\"1\":{\"69\":1}}],[\"详见\",{\"1\":{\"21\":1}}],[\"更改\",{\"1\":{\"78\":1}}],[\"更\",{\"1\":{\"69\":1}}],[\"目前\",{\"1\":{\"76\":1}}],[\"目录\",{\"1\":{\"69\":1}}],[\"目标\",{\"1\":{\"56\":3}}],[\"某\",{\"1\":{\"69\":1}}],[\"现在\",{\"1\":{\"69\":1,\"84\":1}}],[\"链\",{\"1\":{\"69\":2}}],[\"链接\",{\"1\":{\"15\":1,\"75\":1}}],[\"已知\",{\"1\":{\"76\":1}}],[\"已\",{\"1\":{\"69\":1}}],[\"已经\",{\"1\":{\"15\":1,\"16\":1,\"22\":1,\"56\":1,\"84\":1}}],[\"查看\",{\"1\":{\"69\":1,\"74\":1,\"84\":1}}],[\"查找\",{\"1\":{\"16\":1}}],[\"支持\",{\"1\":{\"66\":1,\"73\":1}}],[\"损失\",{\"1\":{\"66\":1}}],[\"轻微\",{\"1\":{\"66\":1}}],[\"裸\",{\"1\":{\"65\":1}}],[\"社区\",{\"1\":{\"65\":1}}],[\"几种\",{\"1\":{\"64\":1}}],[\"脏\",{\"1\":{\"64\":1}}],[\"读取\",{\"1\":{\"82\":1}}],[\"读\",{\"1\":{\"64\":1}}],[\"线程\",{\"1\":{\"64\":2}}],[\"线性\",{\"0\":{\"32\":1},\"1\":{\"10\":2,\"32\":2,\"33\":1}}],[\"保护\",{\"1\":{\"64\":1}}],[\"保证\",{\"1\":{\"55\":1}}],[\"理解\",{\"1\":{\"64\":1}}],[\"容易\",{\"1\":{\"64\":2}}],[\"容量\",{\"1\":{\"27\":1,\"74\":1}}],[\"像\",{\"1\":{\"64\":1}}],[\"考量\",{\"1\":{\"64\":1}}],[\"考虑\",{\"1\":{\"33\":1}}],[\"全局\",{\"1\":{\"64\":1}}],[\"全局变量\",{\"0\":{\"64\":1},\"1\":{\"64\":2}}],[\"全部\",{\"1\":{\"16\":1}}],[\"转换\",{\"1\":{\"63\":1}}],[\"零\",{\"1\":{\"62\":1}}],[\"零步\",{\"1\":{\"4\":2}}],[\"变为\",{\"0\":{\"57\":1}}],[\"局部变量\",{\"0\":{\"57\":1}}],[\"拥有\",{\"1\":{\"56\":1}}],[\"祖先\",{\"1\":{\"56\":1}}],[\"父\",{\"1\":{\"56\":3}}],[\"父子\",{\"1\":{\"12\":1,\"13\":1}}],[\"缩进\",{\"1\":{\"56\":1}}],[\"同时\",{\"1\":{\"56\":2,\"64\":2}}],[\"寻找\",{\"1\":{\"56\":1}}],[\"树上\",{\"1\":{\"56\":2}}],[\"树根\",{\"1\":{\"11\":1}}],[\"拿走\",{\"1\":{\"56\":1}}],[\"回答\",{\"1\":{\"82\":1}}],[\"回收\",{\"1\":{\"56\":1}}],[\"回溯\",{\"1\":{\"40\":1}}],[\"替换\",{\"1\":{\"56\":2}}],[\"替代\",{\"0\":{\"46\":1},\"1\":{\"56\":2,\"84\":1}}],[\"赋给\",{\"1\":{\"56\":1}}],[\"将\",{\"0\":{\"57\":1,\"61\":1,\"62\":1},\"1\":{\"56\":1,\"63\":1,\"69\":1}}],[\"继任者\",{\"1\":{\"56\":8}}],[\"继续\",{\"1\":{\"16\":1}}],[\"否则\",{\"1\":{\"56\":1}}],[\"移除\",{\"1\":{\"56\":2}}],[\"移动\",{\"1\":{\"35\":1}}],[\"除数\",{\"1\":{\"62\":1}}],[\"除\",{\"1\":{\"56\":2}}],[\"历来\",{\"1\":{\"56\":1}}],[\"成功\",{\"1\":{\"56\":2,\"78\":2,\"82\":1,\"84\":1}}],[\"成员\",{\"1\":{\"43\":2}}],[\"插入\",{\"1\":{\"56\":1}}],[\"节点\",{\"1\":{\"56\":37}}],[\"`\",{\"1\":{\"56\":31,\"61\":2,\"65\":16,\"70\":2}}],[\"此时\",{\"1\":{\"82\":1}}],[\"此\",{\"1\":{\"56\":1,\"69\":1,\"72\":1}}],[\"此外\",{\"1\":{\"53\":1}}],[\"熟练\",{\"1\":{\"55\":1}}],[\"标准\",{\"1\":{\"55\":1,\"65\":1}}],[\"标记\",{\"1\":{\"32\":1,\"40\":1}}],[\"正常\",{\"1\":{\"82\":1,\"84\":1}}],[\"正确\",{\"1\":{\"55\":1}}],[\"正规\",{\"1\":{\"10\":1}}],[\"迅速\",{\"1\":{\"55\":1}}],[\"引用\",{\"0\":{\"56\":1},\"1\":{\"55\":1}}],[\"引入\",{\"1\":{\"45\":1}}],[\"借用\",{\"1\":{\"55\":1}}],[\"技巧\",{\"0\":{\"68\":1},\"1\":{\"55\":1}}],[\"学到\",{\"1\":{\"55\":1}}],[\"学习曲线\",{\"1\":{\"55\":1}}],[\"学习\",{\"0\":{\"55\":1}}],[\"运用\",{\"1\":{\"55\":1}}],[\"运行\",{\"0\":{\"66\":1,\"82\":1},\"1\":{\"16\":2,\"26\":3,\"75\":1,\"78\":1,\"82\":3,\"84\":1}}],[\"而\",{\"1\":{\"55\":1,\"82\":1}}],[\"而且\",{\"1\":{\"16\":1,\"56\":1,\"82\":1}}],[\"困难\",{\"1\":{\"55\":1}}],[\"陡峭\",{\"1\":{\"55\":1}}],[\"相同\",{\"1\":{\"82\":1}}],[\"相关\",{\"0\":{\"60\":1},\"1\":{\"84\":1}}],[\"相当\",{\"1\":{\"55\":1}}],[\"相对\",{\"1\":{\"11\":1}}],[\"代理服务器\",{\"1\":{\"78\":1}}],[\"代表\",{\"1\":{\"56\":1}}],[\"代价\",{\"1\":{\"55\":1}}],[\"代码\",{\"1\":{\"42\":1,\"47\":1,\"50\":1}}],[\"背后\",{\"1\":{\"55\":1}}],[\"优点\",{\"1\":{\"55\":1}}],[\"优化\",{\"1\":{\"33\":1,\"40\":1,\"46\":1,\"53\":1}}],[\"诸多\",{\"1\":{\"55\":1}}],[\"管理\",{\"1\":{\"55\":1,\"69\":1}}],[\"管理员\",{\"1\":{\"16\":1,\"26\":1}}],[\"手动\",{\"1\":{\"55\":1}}],[\"眼前一亮\",{\"1\":{\"55\":1}}],[\"人\",{\"1\":{\"55\":1}}],[\"让\",{\"1\":{\"55\":1}}],[\"强\",{\"1\":{\"55\":1}}],[\"强度\",{\"1\":{\"53\":1}}],[\"强大\",{\"1\":{\"44\":1,\"65\":1}}],[\"提示\",{\"1\":{\"82\":2}}],[\"提升\",{\"1\":{\"53\":1}}],[\"提到\",{\"1\":{\"45\":1}}],[\"固定\",{\"1\":{\"53\":1}}],[\"采用\",{\"1\":{\"53\":1}}],[\"常用\",{\"0\":{\"75\":1},\"1\":{\"64\":1}}],[\"常量\",{\"1\":{\"53\":1}}],[\"常数\",{\"1\":{\"33\":1}}],[\"结果\",{\"1\":{\"53\":1}}],[\"结束\",{\"1\":{\"36\":1}}],[\"图中\",{\"1\":{\"84\":1}}],[\"图灵\",{\"1\":{\"51\":1}}],[\"图案\",{\"1\":{\"28\":1}}],[\"证明\",{\"1\":{\"51\":1}}],[\"巧妙\",{\"1\":{\"51\":1}}],[\"范式\",{\"1\":{\"51\":1}}],[\"范围\",{\"1\":{\"30\":1}}],[\"广泛应用\",{\"1\":{\"51\":1}}],[\"契\",{\"0\":{\"51\":1}}],[\"波\",{\"0\":{\"51\":1}}],[\"斐\",{\"0\":{\"51\":1}}],[\"如何\",{\"1\":{\"55\":2}}],[\"如下\",{\"1\":{\"50\":1}}],[\"如果\",{\"1\":{\"15\":1,\"16\":4,\"23\":1,\"26\":1,\"33\":1,\"40\":3,\"56\":2,\"64\":1,\"69\":2,\"74\":1,\"82\":1}}],[\"汇编\",{\"1\":{\"50\":1}}],[\"求值\",{\"1\":{\"50\":1}}],[\"阶乘\",{\"0\":{\"50\":1}}],[\"—\",{\"0\":{\"50\":2,\"51\":2}}],[\"初始化\",{\"0\":{\"65\":1}}],[\"初始值\",{\"1\":{\"16\":1}}],[\"初探\",{\"0\":{\"50\":1}}],[\"偏\",{\"1\":{\"47\":1}}],[\"利用\",{\"1\":{\"47\":1}}],[\"异或\",{\"1\":{\"47\":1}}],[\"场景\",{\"1\":{\"46\":1}}],[\"应用\",{\"1\":{\"46\":1,\"73\":1}}],[\"应该\",{\"1\":{\"40\":1}}],[\"尽管\",{\"1\":{\"46\":1}}],[\"特定\",{\"1\":{\"70\":1}}],[\"特点\",{\"1\":{\"55\":1}}],[\"特性\",{\"0\":{\"49\":1},\"1\":{\"55\":1,\"69\":1}}],[\"特化\",{\"1\":{\"47\":1}}],[\"特别\",{\"1\":{\"46\":1}}],[\"特殊\",{\"1\":{\"5\":1,\"84\":1}}],[\"算法\",{\"1\":{\"46\":1,\"51\":2}}],[\"宏\",{\"1\":{\"46\":1,\"53\":1}}],[\"长期\",{\"1\":{\"84\":1}}],[\"长度\",{\"1\":{\"46\":1,\"53\":1}}],[\"长方形\",{\"1\":{\"35\":1}}],[\"返回\",{\"1\":{\"46\":1,\"53\":1,\"56\":11}}],[\"rdt\",{\"1\":{\"82\":1}}],[\"running\",{\"1\":{\"84\":1}}],[\"run\",{\"1\":{\"78\":2}}],[\"rustfmt\",{\"1\":{\"69\":1}}],[\"rustup\",{\"1\":{\"69\":3}}],[\"rustcn\",{\"1\":{\"67\":1}}],[\"rust\",{\"0\":{\"55\":1,\"68\":1,\"69\":1,\"90\":1},\"1\":{\"55\":2,\"64\":1,\"65\":1,\"67\":1,\"69\":6}}],[\"raw\",{\"1\":{\"56\":3}}],[\"random\",{\"1\":{\"46\":1,\"54\":1}}],[\"rand\",{\"1\":{\"46\":3}}],[\"rchild\",{\"1\":{\"56\":5}}],[\"right\",{\"1\":{\"56\":15}}],[\"root\",{\"1\":{\"56\":17,\"82\":1}}],[\"rotr\",{\"1\":{\"46\":1}}],[\"rotl\",{\"1\":{\"46\":2}}],[\"rs\",{\"1\":{\"56\":1,\"67\":1,\"71\":1}}],[\"rsp\",{\"1\":{\"50\":1}}],[\"rbp\",{\"1\":{\"50\":4}}],[\"r\",{\"1\":{\"46\":5,\"56\":9,\"82\":1}}],[\"redhat\",{\"1\":{\"82\":1}}],[\"reddit\",{\"1\":{\"82\":1}}],[\"request\",{\"1\":{\"78\":1}}],[\"require\",{\"1\":{\"21\":3}}],[\"reload\",{\"1\":{\"78\":1}}],[\"relative\",{\"1\":{\"61\":3}}],[\"releases\",{\"1\":{\"21\":1}}],[\"repeat\",{\"1\":{\"56\":1}}],[\"replace\",{\"1\":{\"56\":4}}],[\"removing\",{\"1\":{\"56\":1}}],[\"remove\",{\"1\":{\"56\":5}}],[\"ret\",{\"1\":{\"50\":1}}],[\"returns\",{\"1\":{\"65\":2}}],[\"return\",{\"1\":{\"31\":1,\"32\":1,\"33\":1,\"40\":2,\"45\":2,\"46\":9,\"50\":1,\"53\":5,\"56\":4}}],[\"restart\",{\"1\":{\"78\":1}}],[\"resolv\",{\"1\":{\"78\":1}}],[\"res\",{\"1\":{\"61\":2}}],[\"researchgate\",{\"1\":{\"54\":1}}],[\"reset\",{\"1\":{\"18\":1}}],[\"result\",{\"0\":{\"61\":1,\"62\":1},\"1\":{\"45\":4,\"61\":1,\"62\":7,\"63\":4}}],[\"ref\",{\"0\":{\"29\":1,\"48\":1,\"54\":1,\"67\":1,\"71\":1,\"77\":1},\"1\":{\"65\":1,\"66\":1,\"67\":1}}],[\"rebuild\",{\"1\":{\"21\":1}}],[\"registry\",{\"1\":{\"78\":1}}],[\"regedit\",{\"1\":{\"16\":1}}],[\"regular\",{\"1\":{\"10\":1}}],[\"超过\",{\"1\":{\"45\":1}}],[\"参数\",{\"1\":{\"45\":2,\"53\":1}}],[\"指针\",{\"0\":{\"56\":1},\"1\":{\"56\":1,\"65\":1}}],[\"指定\",{\"0\":{\"69\":1},\"1\":{\"45\":1,\"56\":5,\"69\":2,\"74\":2,\"75\":1}}],[\"指令\",{\"0\":{\"19\":1,\"75\":1},\"1\":{\"16\":1,\"20\":1}}],[\"额外\",{\"1\":{\"45\":1}}],[\"若该\",{\"1\":{\"56\":1}}],[\"若\",{\"1\":{\"45\":1,\"56\":6}}],[\"若干个\",{\"1\":{\"7\":2}}],[\"嵌套\",{\"1\":{\"45\":1}}],[\"较大\",{\"1\":{\"45\":1}}],[\"基于\",{\"1\":{\"45\":1}}],[\"基本\",{\"0\":{\"73\":1},\"1\":{\"40\":1,\"72\":1,\"84\":1}}],[\"基本上\",{\"1\":{\"15\":1}}],[\"高性能\",{\"1\":{\"55\":1}}],[\"高\",{\"1\":{\"45\":1}}],[\"高级\",{\"0\":{\"49\":1},\"1\":{\"9\":1}}],[\"乘以\",{\"1\":{\"45\":2}}],[\"位\",{\"1\":{\"45\":2}}],[\"位置\",{\"1\":{\"27\":2,\"40\":1}}],[\"低\",{\"1\":{\"45\":1}}],[\"^\",{\"1\":{\"45\":2,\"46\":12,\"53\":2}}],[\"64\",{\"1\":{\"69\":2}}],[\"63433547\",{\"1\":{\"65\":1}}],[\"600\",{\"1\":{\"45\":1}}],[\"60\",{\"1\":{\"45\":1}}],[\"6\",{\"1\":{\"45\":1,\"84\":1}}],[\"期间\",{\"1\":{\"45\":1,\"50\":1}}],[\"期末\",{\"0\":{\"2\":1}}],[\"消除\",{\"1\":{\"45\":1,\"53\":1}}],[\"消失\",{\"1\":{\"22\":1}}],[\"来到\",{\"1\":{\"84\":1}}],[\"来\",{\"1\":{\"45\":1,\"47\":1,\"56\":1}}],[\"硬\",{\"1\":{\"45\":1}}],[\"硬件\",{\"1\":{\"27\":1}}],[\"简单\",{\"1\":{\"56\":1,\"64\":1}}],[\"简易\",{\"0\":{\"53\":1},\"1\":{\"45\":1}}],[\"简体中文\",{\"1\":{\"28\":1}}],[\"过度\",{\"1\":{\"46\":1,\"53\":1}}],[\"过\",{\"1\":{\"45\":1}}],[\"过程\",{\"1\":{\"33\":1,\"72\":1}}],[\"另\",{\"1\":{\"45\":1,\"76\":1}}],[\"原生\",{\"0\":{\"56\":1}}],[\"原始\",{\"0\":{\"45\":1}}],[\"原理\",{\"0\":{\"2\":1}}],[\"外部\",{\"1\":{\"44\":1}}],[\"任何\",{\"1\":{\"44\":1}}],[\"任意\",{\"1\":{\"35\":1}}],[\"元\",{\"0\":{\"51\":1},\"1\":{\"44\":1,\"51\":2}}],[\"具有\",{\"1\":{\"44\":1,\"55\":1}}],[\"具体\",{\"1\":{\"15\":1,\"55\":1,\"76\":1}}],[\"实际\",{\"1\":{\"84\":1}}],[\"实践\",{\"1\":{\"55\":1}}],[\"实测\",{\"1\":{\"45\":1}}],[\"实例\",{\"0\":{\"49\":1},\"1\":{\"45\":1}}],[\"实现\",{\"0\":{\"44\":1,\"56\":1},\"1\":{\"44\":1,\"45\":1,\"47\":1,\"56\":2}}],[\"实验\",{\"1\":{\"16\":2,\"72\":1}}],[\"混淆\",{\"0\":{\"44\":1,\"53\":1},\"1\":{\"44\":1,\"45\":1}}],[\"生命周期\",{\"0\":{\"57\":1},\"1\":{\"55\":1}}],[\"生成\",{\"1\":{\"45\":2,\"47\":1,\"50\":1}}],[\"生\",{\"0\":{\"44\":1}}],[\"生效\",{\"1\":{\"16\":1}}],[\"则\",{\"1\":{\"43\":1,\"56\":7}}],[\"数据\",{\"1\":{\"56\":4,\"64\":1}}],[\"数列\",{\"0\":{\"51\":1}}],[\"数\",{\"1\":{\"43\":2,\"56\":1}}],[\"数量\",{\"1\":{\"27\":1,\"40\":1,\"56\":1}}],[\"联合\",{\"1\":{\"43\":1}}],[\"规则\",{\"1\":{\"43\":1}}],[\"遵循\",{\"1\":{\"43\":1}}],[\"判断\",{\"1\":{\"42\":1}}],[\"比如\",{\"1\":{\"42\":1,\"78\":1}}],[\"比较\",{\"1\":{\"40\":2}}],[\"段\",{\"1\":{\"42\":1}}],[\"字段\",{\"1\":{\"64\":1,\"70\":1}}],[\"字\",{\"1\":{\"42\":1}}],[\"字符串\",{\"0\":{\"44\":1,\"53\":1},\"1\":{\"44\":1,\"45\":1,\"47\":1,\"53\":1,\"56\":2}}],[\"字符\",{\"1\":{\"36\":1,\"56\":1}}],[\"共用\",{\"0\":{\"42\":1},\"1\":{\"42\":1}}],[\"&\",{\"1\":{\"40\":14,\"45\":2,\"46\":6,\"56\":16,\"61\":1,\"65\":8}}],[\"8.8.8.8\",{\"1\":{\"78\":1}}],[\"8\",{\"1\":{\"40\":1,\"43\":1,\"46\":2,\"53\":1,\"84\":1}}],[\"少\",{\"1\":{\"40\":1}}],[\"推测\",{\"1\":{\"40\":1}}],[\"推导\",{\"1\":{\"4\":1,\"6\":1}}],[\"效果\",{\"1\":{\"40\":1}}],[\"效率\",{\"1\":{\"33\":1,\"55\":1}}],[\"太短\",{\"1\":{\"40\":1}}],[\"改变\",{\"1\":{\"40\":2}}],[\"与\",{\"1\":{\"40\":1}}],[\"距离\",{\"1\":{\"40\":1}}],[\"曼哈顿\",{\"1\":{\"40\":1}}],[\"终点\",{\"1\":{\"40\":1}}],[\"终结\",{\"1\":{\"4\":2,\"5\":1,\"9\":1}}],[\"奇偶性\",{\"1\":{\"40\":4}}],[\"−\",{\"1\":{\"40\":1}}],[\"方法\",{\"0\":{\"83\":1},\"1\":{\"59\":1,\"61\":1,\"62\":1,\"70\":1}}],[\"方格\",{\"1\":{\"40\":1}}],[\"方式\",{\"1\":{\"40\":1,\"47\":1,\"53\":1,\"64\":1,\"76\":1}}],[\"方块\",{\"1\":{\"36\":1}}],[\"剪枝\",{\"1\":{\"40\":4}}],[\"想\",{\"1\":{\"40\":2}}],[\"满意\",{\"1\":{\"40\":1}}],[\"满心欢喜\",{\"1\":{\"16\":1}}],[\"耗时\",{\"1\":{\"40\":2}}],[\"虽然\",{\"1\":{\"40\":1}}],[\"交了\",{\"1\":{\"40\":1}}],[\"思想\",{\"1\":{\"40\":1}}],[\"搜索\",{\"1\":{\"40\":1,\"82\":1,\"84\":1}}],[\"搜到\",{\"1\":{\"15\":2}}],[\"恢复\",{\"1\":{\"40\":1}}],[\"并\",{\"1\":{\"40\":1,\"46\":2,\"64\":1,\"84\":1}}],[\"访问\",{\"1\":{\"40\":1,\"66\":1,\"70\":1}}],[\"上午\",{\"1\":{\"84\":1}}],[\"上移\",{\"1\":{\"56\":2}}],[\"上述\",{\"1\":{\"47\":1}}],[\"上\",{\"1\":{\"40\":1,\"45\":1,\"56\":5,\"69\":1}}],[\"上下左右\",{\"1\":{\"35\":1}}],[\"上下文\",{\"1\":{\"8\":1,\"9\":1}}],[\"递归\",{\"0\":{\"46\":1},\"1\":{\"40\":1,\"45\":2,\"56\":1}}],[\"状态\",{\"1\":{\"40\":1,\"84\":2}}],[\"定义\",{\"1\":{\"40\":1,\"45\":1,\"64\":1}}],[\"步中\",{\"1\":{\"74\":1}}],[\"步\",{\"1\":{\"40\":1}}],[\"因为\",{\"1\":{\"40\":3,\"82\":1,\"84\":1}}],[\"因此\",{\"1\":{\"21\":1,\"35\":1,\"40\":2,\"46\":1,\"51\":1,\"53\":1,\"56\":1,\"82\":1}}],[\"明显\",{\"1\":{\"40\":1}}],[\"逃生\",{\"1\":{\"37\":1}}],[\"逃离\",{\"1\":{\"35\":2}}],[\"样例\",{\"1\":{\"37\":1,\"40\":1}}],[\"被\",{\"1\":{\"36\":1,\"51\":1,\"56\":4}}],[\"起点\",{\"1\":{\"36\":1,\"40\":1}}],[\"起来\",{\"1\":{\"11\":1,\"12\":1}}],[\"墙\",{\"1\":{\"36\":1,\"40\":1}}],[\"布局\",{\"1\":{\"36\":1}}],[\"给\",{\"1\":{\"83\":1}}],[\"给出\",{\"1\":{\"36\":1}}],[\"给定\",{\"1\":{\"30\":1,\"56\":1}}],[\"7890\",{\"1\":{\"78\":3}}],[\"7\",{\"1\":{\"36\":1,\"43\":2,\"45\":2,\"84\":1}}],[\"7.\",{\"1\":{\"15\":3}}],[\"整数倍\",{\"1\":{\"43\":2}}],[\"整数\",{\"1\":{\"36\":1}}],[\"测试用例\",{\"1\":{\"36\":3}}],[\"测评\",{\"1\":{\"31\":1,\"32\":1,\"33\":1}}],[\"多\",{\"1\":{\"69\":1}}],[\"多线程\",{\"1\":{\"66\":1}}],[\"多种\",{\"0\":{\"47\":1},\"1\":{\"53\":1}}],[\"多个\",{\"1\":{\"36\":1,\"64\":1}}],[\"多于\",{\"1\":{\"4\":1}}],[\"向\",{\"1\":{\"35\":1}}],[\"恰好\",{\"1\":{\"35\":1,\"40\":1}}],[\"秒\",{\"1\":{\"35\":3}}],[\"门口\",{\"1\":{\"35\":1}}],[\"门\",{\"1\":{\"35\":1,\"36\":2}}],[\"迷宫\",{\"1\":{\"35\":2,\"36\":2}}],[\"×\",{\"1\":{\"35\":1}}],[\"大概\",{\"1\":{\"82\":1}}],[\"大规模\",{\"1\":{\"51\":1}}],[\"大致\",{\"1\":{\"50\":1}}],[\"大量\",{\"1\":{\"45\":1,\"55\":1}}],[\"大端序\",{\"1\":{\"42\":1}}],[\"大小\",{\"1\":{\"36\":1,\"43\":4}}],[\"大意\",{\"0\":{\"35\":1}}],[\"大部分\",{\"1\":{\"9\":1}}],[\"︎\",{\"1\":{\"33\":1}}],[\"↩\",{\"1\":{\"33\":1}}],[\"需\",{\"1\":{\"33\":1,\"55\":1}}],[\"需要\",{\"0\":{\"66\":1},\"1\":{\"15\":1,\"16\":1,\"21\":1,\"23\":1,\"26\":1,\"45\":1,\"56\":1,\"69\":1,\"73\":1}}],[\"取消\",{\"1\":{\"73\":1}}],[\"取\",{\"1\":{\"46\":1}}],[\"取出\",{\"1\":{\"33\":1}}],[\"取舍\",{\"1\":{\"15\":1}}],[\"%\",{\"1\":{\"32\":1,\"43\":2,\"45\":1,\"46\":1}}],[\"达到\",{\"1\":{\"32\":1}}],[\"合数\",{\"1\":{\"32\":1}}],[\"合并\",{\"1\":{\"18\":2}}],[\"避免\",{\"1\":{\"32\":1,\"46\":1,\"53\":1}}],[\"欧拉\",{\"0\":{\"32\":1}}],[\"用于\",{\"1\":{\"56\":1}}],[\"用\",{\"1\":{\"42\":1,\"72\":1,\"84\":2}}],[\"用时\",{\"1\":{\"31\":1,\"32\":1,\"33\":1}}],[\"用户名\",{\"1\":{\"20\":2,\"74\":1}}],[\"用户\",{\"0\":{\"20\":1},\"1\":{\"74\":1,\"82\":1}}],[\"!\",{\"1\":{\"31\":1,\"32\":1,\"33\":1,\"40\":2,\"56\":21,\"61\":1,\"62\":2,\"63\":1,\"65\":5,\"66\":2}}],[\"5901\",{\"1\":{\"83\":1}}],[\"5011721\",{\"1\":{\"82\":1}}],[\"50615\",{\"1\":{\"82\":1}}],[\"50\",{\"1\":{\"36\":1}}],[\"5\",{\"1\":{\"31\":1,\"32\":1,\"33\":1,\"38\":2,\"43\":2,\"45\":1,\"50\":1,\"63\":2}}],[\"5.0\",{\"1\":{\"62\":1}}],[\"5.\",{\"1\":{\"15\":1}}],[\"5.2.44\",{\"1\":{\"15\":1}}],[\"+\",{\"0\":{\"33\":1},\"1\":{\"31\":9,\"32\":3,\"33\":10,\"40\":14,\"45\":8,\"46\":5,\"51\":1,\"53\":3,\"56\":4}}],[\"<\",{\"1\":{\"31\":10,\"32\":9,\"33\":13,\"36\":4,\"40\":19,\"42\":1,\"43\":1,\"45\":12,\"46\":29,\"50\":2,\"51\":9,\"52\":1,\"53\":12,\"56\":4,\"61\":1,\"62\":5,\"63\":8,\"65\":4,\"66\":1,\"70\":2,\"74\":5}}],[\"#\",{\"0\":{\"63\":1},\"1\":{\"31\":2,\"32\":2,\"33\":3,\"40\":1,\"42\":1,\"43\":1,\"45\":1,\"46\":4,\"50\":1,\"51\":1,\"52\":1,\"53\":2,\"56\":1,\"62\":1,\"63\":1,\"71\":1,\"84\":1}}],[\"确定\",{\"1\":{\"31\":1}}],[\"确认\",{\"1\":{\"16\":2}}],[\"表示\",{\"1\":{\"31\":1,\"36\":1,\"37\":1,\"74\":1}}],[\"⋅\",{\"1\":{\"31\":1}}],[\"埃氏\",{\"0\":{\"31\":1,\"33\":1},\"1\":{\"33\":1}}],[\"小时\",{\"1\":{\"84\":2}}],[\"小端序\",{\"1\":{\"42\":1}}],[\"小狗\",{\"1\":{\"35\":2,\"37\":1}}],[\"小\",{\"0\":{\"68\":1},\"1\":{\"30\":1}}],[\"kex\",{\"0\":{\"81\":1,\"82\":1},\"1\":{\"81\":1,\"82\":3,\"83\":3}}],[\"kali\",{\"0\":{\"79\":1,\"80\":1,\"84\":1},\"1\":{\"74\":2,\"75\":1,\"76\":1,\"80\":1,\"81\":1,\"82\":2,\"83\":1,\"84\":5}}],[\"koopa\",{\"1\":{\"71\":1}}],[\"konelinx\",{\"1\":{\"48\":1,\"54\":1}}],[\"km\",{\"1\":{\"52\":2}}],[\"k\",{\"1\":{\"30\":1,\"46\":4}}],[\"输\",{\"1\":{\"82\":1}}],[\"输完\",{\"1\":{\"82\":1}}],[\"输出\",{\"1\":{\"30\":1,\"37\":1,\"40\":3}}],[\"输入\",{\"1\":{\"16\":3,\"18\":1,\"36\":2,\"69\":1}}],[\"每组\",{\"1\":{\"37\":1}}],[\"每行\",{\"1\":{\"36\":1}}],[\"每一秒\",{\"1\":{\"35\":1}}],[\"每次\",{\"1\":{\"30\":1,\"66\":1}}],[\"每个\",{\"1\":{\"10\":1,\"36\":1,\"47\":1}}],[\"询问\",{\"1\":{\"30\":1}}],[\"questions\",{\"1\":{\"65\":1,\"84\":1}}],[\"question\",{\"1\":{\"54\":1}}],[\"q\",{\"1\":{\"30\":1,\"31\":3,\"32\":3,\"33\":3}}],[\"题\",{\"1\":{\"40\":1}}],[\"题意\",{\"1\":{\"30\":1}}],[\"题目\",{\"0\":{\"35\":1},\"1\":{\"30\":1,\"34\":1,\"40\":1}}],[\"谷\",{\"1\":{\"30\":1}}],[\"洛\",{\"1\":{\"30\":1}}],[\"传送门\",{\"1\":{\"30\":1,\"34\":1}}],[\"筛\",{\"0\":{\"30\":1,\"31\":1,\"32\":2,\"33\":1},\"1\":{\"32\":1,\"33\":3}}],[\"素数\",{\"0\":{\"30\":1},\"1\":{\"30\":1,\"31\":1,\"33\":1}}],[\"系统文件\",{\"1\":{\"82\":1}}],[\"系统\",{\"1\":{\"28\":1}}],[\"接触\",{\"1\":{\"72\":1}}],[\"接近\",{\"1\":{\"33\":1}}],[\"接下来\",{\"1\":{\"28\":1,\"36\":1}}],[\"接着\",{\"1\":{\"16\":1,\"26\":1}}],[\"走\",{\"1\":{\"28\":1,\"35\":1,\"36\":1,\"40\":3}}],[\"苹果\",{\"1\":{\"28\":1}}],[\"加\",{\"1\":{\"78\":1}}],[\"加密\",{\"1\":{\"47\":1,\"53\":1}}],[\"加密算法\",{\"0\":{\"47\":1},\"1\":{\"47\":1,\"53\":2}}],[\"加入\",{\"1\":{\"27\":1}}],[\"加上\",{\"1\":{\"21\":1}}],[\"挂载\",{\"1\":{\"27\":1,\"73\":1,\"75\":1}}],[\"虚拟\",{\"1\":{\"27\":1}}],[\"虚拟机\",{\"0\":{\"23\":1,\"27\":1,\"28\":1},\"1\":{\"15\":1,\"27\":6}}],[\"磁盘\",{\"1\":{\"27\":3}}],[\"桥接\",{\"1\":{\"27\":1}}],[\"网络\",{\"1\":{\"27\":1}}],[\"网上\",{\"1\":{\"25\":1}}],[\"默认\",{\"1\":{\"69\":2,\"74\":3,\"78\":2,\"82\":1}}],[\"默认值\",{\"1\":{\"27\":3}}],[\"默认设置\",{\"1\":{\"27\":1}}],[\"内容\",{\"1\":{\"84\":1}}],[\"内\",{\"1\":{\"51\":1,\"70\":2}}],[\"内存\",{\"0\":{\"42\":1},\"1\":{\"27\":1,\"42\":1,\"55\":1}}],[\"内核\",{\"1\":{\"27\":1}}],[\"调整\",{\"1\":{\"27\":1}}],[\"情况\",{\"1\":{\"27\":1,\"46\":1,\"64\":1,\"84\":2}}],[\"存放\",{\"1\":{\"27\":3}}],[\"存在\",{\"1\":{\"21\":1,\"33\":1,\"40\":1,\"56\":2}}],[\"操作系统\",{\"1\":{\"27\":1}}],[\"映像\",{\"1\":{\"27\":1}}],[\"稍后\",{\"1\":{\"27\":1}}],[\"兼容性\",{\"1\":{\"27\":1}}],[\"新\",{\"1\":{\"56\":1}}],[\"新增\",{\"1\":{\"56\":1}}],[\"新开\",{\"1\":{\"27\":1}}],[\"新建\",{\"1\":{\"27\":1,\"69\":2}}],[\"新版\",{\"1\":{\"15\":1}}],[\"创建\",{\"0\":{\"27\":1},\"1\":{\"27\":2,\"56\":1}}],[\"忘关\",{\"1\":{\"26\":1}}],[\"关键字\",{\"0\":{\"70\":1},\"1\":{\"70\":1}}],[\"关键\",{\"1\":{\"55\":1}}],[\"关心\",{\"1\":{\"46\":1}}],[\"关闭\",{\"1\":{\"26\":1,\"84\":2}}],[\"关了\",{\"1\":{\"26\":1}}],[\"关机\",{\"1\":{\"16\":1}}],[\"先去\",{\"1\":{\"84\":1}}],[\"先前\",{\"1\":{\"74\":1}}],[\"先导\",{\"1\":{\"74\":1}}],[\"先\",{\"1\":{\"26\":1}}],[\"仓库\",{\"1\":{\"26\":1}}],[\"ubuntu2004\",{\"1\":{\"74\":1}}],[\"ubuntu\",{\"1\":{\"74\":6}}],[\"u32\",{\"1\":{\"65\":3}}],[\"uint32\",{\"1\":{\"46\":11}}],[\"u\",{\"1\":{\"42\":4}}],[\"unregister\",{\"1\":{\"74\":1}}],[\"unreachable\",{\"1\":{\"56\":1}}],[\"unwrap\",{\"1\":{\"61\":1,\"65\":4,\"66\":1}}],[\"unsafe\",{\"0\":{\"56\":1},\"1\":{\"56\":10,\"65\":1,\"67\":1}}],[\"unsigned\",{\"1\":{\"45\":9}}],[\"un2\",{\"1\":{\"43\":2}}],[\"un1\",{\"1\":{\"43\":2}}],[\"union\",{\"0\":{\"41\":1},\"1\":{\"42\":2,\"43\":5}}],[\"unlocker\",{\"0\":{\"26\":1}}],[\"usize\",{\"1\":{\"56\":3}}],[\"using\",{\"1\":{\"31\":1,\"32\":1,\"33\":1,\"40\":1,\"46\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1}}],[\"user\",{\"1\":{\"74\":3}}],[\"use\",{\"1\":{\"21\":1,\"65\":4,\"66\":2}}],[\"wont\",{\"1\":{\"84\":1}}],[\"working\",{\"1\":{\"82\":1}}],[\"workstation\",{\"1\":{\"25\":1,\"27\":1}}],[\"world\",{\"1\":{\"46\":1,\"53\":2,\"78\":2}}],[\"why\",{\"1\":{\"82\":1}}],[\"while\",{\"1\":{\"31\":1,\"32\":1,\"33\":1,\"40\":1,\"56\":1,\"78\":2}}],[\"waiting\",{\"1\":{\"78\":1}}],[\"wall\",{\"1\":{\"40\":5}}],[\"wsl2\",{\"1\":{\"84\":1}}],[\"wsl\",{\"0\":{\"72\":1,\"76\":1,\"78\":1,\"79\":1,\"84\":1,\"91\":1},\"1\":{\"72\":1,\"73\":2,\"74\":16,\"75\":3,\"76\":1,\"78\":1,\"80\":1,\"82\":1,\"83\":1,\"84\":5}}],[\"www\",{\"1\":{\"54\":2,\"77\":1,\"82\":1}}],[\"with\",{\"1\":{\"31\":1,\"32\":1,\"33\":1,\"40\":1,\"56\":6}}],[\"winkex\",{\"1\":{\"82\":1}}],[\"win32\",{\"1\":{\"21\":1}}],[\"win11\",{\"1\":{\"16\":1}}],[\"winpcap\",{\"1\":{\"15\":1}}],[\"win\",{\"1\":{\"15\":1,\"26\":1,\"81\":1,\"83\":2}}],[\"windows\",{\"0\":{\"14\":1},\"1\":{\"16\":1,\"69\":2,\"72\":1,\"73\":1}}],[\"行\",{\"1\":{\"25\":1,\"36\":1}}],[\"说明\",{\"1\":{\"56\":1}}],[\"说\",{\"1\":{\"25\":1,\"82\":1}}],[\"宿主机\",{\"1\":{\"23\":1}}],[\"前者\",{\"1\":{\"56\":2}}],[\"前\",{\"1\":{\"40\":2}}],[\"前面\",{\"1\":{\"23\":1,\"78\":1}}],[\"前置\",{\"0\":{\"15\":1}}],[\"写\",{\"1\":{\"23\":1,\"64\":1,\"69\":1}}],[\"辣\",{\"1\":{\"22\":1}}],[\"依赖\",{\"1\":{\"22\":1,\"44\":1}}],[\"删除\",{\"1\":{\"22\":1,\"56\":1,\"74\":1,\"82\":1}}],[\"缓存\",{\"1\":{\"22\":1}}],[\"y\",{\"1\":{\"40\":4,\"45\":1,\"63\":2}}],[\"yes\",{\"1\":{\"37\":1,\"39\":1,\"40\":1}}],[\"yarn\",{\"1\":{\"22\":4}}],[\"your\",{\"1\":{\"18\":1}}],[\"you\",{\"1\":{\"18\":1}}],[\"清理\",{\"1\":{\"22\":1}}],[\"第五节\",{\"1\":{\"84\":1}}],[\"第三个\",{\"1\":{\"40\":1}}],[\"第三步\",{\"1\":{\"22\":1}}],[\"第一行\",{\"1\":{\"36\":1,\"69\":1}}],[\"第一步\",{\"1\":{\"22\":1}}],[\"第\",{\"1\":{\"30\":1,\"35\":2,\"74\":1}}],[\"第二步\",{\"1\":{\"22\":1}}],[\"第二章\",{\"0\":{\"3\":1}}],[\"tar\",{\"1\":{\"74\":3}}],[\"tag\",{\"1\":{\"40\":5}}],[\"tutorials\",{\"1\":{\"73\":1}}],[\"tys\",{\"1\":{\"70\":1}}],[\"typedef\",{\"1\":{\"31\":1,\"32\":1,\"33\":1}}],[\"thread\",{\"1\":{\"65\":1}}],[\"the\",{\"0\":{\"34\":1},\"1\":{\"56\":1,\"65\":6}}],[\"test\",{\"1\":{\"62\":2}}],[\"template\",{\"1\":{\"45\":4,\"46\":4,\"51\":3,\"53\":2,\"54\":1}}],[\"tempter\",{\"0\":{\"34\":1}}],[\"toml\",{\"1\":{\"69\":1}}],[\"toolchain\",{\"1\":{\"69\":3}}],[\"to\",{\"1\":{\"61\":3,\"65\":5}}],[\"transpose\",{\"0\":{\"63\":1},\"1\":{\"63\":1}}],[\"tree\",{\"1\":{\"56\":13}}],[\"true\",{\"1\":{\"21\":2,\"31\":1,\"32\":1,\"33\":1,\"40\":1,\"56\":7}}],[\"tigervnc\",{\"1\":{\"82\":1,\"83\":3}}],[\"timeout\",{\"1\":{\"78\":1}}],[\"time\",{\"1\":{\"45\":8,\"46\":1}}],[\"tie\",{\"1\":{\"31\":2,\"32\":2,\"33\":2,\"40\":2}}],[\"t\",{\"1\":{\"35\":2,\"36\":2,\"40\":12,\"46\":17,\"53\":3,\"63\":2}}],[\"ts\",{\"0\":{\"22\":1}}],[\"点击\",{\"1\":{\"27\":1}}],[\"点\",{\"0\":{\"22\":1}}],[\"入口\",{\"0\":{\"22\":1}}],[\"库中\",{\"1\":{\"65\":1}}],[\"库\",{\"0\":{\"22\":1},\"1\":{\"44\":1,\"51\":1,\"55\":1,\"65\":1}}],[\"隐式\",{\"0\":{\"22\":1}}],[\"该父\",{\"1\":{\"56\":4}}],[\"该项\",{\"1\":{\"56\":1}}],[\"该\",{\"0\":{\"22\":1},\"1\":{\"27\":1,\"36\":1,\"56\":2}}],[\"程序员\",{\"1\":{\"51\":1}}],[\"程序\",{\"0\":{\"22\":1},\"1\":{\"51\":1}}],[\"程序设计\",{\"1\":{\"9\":1}}],[\"类型转换\",{\"0\":{\"61\":1,\"62\":1}}],[\"类型\",{\"0\":{\"22\":1,\"61\":1,\"62\":1},\"1\":{\"27\":4}}],[\"类型定义\",{\"0\":{\"22\":1}}],[\"类似\",{\"1\":{\"16\":1,\"76\":1}}],[\"找到\",{\"1\":{\"26\":1,\"27\":1,\"56\":10,\"82\":1,\"84\":1}}],[\"找个\",{\"1\":{\"25\":1,\"73\":1}}],[\"找\",{\"0\":{\"22\":1},\"1\":{\"82\":1}}],[\"daemon\",{\"1\":{\"78\":2}}],[\"data\",{\"1\":{\"56\":35}}],[\"dfg\",{\"1\":{\"71\":1}}],[\"dfs\",{\"1\":{\"40\":5}}],[\"does\",{\"1\":{\"82\":1}}],[\"docker\",{\"0\":{\"78\":1},\"1\":{\"78\":8}}],[\"docs\",{\"1\":{\"69\":1}}],[\"double\",{\"1\":{\"52\":2}}],[\"drop\",{\"1\":{\"56\":3}}],[\"dword\",{\"1\":{\"50\":1}}],[\"d3601597248bed423daf1a7cf7bd9533\",{\"1\":{\"48\":1,\"54\":1}}],[\"divisor\",{\"1\":{\"62\":3}}],[\"dividend\",{\"1\":{\"62\":2}}],[\"divide\",{\"1\":{\"62\":4}}],[\"display\",{\"1\":{\"56\":5}}],[\"dis\",{\"1\":{\"52\":1}}],[\"digittoint\",{\"1\":{\"45\":7}}],[\"dirname\",{\"1\":{\"21\":1}}],[\"d\",{\"1\":{\"36\":1,\"38\":1,\"40\":1,\"43\":2,\"75\":1,\"78\":1}}],[\"devblogs\",{\"1\":{\"73\":1}}],[\"deviceguard\",{\"1\":{\"16\":1}}],[\"default\",{\"1\":{\"69\":2,\"74\":3}}],[\"define\",{\"1\":{\"46\":2,\"53\":1}}],[\"dependencies\",{\"1\":{\"65\":1}}],[\"derive\",{\"1\":{\"56\":1,\"63\":1}}],[\"decrypt\",{\"1\":{\"46\":4,\"53\":4}}],[\"denied\",{\"1\":{\"26\":1}}],[\"debug\",{\"1\":{\"21\":2,\"56\":2,\"63\":1}}],[\"jianshu\",{\"1\":{\"77\":1}}],[\"jack\",{\"1\":{\"66\":1}}],[\"just\",{\"1\":{\"65\":2}}],[\"j\",{\"1\":{\"31\":4,\"32\":3,\"33\":4,\"40\":9}}],[\"join\",{\"1\":{\"21\":1}}],[\"json\",{\"1\":{\"78\":1}}],[\"js\",{\"1\":{\"21\":1}}],[\"?\",{\"1\":{\"21\":1,\"34\":1,\"40\":1,\"45\":1,\"50\":1,\"61\":1,\"82\":1}}],[\"icu9ks\",{\"1\":{\"82\":1}}],[\"ip\",{\"1\":{\"82\":1}}],[\"import\",{\"1\":{\"74\":2}}],[\"impl\",{\"1\":{\"46\":3,\"56\":3}}],[\"ir\",{\"1\":{\"70\":3,\"71\":1}}],[\"io\",{\"1\":{\"67\":1,\"78\":1}}],[\"ios\",{\"1\":{\"31\":1,\"32\":1,\"33\":1,\"40\":1}}],[\"iostream\",{\"1\":{\"31\":1,\"32\":1,\"33\":1,\"45\":1,\"46\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1}}],[\"it\",{\"1\":{\"65\":2,\"84\":1}}],[\"is\",{\"1\":{\"56\":27,\"65\":4}}],[\"iso\",{\"0\":{\"24\":1},\"1\":{\"27\":1}}],[\"i32\",{\"1\":{\"56\":11,\"63\":2}}],[\"i\",{\"1\":{\"27\":1,\"31\":12,\"32\":7,\"33\":12,\"40\":14,\"42\":2,\"43\":2,\"46\":21,\"53\":13}}],[\"if\",{\"1\":{\"21\":1,\"31\":2,\"32\":3,\"33\":2,\"40\":9,\"42\":1,\"56\":27,\"62\":1}}],[\"init\",{\"1\":{\"65\":1}}],[\"initializes\",{\"1\":{\"65\":2}}],[\"indent\",{\"1\":{\"56\":7}}],[\"index\",{\"1\":{\"46\":6,\"53\":4}}],[\"inorder\",{\"1\":{\"56\":1}}],[\"insert\",{\"1\":{\"56\":5,\"65\":6}}],[\"install\",{\"1\":{\"21\":1,\"22\":1,\"26\":1,\"80\":1,\"81\":1}}],[\"in\",{\"1\":{\"46\":9,\"70\":2}}],[\"inline\",{\"1\":{\"46\":6,\"53\":2}}],[\"input\",{\"0\":{\"36\":1,\"38\":1}}],[\"into\",{\"1\":{\"56\":2}}],[\"int\",{\"1\":{\"31\":8,\"32\":8,\"33\":8,\"40\":13,\"42\":2,\"43\":3,\"45\":11,\"46\":3,\"50\":3,\"51\":5,\"52\":1,\"53\":1}}],[\"include\",{\"1\":{\"31\":2,\"32\":2,\"33\":3,\"40\":1,\"42\":1,\"43\":1,\"45\":1,\"46\":2,\"50\":1,\"51\":1,\"52\":1,\"53\":1}}],[\"inherit\",{\"1\":{\"21\":1}}],[\"info\",{\"1\":{\"18\":1}}],[\"]\",{\"1\":{\"21\":1,\"31\":10,\"32\":3,\"33\":7,\"40\":24,\"43\":2,\"45\":7,\"46\":13,\"50\":1,\"53\":5,\"56\":2,\"62\":1,\"63\":1,\"65\":1,\"69\":2,\"78\":1}}],[\"[\",{\"1\":{\"21\":1,\"31\":10,\"32\":3,\"33\":7,\"40\":24,\"43\":2,\"45\":7,\"46\":13,\"50\":1,\"53\":5,\"56\":2,\"62\":1,\"63\":1,\"65\":1,\"69\":2,\"78\":1}}],[\";\",{\"1\":{\"21\":8,\"31\":24,\"32\":20,\"33\":24,\"40\":38,\"42\":6,\"43\":8,\"45\":19,\"46\":30,\"50\":3,\"51\":8,\"52\":3,\"53\":14,\"56\":43,\"61\":3,\"62\":6,\"63\":4,\"65\":18,\"66\":6}}],[\"'\",{\"0\":{\"57\":1},\"1\":{\"21\":24,\"31\":2,\"32\":2,\"33\":2,\"40\":16,\"45\":2,\"46\":2,\"53\":2,\"65\":3}}],[\"包\",{\"1\":{\"21\":1}}],[\"包含\",{\"0\":{\"22\":1},\"1\":{\"4\":2,\"5\":1,\"36\":2}}],[\"owned\",{\"1\":{\"61\":1}}],[\"or\",{\"1\":{\"61\":2,\"65\":1}}],[\"org\",{\"1\":{\"21\":1,\"45\":1,\"67\":1}}],[\"ok\",{\"1\":{\"61\":3,\"62\":6,\"63\":2}}],[\"opening\",{\"1\":{\"82\":1}}],[\"operator\",{\"1\":{\"46\":1,\"52\":1}}],[\"option\",{\"0\":{\"61\":1,\"62\":1,\"63\":1},\"1\":{\"56\":1,\"62\":6,\"63\":4}}],[\"o1\",{\"1\":{\"53\":1}}],[\"obfuscated1\",{\"1\":{\"53\":2}}],[\"obf\",{\"1\":{\"46\":3}}],[\"out\",{\"1\":{\"46\":5}}],[\"output\",{\"0\":{\"37\":1,\"39\":1}}],[\"o0\",{\"1\":{\"45\":1}}],[\"of\",{\"0\":{\"34\":1},\"1\":{\"56\":4}}],[\"off\",{\"1\":{\"16\":3}}],[\"o\",{\"1\":{\"27\":1,\"31\":1,\"32\":1,\"33\":1}}],[\"oncelock\",{\"1\":{\"65\":4}}],[\"on\",{\"1\":{\"21\":1,\"84\":1}}],[\"os\",{\"1\":{\"21\":3}}],[\"禁止\",{\"1\":{\"21\":1,\"64\":1}}],[\"安全\",{\"1\":{\"56\":1}}],[\"安全性\",{\"1\":{\"55\":1,\"64\":1}}],[\"安全漏洞\",{\"1\":{\"21\":1}}],[\"安装\",{\"0\":{\"23\":1,\"80\":1,\"81\":1},\"1\":{\"15\":2,\"16\":1,\"27\":2,\"28\":2,\"69\":1,\"74\":3}}],[\"进一步\",{\"1\":{\"53\":1}}],[\"进入\",{\"1\":{\"28\":1,\"40\":1,\"82\":1,\"84\":1}}],[\"进度条\",{\"1\":{\"28\":2}}],[\"进程\",{\"1\":{\"21\":1}}],[\"进行\",{\"1\":{\"4\":1}}],[\"子\",{\"1\":{\"21\":1,\"56\":6}}],[\"子树\",{\"1\":{\"11\":1,\"12\":1,\"13\":1,\"56\":1}}],[\"”\",{\"0\":{\"21\":1,\"22\":1},\"1\":{\"27\":1,\"28\":1,\"82\":1,\"84\":1}}],[\"“\",{\"0\":{\"21\":1,\"22\":1},\"1\":{\"27\":1,\"28\":1,\"82\":1,\"84\":1}}],[\"设置\",{\"1\":{\"20\":1,\"27\":6}}],[\"设备\",{\"1\":{\"16\":2,\"82\":1}}],[\"其他\",{\"1\":{\"74\":1}}],[\"其中\",{\"1\":{\"45\":1,\"78\":1}}],[\"其\",{\"1\":{\"20\":1,\"55\":1}}],[\"其实\",{\"1\":{\"16\":1}}],[\"切换\",{\"0\":{\"20\":1},\"1\":{\"20\":3,\"69\":2}}],[\"备忘录\",{\"0\":{\"19\":1,\"72\":1}}],[\"posts\",{\"0\":{\"86\":1}}],[\"pop\",{\"1\":{\"50\":1}}],[\"please\",{\"1\":{\"82\":1}}],[\"platform\",{\"1\":{\"21\":1}}],[\"p\",{\"1\":{\"77\":1}}],[\"pku\",{\"1\":{\"71\":1}}],[\"pc\",{\"1\":{\"69\":2}}],[\"ptr\",{\"1\":{\"50\":1,\"56\":10}}],[\"pty\",{\"1\":{\"21\":1}}],[\"pid\",{\"1\":{\"34\":1}}],[\"php\",{\"1\":{\"34\":1}}],[\"println\",{\"1\":{\"65\":4,\"66\":1}}],[\"printf\",{\"1\":{\"42\":2,\"43\":2}}],[\"private\",{\"1\":{\"45\":1,\"46\":2,\"53\":2}}],[\"pri\",{\"1\":{\"32\":3}}],[\"prime\",{\"1\":{\"31\":3,\"32\":4,\"33\":3}}],[\"projects\",{\"1\":{\"83\":1}}],[\"proxy\",{\"1\":{\"78\":4}}],[\"profile\",{\"1\":{\"69\":1}}],[\"problem\",{\"0\":{\"58\":1}}],[\"pro\",{\"1\":{\"25\":1}}],[\"process\",{\"1\":{\"21\":3}}],[\"permission\",{\"1\":{\"26\":1}}],[\"pub\",{\"0\":{\"70\":1},\"1\":{\"56\":9,\"70\":5}}],[\"publication\",{\"1\":{\"54\":1}}],[\"public\",{\"1\":{\"45\":1,\"70\":2}}],[\"push\",{\"1\":{\"21\":1,\"32\":1,\"50\":1,\"56\":3,\"66\":1}}],[\"pull\",{\"1\":{\"18\":1}}],[\"partialeq\",{\"1\":{\"63\":1}}],[\"parent\",{\"1\":{\"56\":26}}],[\"panic\",{\"1\":{\"56\":1}}],[\"pathbuf\",{\"1\":{\"61\":1}}],[\"path\",{\"1\":{\"21\":3,\"61\":5}}],[\"passwd\",{\"1\":{\"20\":1}}],[\"password\",{\"1\":{\"20\":1,\"82\":1}}],[\"ps\",{\"1\":{\"15\":1}}],[\"覆盖\",{\"1\":{\"18\":1}}],[\"\\\"\",{\"0\":{\"22\":2},\"1\":{\"18\":2,\"27\":2,\"40\":10,\"42\":4,\"43\":4,\"46\":12,\"52\":2,\"53\":8,\"56\":9,\"61\":2,\"62\":2,\"65\":30,\"66\":6,\"69\":16,\"78\":6}}],[\"种子\",{\"1\":{\"47\":1}}],[\"种\",{\"1\":{\"18\":1}}],[\"nightly\",{\"1\":{\"69\":2}}],[\"new\",{\"1\":{\"56\":8,\"65\":3,\"66\":1}}],[\"net\",{\"1\":{\"54\":1,\"78\":1,\"83\":1}}],[\"null\",{\"1\":{\"56\":39}}],[\"number\",{\"1\":{\"54\":1}}],[\"ny\",{\"1\":{\"40\":7}}],[\"nx\",{\"1\":{\"40\":7}}],[\"nxt\",{\"1\":{\"40\":3}}],[\"nameserver\",{\"1\":{\"78\":1}}],[\"names\",{\"1\":{\"66\":2}}],[\"namespace\",{\"1\":{\"31\":1,\"32\":1,\"33\":1,\"40\":1,\"45\":1,\"46\":2,\"50\":1,\"51\":1,\"52\":1,\"53\":1}}],[\"name\",{\"1\":{\"61\":2}}],[\"nat\",{\"1\":{\"16\":1,\"27\":1}}],[\"n\",{\"1\":{\"30\":1,\"31\":9,\"32\":8,\"33\":9,\"35\":1,\"36\":3,\"40\":14,\"43\":2,\"45\":9,\"46\":8,\"50\":4,\"51\":3,\"53\":1,\"56\":2}}],[\"none\",{\"1\":{\"56\":2,\"62\":3}}],[\"no\",{\"1\":{\"37\":1,\"39\":1,\"40\":7,\"78\":1}}],[\"nodesucc\",{\"1\":{\"56\":3}}],[\"node\",{\"1\":{\"21\":3,\"22\":1,\"56\":116}}],[\"nodejs\",{\"0\":{\"21\":1},\"1\":{\"21\":1}}],[\"not\",{\"1\":{\"18\":1,\"82\":1,\"85\":1}}],[\":\",{\"0\":{\"21\":1,\"22\":1,\"31\":1,\"32\":1,\"33\":1},\"1\":{\"18\":1,\"21\":6,\"31\":2,\"32\":3,\"33\":2,\"34\":1,\"40\":3,\"45\":11,\"46\":13,\"48\":2,\"50\":2,\"51\":6,\"53\":7,\"54\":4,\"56\":88,\"59\":2,\"61\":3,\"62\":8,\"63\":2,\"65\":23,\"66\":11,\"67\":3,\"70\":8,\"71\":1,\"73\":2,\"74\":3,\"77\":1,\"78\":7,\"82\":2,\"83\":1,\"84\":1}}],[\"报错\",{\"0\":{\"21\":1,\"22\":1},\"1\":{\"18\":1,\"21\":1,\"22\":1,\"78\":1}}],[\"遇到\",{\"1\":{\"18\":1,\"26\":1,\"55\":1,\"82\":1}}],[\"试图\",{\"1\":{\"18\":1,\"82\":1}}],[\"mnt\",{\"1\":{\"75\":1}}],[\"microsoft\",{\"1\":{\"73\":2}}],[\"minic\",{\"1\":{\"71\":1}}],[\"miri\",{\"1\":{\"69\":1}}],[\"md\",{\"1\":{\"67\":1}}],[\"myth\",{\"1\":{\"66\":1}}],[\"mutex\",{\"1\":{\"66\":3}}],[\"mut\",{\"1\":{\"56\":36,\"65\":2,\"66\":1}}],[\"mul\",{\"1\":{\"32\":3}}],[\"mod\",{\"1\":{\"70\":1}}],[\"modules\",{\"1\":{\"22\":1}}],[\"more\",{\"1\":{\"65\":1}}],[\"mov\",{\"1\":{\"50\":3}}],[\"me\",{\"1\":{\"82\":1}}],[\"metaprograms\",{\"1\":{\"54\":1}}],[\"metastr\",{\"1\":{\"48\":1}}],[\"metastring1\",{\"1\":{\"53\":3}}],[\"metastring\",{\"1\":{\"46\":3}}],[\"metarandom\",{\"1\":{\"45\":4}}],[\"metarandomgenerator\",{\"1\":{\"45\":4}}],[\"merge\",{\"0\":{\"18\":1},\"1\":{\"18\":3}}],[\"mp\",{\"1\":{\"40\":9}}],[\"ms\",{\"1\":{\"40\":2}}],[\"master\",{\"1\":{\"71\":1}}],[\"make\",{\"1\":{\"46\":2,\"53\":1}}],[\"max\",{\"1\":{\"45\":1}}],[\"main\",{\"1\":{\"31\":1,\"32\":1,\"33\":1,\"40\":1,\"42\":1,\"43\":1,\"45\":1,\"46\":1,\"50\":2,\"51\":1,\"52\":1,\"53\":1,\"56\":1,\"65\":2,\"66\":1}}],[\"mac\",{\"0\":{\"28\":1}}],[\"macos\",{\"0\":{\"23\":1,\"26\":1}}],[\"machine\",{\"1\":{\"16\":1}}],[\"mb\",{\"1\":{\"27\":1}}],[\"m\",{\"1\":{\"18\":1,\"35\":1,\"36\":3,\"40\":7,\"45\":7,\"65\":10}}],[\"命令\",{\"0\":{\"17\":1},\"1\":{\"82\":1}}],[\"记事本\",{\"1\":{\"27\":1}}],[\"记录\",{\"0\":{\"17\":1,\"68\":1,\"79\":1},\"1\":{\"56\":1,\"64\":1,\"72\":1,\"84\":1}}],[\"记为\",{\"1\":{\"6\":1}}],[\"~\",{\"1\":{\"16\":1,\"22\":1,\"75\":1}}],[\"愉快\",{\"1\":{\"16\":1}}],[\"分布\",{\"1\":{\"46\":1}}],[\"分支\",{\"1\":{\"18\":3}}],[\"分别\",{\"1\":{\"16\":1,\"36\":1,\"78\":1}}],[\"分析树\",{\"1\":{\"13\":1}}],[\"三项\",{\"1\":{\"16\":1}}],[\"三个\",{\"1\":{\"16\":1,\"36\":2}}],[\"07\",{\"1\":{\"69\":1}}],[\"01\",{\"1\":{\"48\":1}}],[\"010\",{\"1\":{\"46\":3}}],[\"030\",{\"1\":{\"46\":1}}],[\"020\",{\"1\":{\"46\":2}}],[\"0.0\",{\"1\":{\"62\":2}}],[\"0.82\",{\"1\":{\"33\":1}}],[\"0.75\",{\"1\":{\"32\":1}}],[\"0\",{\"1\":{\"16\":2,\"27\":1,\"31\":5,\"32\":4,\"33\":5,\"36\":2,\"38\":3,\"40\":10,\"45\":7,\"46\":24,\"50\":1,\"51\":2,\"53\":5,\"56\":3,\"65\":6}}],[\"修改\",{\"0\":{\"66\":1},\"1\":{\"16\":1,\"27\":1,\"64\":1,\"78\":1}}],[\"均匀\",{\"1\":{\"46\":1}}],[\"均\",{\"1\":{\"16\":1}}],[\"把\",{\"1\":{\"16\":1,\"26\":2,\"27\":1}}],[\"然后\",{\"1\":{\"16\":1,\"20\":1,\"22\":1,\"56\":3,\"78\":1,\"83\":1,\"84\":1}}],[\"路\",{\"1\":{\"40\":1}}],[\"路径\",{\"1\":{\"16\":1,\"27\":1,\"74\":3}}],[\"路由器\",{\"1\":{\"16\":3}}],[\"\\\\\",{\"1\":{\"16\":5,\"31\":1,\"32\":1,\"33\":1,\"40\":4,\"43\":2,\"46\":2,\"53\":1,\"56\":2,\"65\":8,\"74\":6}}],[\"于是\",{\"1\":{\"40\":1}}],[\"于\",{\"1\":{\"16\":1,\"51\":1}}],[\"于子\",{\"1\":{\"11\":1}}],[\"跳\",{\"1\":{\"16\":1}}],[\"跳出\",{\"1\":{\"16\":1}}],[\"能否\",{\"1\":{\"37\":1}}],[\"能\",{\"1\":{\"16\":2,\"28\":1,\"40\":1,\"70\":2,\"84\":1}}],[\"注册表\",{\"1\":{\"16\":1}}],[\"注意\",{\"1\":{\"16\":1,\"26\":1,\"31\":1,\"46\":2,\"50\":1,\"53\":1}}],[\"打开\",{\"1\":{\"16\":1,\"27\":2,\"28\":1,\"36\":1}}],[\"家庭版\",{\"1\":{\"16\":1}}],[\"重复\",{\"1\":{\"32\":1,\"40\":1}}],[\"重新\",{\"1\":{\"22\":1,\"26\":1}}],[\"重新启动\",{\"1\":{\"16\":1}}],[\"重启\",{\"1\":{\"16\":3,\"78\":1,\"84\":2}}],[\"再次\",{\"1\":{\"82\":1}}],[\"再\",{\"1\":{\"16\":2,\"23\":1,\"56\":1,\"78\":1,\"84\":1}}],[\"后台\",{\"1\":{\"84\":1}}],[\"后面\",{\"1\":{\"84\":1}}],[\"后续\",{\"0\":{\"65\":1}}],[\"后者\",{\"1\":{\"56\":2}}],[\"后缀\",{\"0\":{\"52\":1},\"1\":{\"46\":1,\"53\":1}}],[\"后会\",{\"1\":{\"28\":1}}],[\"后\",{\"1\":{\"16\":2,\"74\":1,\"82\":1,\"83\":1,\"84\":3}}],[\"执行\",{\"1\":{\"16\":1,\"21\":1,\"51\":2,\"78\":1,\"83\":1}}],[\"值\",{\"1\":{\"16\":2,\"47\":1,\"53\":1}}],[\"项目\",{\"1\":{\"69\":3,\"70\":1}}],[\"项\",{\"1\":{\"16\":3,\"56\":3,\"74\":1}}],[\"html\",{\"1\":{\"67\":1}}],[\"https\",{\"1\":{\"21\":1,\"48\":2,\"54\":4,\"65\":1,\"67\":3,\"71\":1,\"73\":2,\"77\":1,\"78\":2,\"82\":2,\"83\":1,\"84\":1}}],[\"http\",{\"1\":{\"16\":1,\"34\":1,\"78\":4}}],[\"help\",{\"1\":{\"82\":1}}],[\"helper\",{\"1\":{\"46\":3,\"53\":2,\"84\":1}}],[\"hello\",{\"1\":{\"46\":1,\"53\":2,\"70\":1,\"78\":2}}],[\"headers\",{\"1\":{\"78\":1}}],[\"head\",{\"1\":{\"18\":1}}],[\"hi\",{\"1\":{\"45\":3}}],[\"h\",{\"1\":{\"40\":1,\"42\":1,\"43\":1,\"46\":3}}],[\"hdu\",{\"1\":{\"34\":1}}],[\"hdoj\",{\"0\":{\"34\":1,\"88\":1}}],[\"hashmap\",{\"1\":{\"65\":19,\"70\":2}}],[\"hash\",{\"0\":{\"46\":1},\"1\":{\"46\":8}}],[\"hard\",{\"1\":{\"18\":1}}],[\"have\",{\"1\":{\"18\":1}}],[\"hkey\",{\"1\":{\"16\":1}}],[\"hypervisorlaunchtype\",{\"1\":{\"16\":2}}],[\"cpp\",{\"0\":{\"89\":1}}],[\"cpu\",{\"1\":{\"23\":1}}],[\"crate\",{\"1\":{\"70\":3,\"84\":3}}],[\"crates\",{\"1\":{\"67\":2}}],[\"canceled\",{\"1\":{\"78\":1}}],[\"cast\",{\"1\":{\"46\":2,\"53\":1}}],[\"cache\",{\"1\":{\"22\":1}}],[\"cacheddrtmauthindex\",{\"1\":{\"16\":1}}],[\"cstdint\",{\"1\":{\"46\":1}}],[\"c\",{\"0\":{\"41\":1},\"1\":{\"42\":2,\"43\":2,\"45\":2,\"46\":4,\"53\":5,\"54\":1,\"74\":1}}],[\"channel\",{\"1\":{\"69\":1}}],[\"char\",{\"1\":{\"40\":1,\"42\":1,\"43\":1,\"45\":2,\"46\":16,\"53\":10}}],[\"child\",{\"1\":{\"21\":1,\"56\":5}}],[\"c++\",{\"0\":{\"44\":1,\"49\":1,\"53\":1},\"1\":{\"40\":1,\"44\":2,\"45\":2,\"48\":1,\"51\":2,\"64\":1}}],[\"cn\",{\"1\":{\"34\":1,\"73\":1}}],[\"cnt\",{\"1\":{\"31\":2,\"33\":2}}],[\"cin\",{\"1\":{\"31\":3,\"32\":3,\"33\":3,\"40\":3}}],[\"client\",{\"1\":{\"78\":1}}],[\"clippy\",{\"1\":{\"69\":1}}],[\"clone\",{\"1\":{\"26\":1}}],[\"clean\",{\"1\":{\"22\":1}}],[\"cwd\",{\"1\":{\"21\":1}}],[\"collections\",{\"1\":{\"65\":2}}],[\"column\",{\"1\":{\"46\":2}}],[\"comments\",{\"1\":{\"82\":1}}],[\"commandline\",{\"1\":{\"73\":1}}],[\"commit\",{\"1\":{\"18\":2}}],[\"components\",{\"1\":{\"69\":1}}],[\"computed\",{\"1\":{\"65\":2}}],[\"com\",{\"1\":{\"48\":1,\"54\":3,\"65\":1,\"67\":1,\"71\":1,\"73\":2,\"77\":1,\"82\":2,\"84\":1}}],[\"count\",{\"1\":{\"56\":7}}],[\"counter\",{\"1\":{\"45\":2,\"46\":1}}],[\"course\",{\"1\":{\"56\":1,\"67\":1}}],[\"cout\",{\"1\":{\"31\":2,\"32\":2,\"33\":2,\"40\":5,\"46\":2,\"53\":1}}],[\"cookie\",{\"0\":{\"22\":2}}],[\"code\",{\"1\":{\"21\":2}}],[\"conf\",{\"1\":{\"78\":2}}],[\"config\",{\"1\":{\"74\":3}}],[\"configuring\",{\"1\":{\"73\":1}}],[\"connection\",{\"1\":{\"78\":1}}],[\"constexpr\",{\"0\":{\"50\":1},\"1\":{\"45\":11,\"46\":13,\"50\":2,\"51\":4,\"53\":4}}],[\"const\",{\"1\":{\"21\":5,\"31\":1,\"32\":1,\"33\":1,\"40\":1,\"45\":2,\"46\":12,\"53\":8,\"56\":1}}],[\"concluded\",{\"1\":{\"18\":1}}],[\"continue\",{\"1\":{\"31\":1,\"33\":1,\"40\":3}}],[\"control\",{\"1\":{\"16\":1}}],[\"controlset001\",{\"1\":{\"16\":1}}],[\"context\",{\"1\":{\"8\":1,\"9\":1}}],[\"cmd\",{\"1\":{\"16\":2,\"21\":1,\"26\":1,\"69\":1}}],[\"身份\",{\"1\":{\"16\":1,\"26\":1}}],[\"下未\",{\"1\":{\"84\":1}}],[\"下\",{\"1\":{\"40\":1,\"46\":2,\"51\":1,\"64\":1,\"82\":3,\"84\":1}}],[\"下面\",{\"1\":{\"27\":1,\"42\":1,\"82\":1}}],[\"下来\",{\"1\":{\"26\":1}}],[\"下去\",{\"1\":{\"16\":2}}],[\"下载\",{\"0\":{\"24\":1,\"25\":1},\"1\":{\"15\":2,\"22\":1,\"24\":1,\"26\":1,\"27\":1}}],[\"电脑\",{\"1\":{\"16\":2}}],[\"照着\",{\"1\":{\"16\":1,\"84\":1}}],[\"帮助\",{\"1\":{\"16\":1,\"51\":1,\"82\":1}}],[\"根据\",{\"1\":{\"16\":1,\"45\":1}}],[\"请\",{\"1\":{\"16\":1}}],[\"绕路\",{\"1\":{\"40\":1}}],[\"绕\",{\"1\":{\"16\":1}}],[\"发现\",{\"1\":{\"16\":1,\"22\":1,\"82\":2,\"84\":2}}],[\"时会\",{\"1\":{\"45\":1,\"66\":1}}],[\"时候\",{\"1\":{\"43\":1}}],[\"时开\",{\"1\":{\"35\":1}}],[\"时间\",{\"1\":{\"31\":1,\"32\":2,\"36\":1,\"40\":1,\"51\":1}}],[\"时\",{\"0\":{\"44\":1,\"53\":1,\"65\":1,\"66\":1},\"1\":{\"16\":1,\"18\":1,\"40\":1,\"44\":1,\"45\":1,\"51\":1,\"72\":1,\"74\":1,\"82\":1}}],[\"做\",{\"1\":{\"16\":1,\"72\":1,\"84\":1}}],[\"做出\",{\"1\":{\"15\":1}}],[\"笔者\",{\"1\":{\"16\":1,\"82\":1}}],[\"笔记本\",{\"1\":{\"84\":1}}],[\"笔记\",{\"0\":{\"2\":1,\"55\":1}}],[\"也许\",{\"1\":{\"56\":1}}],[\"也\",{\"1\":{\"16\":2,\"40\":2,\"55\":1,\"64\":1,\"65\":1,\"82\":2}}],[\"fbcdccf3e8178a9039329562c0de0fd01a3372fb\",{\"1\":{\"67\":1}}],[\"functypemapcell\",{\"1\":{\"70\":1}}],[\"function\",{\"1\":{\"21\":1}}],[\"func\",{\"1\":{\"70\":1}}],[\"further\",{\"1\":{\"65\":2}}],[\"f64\",{\"1\":{\"62\":7}}],[\"found\",{\"1\":{\"85\":1}}],[\"foo\",{\"1\":{\"61\":1,\"65\":2}}],[\"format\",{\"1\":{\"56\":1,\"61\":1}}],[\"for\",{\"1\":{\"31\":3,\"32\":2,\"33\":3,\"40\":3,\"46\":2,\"53\":1,\"54\":1,\"56\":1,\"61\":1,\"65\":4,\"72\":1,\"78\":1}}],[\"fromnode\",{\"1\":{\"56\":8}}],[\"from\",{\"1\":{\"56\":1,\"61\":1,\"62\":1,\"66\":1}}],[\"free\",{\"1\":{\"9\":1}}],[\"fn\",{\"1\":{\"56\":20,\"61\":1,\"62\":2,\"65\":3,\"66\":1,\"70\":1}}],[\"first\",{\"1\":{\"65\":2}}],[\"find\",{\"1\":{\"56\":7}}],[\"fibonacci\",{\"1\":{\"51\":6}}],[\"file\",{\"1\":{\"46\":4,\"61\":1,\"82\":1}}],[\"fac\",{\"1\":{\"50\":3}}],[\"false\",{\"1\":{\"31\":1,\"32\":1,\"33\":1,\"40\":2,\"56\":5}}],[\"fatal\",{\"1\":{\"18\":1}}],[\"failed\",{\"0\":{\"18\":1},\"1\":{\"18\":1,\"61\":1,\"82\":1}}],[\"fw\",{\"1\":{\"16\":1}}],[\"为了\",{\"1\":{\"66\":1}}],[\"为\",{\"0\":{\"61\":1,\"62\":1},\"1\":{\"16\":4,\"20\":1,\"40\":1,\"56\":1,\"62\":1,\"63\":1,\"69\":1,\"74\":1,\"78\":2}}],[\"为准\",{\"1\":{\"15\":1}}],[\"编码\",{\"1\":{\"45\":2}}],[\"编程\",{\"0\":{\"51\":1},\"1\":{\"44\":1,\"51\":2}}],[\"编辑\",{\"1\":{\"16\":1}}],[\"编辑器\",{\"1\":{\"16\":1}}],[\"编号\",{\"1\":{\"16\":1}}],[\"编译器\",{\"1\":{\"46\":1,\"53\":1}}],[\"编译\",{\"0\":{\"2\":1,\"44\":1,\"53\":1},\"1\":{\"44\":1,\"45\":3,\"50\":1,\"51\":2,\"53\":2}}],[\"会\",{\"1\":{\"16\":2,\"18\":1,\"22\":1,\"26\":1,\"82\":2,\"84\":1}}],[\"会员\",{\"1\":{\"15\":1}}],[\"就是\",{\"1\":{\"55\":1,\"56\":3}}],[\"就算\",{\"1\":{\"40\":1}}],[\"就行\",{\"1\":{\"23\":1}}],[\"就\",{\"1\":{\"16\":2,\"22\":1,\"25\":1,\"28\":1,\"56\":1,\"84\":2}}],[\"尝试\",{\"1\":{\"16\":1,\"23\":1,\"78\":2,\"82\":2}}],[\"似乎\",{\"1\":{\"16\":1}}],[\"顺利\",{\"1\":{\"78\":1}}],[\"顺便\",{\"1\":{\"16\":1}}],[\"顺序\",{\"1\":{\"15\":1}}],[\"还有\",{\"1\":{\"84\":1}}],[\"还是\",{\"1\":{\"16\":2,\"42\":1}}],[\"还\",{\"1\":{\"16\":2,\"33\":1,\"84\":1}}],[\"完后\",{\"1\":{\"84\":1}}],[\"完全\",{\"1\":{\"64\":1}}],[\"完全相同\",{\"1\":{\"15\":1}}],[\"完备\",{\"1\":{\"51\":1}}],[\"完成\",{\"1\":{\"16\":4,\"27\":1,\"28\":1}}],[\"完\",{\"1\":{\"16\":2,\"28\":1}}],[\"地址\",{\"1\":{\"78\":1}}],[\"地\",{\"1\":{\"16\":2,\"69\":1}}],[\"当天\",{\"1\":{\"84\":1}}],[\"当然\",{\"1\":{\"64\":1,\"66\":1}}],[\"当前\",{\"1\":{\"56\":2,\"74\":1}}],[\"当\",{\"1\":{\"16\":1,\"43\":1}}],[\"错误处理\",{\"0\":{\"60\":1}}],[\"错误\",{\"0\":{\"16\":1},\"1\":{\"16\":1,\"55\":1}}],[\"赘述\",{\"1\":{\"15\":1}}],[\"看到\",{\"1\":{\"28\":1}}],[\"看\",{\"1\":{\"15\":1,\"16\":2}}],[\"之后\",{\"1\":{\"26\":1,\"28\":1,\"40\":1,\"65\":1,\"82\":1,\"84\":1}}],[\"之前\",{\"1\":{\"26\":1,\"40\":1,\"56\":1,\"72\":1,\"84\":1}}],[\"之间\",{\"1\":{\"15\":1}}],[\"之一\",{\"1\":{\"10\":1,\"36\":1}}],[\"遗憾\",{\"1\":{\"15\":1}}],[\"很多\",{\"1\":{\"78\":1}}],[\"很\",{\"1\":{\"15\":1,\"40\":2,\"64\":2}}],[\"了\",{\"1\":{\"15\":2,\"16\":2,\"21\":1,\"23\":1,\"26\":1,\"27\":1,\"32\":2,\"36\":1,\"40\":3,\"46\":1,\"53\":2,\"55\":1,\"74\":1,\"78\":1,\"82\":2,\"84\":5}}],[\"通过\",{\"1\":{\"15\":1,\"36\":1,\"56\":1,\"76\":1}}],[\"肯定\",{\"1\":{\"15\":1}}],[\"那样\",{\"1\":{\"64\":1}}],[\"那\",{\"0\":{\"51\":1}}],[\"那请\",{\"1\":{\"16\":1}}],[\"那么\",{\"1\":{\"15\":1,\"56\":1}}],[\"那些\",{\"1\":{\"15\":1}}],[\"那棵\",{\"1\":{\"13\":1}}],[\"开放\",{\"1\":{\"83\":1}}],[\"开启\",{\"1\":{\"82\":1,\"84\":1}}],[\"开发\",{\"1\":{\"51\":1,\"55\":1}}],[\"开始\",{\"1\":{\"40\":1,\"84\":2}}],[\"开始符号\",{\"1\":{\"4\":1}}],[\"开机\",{\"1\":{\"16\":1}}],[\"开头\",{\"1\":{\"15\":1}}],[\"教程\",{\"1\":{\"15\":2}}],[\"以上\",{\"1\":{\"46\":1,\"69\":1}}],[\"以及\",{\"1\":{\"28\":1,\"69\":1}}],[\"以\",{\"1\":{\"15\":1,\"16\":1,\"26\":1,\"36\":1}}],[\"以下内容\",{\"1\":{\"27\":1}}],[\"以下\",{\"1\":{\"10\":1,\"28\":1,\"36\":1,\"43\":1,\"64\":1}}],[\"我们\",{\"1\":{\"45\":1,\"46\":1,\"47\":1,\"56\":2,\"82\":1}}],[\"我\",{\"1\":{\"15\":1,\"16\":2,\"24\":1,\"25\":1,\"27\":3,\"45\":1,\"76\":1,\"84\":3}}],[\"不了\",{\"1\":{\"84\":1}}],[\"不会\",{\"1\":{\"84\":1}}],[\"不上\",{\"1\":{\"82\":1}}],[\"不想\",{\"1\":{\"69\":1}}],[\"不受\",{\"1\":{\"64\":1}}],[\"不同\",{\"1\":{\"47\":1}}],[\"不大\",{\"1\":{\"40\":1}}],[\"不可避免\",{\"1\":{\"66\":1}}],[\"不可\",{\"1\":{\"40\":1}}],[\"不是\",{\"1\":{\"31\":1,\"40\":1,\"43\":1,\"56\":1,\"64\":1}}],[\"不然\",{\"1\":{\"26\":1}}],[\"不多作\",{\"1\":{\"84\":1}}],[\"不多\",{\"1\":{\"25\":1}}],[\"不到\",{\"0\":{\"22\":1},\"1\":{\"35\":1,\"82\":1}}],[\"不出意外\",{\"1\":{\"16\":1}}],[\"不能\",{\"1\":{\"16\":1,\"46\":1,\"53\":1,\"56\":1,\"62\":1}}],[\"不为\",{\"1\":{\"16\":1}}],[\"不开\",{\"1\":{\"16\":1}}],[\"不再\",{\"1\":{\"15\":1,\"56\":1}}],[\"不行\",{\"1\":{\"15\":1}}],[\"不\",{\"1\":{\"15\":1,\"23\":1,\"36\":1,\"40\":3,\"44\":1,\"45\":1,\"46\":2,\"55\":2,\"64\":1,\"82\":2,\"84\":1}}],[\"不难\",{\"1\":{\"15\":1}}],[\"版本\",{\"0\":{\"45\":1,\"69\":1},\"1\":{\"15\":2,\"21\":1,\"45\":1,\"69\":8}}],[\"等等\",{\"1\":{\"55\":1,\"78\":1}}],[\"等待\",{\"1\":{\"28\":1,\"82\":1}}],[\"等\",{\"1\":{\"15\":1,\"53\":1,\"55\":1,\"59\":1,\"64\":1}}],[\"等价\",{\"0\":{\"7\":1},\"1\":{\"7\":2}}],[\"要\",{\"1\":{\"15\":1,\"20\":2,\"33\":1,\"35\":1,\"74\":1}}],[\"要求\",{\"1\":{\"9\":1}}],[\"估计\",{\"1\":{\"15\":1,\"84\":1}}],[\"没电\",{\"1\":{\"84\":1}}],[\"没想到\",{\"1\":{\"84\":1}}],[\"没有\",{\"1\":{\"56\":7,\"78\":1,\"82\":2}}],[\"没\",{\"1\":{\"15\":1,\"56\":2}}],[\"盘\",{\"1\":{\"15\":1,\"74\":2}}],[\"百度网\",{\"1\":{\"15\":1}}],[\"到达\",{\"1\":{\"35\":1}}],[\"到\",{\"1\":{\"15\":1,\"16\":1,\"27\":1,\"40\":2,\"43\":1,\"69\":1,\"70\":1,\"72\":1,\"74\":2,\"84\":1}}],[\"都行\",{\"1\":{\"27\":1,\"73\":1}}],[\"都\",{\"1\":{\"15\":2,\"16\":1,\"47\":1,\"56\":3,\"72\":1,\"78\":1,\"82\":1,\"84\":1}}],[\"文章\",{\"1\":{\"45\":1,\"76\":1}}],[\"文件夹\",{\"1\":{\"22\":1,\"75\":1,\"82\":1}}],[\"文件\",{\"0\":{\"22\":2},\"1\":{\"21\":1,\"27\":3,\"69\":2,\"74\":1,\"82\":1,\"84\":1}}],[\"文件名\",{\"1\":{\"15\":1}}],[\"文法\",{\"0\":{\"3\":1,\"7\":1},\"1\":{\"4\":2,\"6\":1,\"7\":4,\"8\":1,\"9\":1,\"10\":3}}],[\"复杂度\",{\"1\":{\"31\":1,\"32\":2}}],[\"复制\",{\"1\":{\"15\":1}}],[\"复习\",{\"0\":{\"2\":1}}],[\"好久\",{\"1\":{\"82\":1}}],[\"好\",{\"1\":{\"15\":1,\"27\":2}}],[\"必须\",{\"1\":{\"15\":3,\"16\":2,\"35\":1,\"56\":1}}],[\"你\",{\"1\":{\"15\":4,\"16\":5,\"22\":1,\"27\":1,\"74\":1,\"78\":1,\"82\":1,\"83\":1}}],[\"首先\",{\"1\":{\"15\":1,\"16\":2,\"20\":1}}],[\"468\",{\"1\":{\"40\":1}}],[\"404\",{\"1\":{\"85\":1}}],[\"4096\",{\"1\":{\"27\":1}}],[\"40\",{\"0\":{\"16\":1},\"1\":{\"16\":1}}],[\"4\",{\"1\":{\"15\":1,\"27\":1,\"38\":3,\"40\":2,\"43\":2,\"45\":1,\"46\":2,\"50\":1,\"53\":1}}],[\"_\",{\"1\":{\"15\":3,\"16\":2,\"18\":1,\"21\":5,\"22\":1,\"31\":2,\"32\":6,\"33\":2,\"40\":2,\"45\":12,\"46\":84,\"52\":2,\"53\":23,\"54\":7,\"56\":91,\"61\":9,\"62\":11,\"63\":1,\"65\":7,\"66\":4,\"67\":1,\"69\":2,\"70\":1,\"78\":3,\"82\":7}}],[\"v2\",{\"1\":{\"78\":1}}],[\"variable\",{\"1\":{\"67\":1}}],[\"valuedata\",{\"1\":{\"70\":1}}],[\"values\",{\"1\":{\"70\":1}}],[\"value\",{\"1\":{\"45\":8,\"51\":6,\"65\":2,\"70\":1}}],[\"v\",{\"1\":{\"56\":3,\"66\":3,\"74\":1,\"84\":1}}],[\"volatile\",{\"1\":{\"46\":1,\"53\":1}}],[\"void\",{\"1\":{\"40\":1}}],[\"vec\",{\"1\":{\"56\":2}}],[\"vector\",{\"1\":{\"31\":2,\"32\":3,\"33\":3}}],[\"version\",{\"1\":{\"27\":1,\"74\":2}}],[\"vm\",{\"1\":{\"27\":1}}],[\"vmx\",{\"1\":{\"27\":1}}],[\"vmware\",{\"0\":{\"23\":1,\"25\":1},\"1\":{\"25\":1,\"26\":2,\"27\":1,\"72\":1}}],[\"vscode\",{\"0\":{\"22\":1}}],[\"vulnerability\",{\"1\":{\"21\":1}}],[\"virtualbox\",{\"1\":{\"15\":4}}],[\"vt\",{\"1\":{\"6\":1}}],[\"esm\",{\"1\":{\"82\":1}}],[\"etc\",{\"1\":{\"78\":3}}],[\"efficient\",{\"1\":{\"65\":1}}],[\"e\",{\"1\":{\"63\":2,\"74\":3,\"75\":1}}],[\"err\",{\"1\":{\"62\":3}}],[\"error\",{\"0\":{\"21\":1}}],[\"eq\",{\"1\":{\"56\":1,\"62\":2,\"63\":2}}],[\"eax\",{\"1\":{\"50\":1}}],[\"else\",{\"1\":{\"40\":2,\"42\":1,\"56\":17,\"62\":1}}],[\"ey\",{\"1\":{\"40\":6}}],[\"edu\",{\"1\":{\"34\":1}}],[\"e8\",{\"1\":{\"31\":1,\"32\":1,\"33\":1}}],[\"entry\",{\"1\":{\"65\":4}}],[\"encrypt\",{\"1\":{\"46\":3,\"53\":3}}],[\"endian\",{\"1\":{\"42\":2}}],[\"environment\",{\"1\":{\"78\":3}}],[\"env\",{\"1\":{\"21\":1}}],[\"en\",{\"1\":{\"21\":1}}],[\"ensp\",{\"0\":{\"14\":1},\"1\":{\"15\":2,\"16\":1}}],[\"einval\",{\"0\":{\"21\":1}}],[\"exceeded\",{\"1\":{\"78\":1}}],[\"export\",{\"1\":{\"74\":1}}],[\"ex\",{\"1\":{\"40\":6}}],[\"exit\",{\"1\":{\"21\":2}}],[\"exists\",{\"1\":{\"18\":1}}],[\"exe\",{\"1\":{\"15\":3,\"74\":3}}],[\".\",{\"1\":{\"15\":2,\"16\":3,\"18\":1,\"21\":13,\"22\":1,\"26\":1,\"27\":2,\"31\":2,\"32\":3,\"33\":2,\"34\":4,\"36\":1,\"38\":19,\"40\":4,\"42\":3,\"43\":1,\"45\":2,\"46\":28,\"48\":3,\"53\":25,\"54\":7,\"56\":92,\"61\":5,\"62\":2,\"63\":1,\"65\":20,\"66\":3,\"67\":5,\"69\":1,\"71\":2,\"73\":4,\"74\":2,\"77\":2,\"78\":7,\"82\":4,\"83\":1,\"84\":1}}],[\"问题\",{\"0\":{\"14\":1,\"84\":1},\"1\":{\"46\":1,\"82\":1,\"84\":1}}],[\"无\",{\"1\":{\"55\":1}}],[\"无论如何\",{\"1\":{\"16\":1}}],[\"无法\",{\"0\":{\"14\":1},\"1\":{\"16\":1,\"36\":1,\"45\":1}}],[\"无关\",{\"1\":{\"9\":1}}],[\"在于\",{\"1\":{\"55\":2}}],[\"在\",{\"0\":{\"14\":1,\"23\":1,\"78\":1,\"79\":1},\"1\":{\"15\":1,\"16\":2,\"21\":2,\"23\":1,\"27\":1,\"35\":2,\"40\":1,\"45\":3,\"46\":3,\"50\":1,\"51\":3,\"53\":2,\"56\":10,\"64\":2,\"65\":1,\"69\":4,\"70\":3,\"72\":2,\"74\":1,\"78\":3,\"82\":2,\"83\":2,\"84\":2}}],[\"解决方案\",{\"1\":{\"78\":2}}],[\"解决\",{\"0\":{\"14\":1,\"16\":1,\"22\":1,\"83\":1},\"1\":{\"55\":1,\"64\":1,\"84\":1}}],[\"、\",{\"1\":{\"13\":2,\"16\":1,\"33\":1,\"36\":1,\"53\":1,\"55\":4,\"59\":1,\"64\":1,\"70\":1,\"78\":4,\"82\":1}}],[\"至少\",{\"1\":{\"43\":1}}],[\"至多\",{\"1\":{\"35\":1,\"40\":1}}],[\"至此\",{\"1\":{\"27\":1}}],[\"至于\",{\"1\":{\"15\":1}}],[\"至\",{\"1\":{\"13\":1}}],[\"自启动\",{\"0\":{\"84\":1},\"1\":{\"84\":4}}],[\"自身\",{\"1\":{\"56\":1}}],[\"自动\",{\"1\":{\"56\":1,\"73\":1,\"84\":1}}],[\"自定义\",{\"0\":{\"52\":1},\"1\":{\"27\":1,\"46\":1,\"53\":1}}],[\"自行\",{\"1\":{\"15\":1}}],[\"自\",{\"0\":{\"56\":1},\"1\":{\"13\":1,\"55\":1}}],[\"自左至\",{\"1\":{\"11\":1,\"12\":1}}],[\"最后\",{\"1\":{\"84\":1}}],[\"最终\",{\"0\":{\"83\":1},\"1\":{\"78\":1}}],[\"最近\",{\"1\":{\"72\":1}}],[\"最高\",{\"1\":{\"56\":1}}],[\"最大\",{\"1\":{\"43\":4}}],[\"最下\",{\"1\":{\"13\":1}}],[\"最\",{\"1\":{\"13\":2,\"27\":1,\"56\":2}}],[\"中序遍\",{\"1\":{\"56\":1}}],[\"中原\",{\"0\":{\"44\":1}}],[\"中\",{\"0\":{\"14\":1,\"21\":1,\"23\":1,\"41\":1,\"68\":1,\"78\":1,\"79\":1},\"1\":{\"13\":1,\"16\":1,\"21\":2,\"42\":1,\"44\":1,\"45\":3,\"53\":1,\"55\":1,\"56\":3,\"64\":1,\"69\":2,\"78\":2,\"83\":1}}],[\"所在\",{\"1\":{\"69\":1}}],[\"所以\",{\"1\":{\"56\":3}}],[\"所\",{\"1\":{\"12\":1}}],[\"所有权\",{\"1\":{\"56\":1}}],[\"所有\",{\"1\":{\"6\":1,\"11\":1,\"12\":1,\"13\":1,\"35\":1,\"40\":1,\"56\":1,\"74\":1}}],[\"两个\",{\"1\":{\"16\":1,\"40\":1}}],[\"两代\",{\"1\":{\"12\":1,\"13\":1}}],[\"两种\",{\"1\":{\"10\":1}}],[\"有父\",{\"1\":{\"56\":1}}],[\"有用\",{\"1\":{\"56\":1}}],[\"有时候\",{\"1\":{\"18\":1}}],[\"有\",{\"1\":{\"12\":1,\"18\":1,\"30\":1,\"40\":1,\"56\":1,\"64\":1,\"66\":1,\"82\":1,\"84\":1}}],[\"有关\",{\"0\":{\"17\":1},\"1\":{\"8\":1}}],[\"仅\",{\"1\":{\"12\":1,\"35\":1,\"44\":1,\"70\":1}}],[\"直接\",{\"0\":{\"12\":1},\"1\":{\"13\":2,\"18\":1,\"21\":1,\"23\":1,\"26\":1,\"40\":3,\"65\":1,\"69\":1,\"82\":1,\"83\":1}}],[\"形成\",{\"1\":{\"11\":1,\"12\":1}}],[\"形式语言\",{\"0\":{\"3\":1}}],[\"形式\",{\"0\":{\"3\":1},\"1\":{\"10\":1,\"56\":2}}],[\"排列\",{\"1\":{\"11\":1,\"12\":1,\"13\":1}}],[\"叶子\",{\"1\":{\"11\":1,\"12\":1,\"13\":1}}],[\"短语\",{\"0\":{\"11\":1,\"12\":1},\"1\":{\"11\":1,\"13\":3}}],[\"左子\",{\"1\":{\"56\":6}}],[\"左右\",{\"1\":{\"56\":1,\"84\":1}}],[\"左\",{\"1\":{\"10\":1,\"13\":3}}],[\"左边\",{\"1\":{\"9\":1,\"56\":1,\"74\":1}}],[\"右子\",{\"1\":{\"56\":6}}],[\"右键\",{\"1\":{\"26\":1,\"27\":2}}],[\"右\",{\"1\":{\"10\":1,\"11\":1,\"12\":1,\"13\":1}}],[\"/\",{\"1\":{\"10\":4,\"16\":1,\"21\":7,\"27\":1,\"34\":3,\"40\":1,\"43\":12,\"45\":10,\"46\":18,\"48\":12,\"53\":6,\"54\":18,\"56\":54,\"62\":1,\"65\":13,\"67\":17,\"70\":6,\"71\":9,\"73\":12,\"75\":5,\"77\":4,\"78\":21,\"82\":12,\"83\":4,\"84\":6}}],[\"对齐\",{\"1\":{\"43\":3}}],[\"对\",{\"1\":{\"32\":1,\"40\":1,\"47\":1}}],[\"对于\",{\"1\":{\"10\":1,\"37\":1,\"69\":1}}],[\"对应\",{\"1\":{\"7\":1,\"21\":1,\"69\":1}}],[\"378525362\",{\"1\":{\"54\":1}}],[\"31\",{\"1\":{\"45\":1}}],[\"36000\",{\"1\":{\"45\":1}}],[\"3600\",{\"1\":{\"45\":1}}],[\"3383\",{\"1\":{\"30\":1}}],[\"3.\",{\"1\":{\"15\":1}}],[\"3\",{\"0\":{\"10\":1,\"33\":1},\"1\":{\"33\":1,\"38\":1,\"45\":1,\"84\":1}}],[\"bbs\",{\"1\":{\"70\":1}}],[\"blob\",{\"1\":{\"67\":1,\"71\":1}}],[\"blog\",{\"1\":{\"21\":1,\"48\":2}}],[\"buffer\",{\"1\":{\"46\":6,\"53\":6}}],[\"bios\",{\"1\":{\"84\":1}}],[\"big\",{\"1\":{\"42\":1}}],[\"bits\",{\"1\":{\"40\":1}}],[\"bitset\",{\"0\":{\"33\":1},\"1\":{\"33\":4}}],[\"boot\",{\"1\":{\"84\":1}}],[\"bool\",{\"1\":{\"31\":1,\"32\":1,\"33\":1,\"40\":1,\"56\":4}}],[\"box\",{\"1\":{\"56\":6,\"59\":1}}],[\"bone\",{\"0\":{\"34\":1}}],[\"break\",{\"1\":{\"32\":2,\"56\":1}}],[\"bcdedit\",{\"1\":{\"16\":2}}],[\"bs\",{\"1\":{\"9\":1}}],[\"b\",{\"1\":{\"9\":2,\"43\":4,\"73\":1}}],[\"basicblockdata\",{\"1\":{\"70\":1}}],[\"basicblock\",{\"1\":{\"70\":1}}],[\"bashonubuntuonwindows\",{\"1\":{\"82\":1}}],[\"bash\",{\"0\":{\"20\":1},\"1\":{\"83\":1}}],[\"baz\",{\"1\":{\"65\":2}}],[\"bar\",{\"1\":{\"65\":2}}],[\"back\",{\"1\":{\"32\":1}}],[\"baa\",{\"1\":{\"9\":1}}],[\"ba\",{\"1\":{\"9\":1,\"10\":1}}],[\"awaitin\",{\"1\":{\"78\":1}}],[\"a2d16029dc2\",{\"1\":{\"77\":1}}],[\"advance\",{\"1\":{\"67\":1}}],[\"advobfuscator\",{\"1\":{\"54\":1}}],[\"allen\",{\"1\":{\"66\":1}}],[\"alternative\",{\"1\":{\"65\":1}}],[\"algos\",{\"1\":{\"67\":1}}],[\"algo\",{\"0\":{\"87\":1},\"1\":{\"56\":1}}],[\"always\",{\"1\":{\"46\":6,\"53\":2,\"84\":1}}],[\"apt\",{\"1\":{\"81\":1}}],[\"apps\",{\"1\":{\"73\":1}}],[\"api\",{\"1\":{\"55\":1}}],[\"april\",{\"1\":{\"21\":1}}],[\"analyzer\",{\"1\":{\"69\":1}}],[\"and\",{\"1\":{\"65\":1,\"84\":1}}],[\"andrivet\",{\"1\":{\"54\":1}}],[\"any\",{\"1\":{\"65\":2}}],[\"answer\",{\"1\":{\"54\":1}}],[\"ai\",{\"1\":{\"46\":1}}],[\"automatically\",{\"1\":{\"73\":1}}],[\"auto\",{\"1\":{\"46\":3,\"50\":1,\"51\":1,\"52\":1,\"53\":2}}],[\"attribute\",{\"1\":{\"46\":6,\"53\":2}}],[\"access\",{\"1\":{\"65\":4,\"82\":1}}],[\"ac\",{\"1\":{\"40\":1}}],[\"acm\",{\"1\":{\"34\":1}}],[\"amd\",{\"1\":{\"23\":1}}],[\"armoury\",{\"1\":{\"84\":3}}],[\"arp\",{\"1\":{\"16\":1}}],[\"ar\",{\"0\":{\"16\":1},\"1\":{\"16\":4}}],[\"assert\",{\"1\":{\"56\":2,\"62\":2,\"63\":1}}],[\"as\",{\"1\":{\"9\":1}}],[\"a\",{\"1\":{\"9\":2,\"10\":6,\"45\":3}}],[\"abs\",{\"1\":{\"40\":5,\"61\":3}}],[\"abb\",{\"1\":{\"9\":1}}],[\"ab\",{\"1\":{\"9\":1,\"10\":1}}],[\"|\",{\"1\":{\"9\":5,\"40\":6,\"56\":4,\"65\":2}}],[\"-\",{\"0\":{\"34\":1,\"79\":1,\"80\":1,\"84\":1},\"1\":{\"9\":3,\"10\":4,\"15\":3,\"16\":2,\"18\":3,\"21\":8,\"26\":1,\"31\":2,\"32\":3,\"33\":2,\"40\":11,\"42\":2,\"45\":6,\"46\":2,\"48\":1,\"50\":2,\"51\":2,\"53\":2,\"56\":17,\"61\":1,\"62\":1,\"65\":9,\"67\":4,\"69\":16,\"71\":1,\"73\":4,\"74\":29,\"75\":3,\"76\":1,\"78\":4,\"80\":3,\"81\":2,\"82\":7,\"83\":3,\"84\":18}}],[\"例如\",{\"1\":{\"9\":1,\"69\":2}}],[\"描述\",{\"1\":{\"9\":1}}],[\"使用\",{\"0\":{\"14\":1,\"26\":1,\"46\":1,\"56\":1,\"69\":1,\"78\":1,\"79\":1},\"1\":{\"9\":1,\"16\":1,\"20\":1,\"27\":5,\"44\":1,\"45\":1,\"46\":2,\"53\":5,\"55\":1,\"56\":5,\"59\":1,\"61\":1,\"62\":1,\"64\":1,\"65\":3,\"69\":4,\"78\":1,\"83\":1,\"84\":2}}],[\"语法结构\",{\"1\":{\"9\":1}}],[\"语言\",{\"0\":{\"6\":1,\"41\":1},\"1\":{\"6\":1,\"7\":2,\"9\":1,\"55\":1}}],[\"个字符\",{\"1\":{\"36\":1}}],[\"个\",{\"1\":{\"9\":1,\"27\":2,\"30\":1,\"84\":1}}],[\"式\",{\"1\":{\"9\":1,\"10\":1}}],[\"2.0\",{\"1\":{\"62\":1}}],[\"259005783\",{\"1\":{\"54\":1}}],[\"28\",{\"1\":{\"48\":1}}],[\"225\",{\"1\":{\"45\":1}}],[\"2147483647\",{\"1\":{\"45\":1}}],[\"21.\",{\"1\":{\"21\":1}}],[\"2022\",{\"1\":{\"48\":1}}],[\"2024\",{\"1\":{\"21\":1,\"69\":1}}],[\"20\",{\"1\":{\"45\":2,\"51\":1}}],[\"20.04.\",{\"1\":{\"74\":2}}],[\"20.04\",{\"1\":{\"74\":4}}],[\"20.\",{\"1\":{\"21\":1}}],[\"2\",{\"0\":{\"9\":1,\"32\":1},\"1\":{\"9\":1,\"10\":1,\"18\":1,\"21\":1,\"31\":3,\"32\":2,\"33\":3,\"40\":3,\"43\":1,\"45\":1,\"51\":1,\"56\":2,\"65\":2,\"74\":3,\"77\":1}}],[\"型文法\",{\"0\":{\"8\":1,\"9\":1,\"10\":1},\"1\":{\"9\":1}}],[\"127.0.0.1\",{\"1\":{\"78\":4}}],[\"120\",{\"1\":{\"50\":1}}],[\"123\",{\"1\":{\"46\":2,\"53\":2}}],[\"16807\",{\"1\":{\"45\":3}}],[\"16\",{\"1\":{\"43\":1,\"45\":4}}],[\"10.0\",{\"1\":{\"62\":2}}],[\"1072878269\",{\"1\":{\"54\":1}}],[\"10\",{\"1\":{\"45\":1}}],[\"109\",{\"1\":{\"40\":1}}],[\"1010\",{\"0\":{\"34\":1},\"1\":{\"34\":1}}],[\"10000\",{\"1\":{\"31\":1,\"33\":1}}],[\"1.\",{\"1\":{\"78\":1}}],[\"1.76.0\",{\"1\":{\"69\":2}}],[\"1.72.0\",{\"1\":{\"69\":1}}],[\"1.70\",{\"1\":{\"65\":1}}],[\"1.5.0\",{\"1\":{\"65\":1}}],[\"1.2\",{\"1\":{\"52\":1}}],[\"1.44\",{\"1\":{\"31\":1}}],[\"1.3.00.100\",{\"1\":{\"15\":1}}],[\"1746987\",{\"1\":{\"84\":2}}],[\"1746617\",{\"1\":{\"84\":1}}],[\"17\",{\"1\":{\"25\":1}}],[\"18.\",{\"1\":{\"21\":1}}],[\"139111\",{\"1\":{\"15\":1}}],[\"114514\",{\"1\":{\"45\":1}}],[\"11\",{\"0\":{\"14\":1},\"1\":{\"16\":1,\"69\":1}}],[\"1\",{\"0\":{\"8\":1,\"31\":1},\"1\":{\"9\":1,\"10\":1,\"15\":1,\"16\":2,\"27\":1,\"31\":7,\"32\":2,\"33\":4,\"35\":1,\"36\":1,\"40\":12,\"42\":2,\"43\":3,\"45\":4,\"46\":3,\"50\":3,\"51\":3,\"53\":2,\"56\":2,\"65\":6}}],[\"这一硬\",{\"1\":{\"45\":1}}],[\"这个\",{\"1\":{\"24\":1,\"25\":1,\"40\":1,\"56\":1,\"82\":1}}],[\"这是\",{\"1\":{\"21\":1,\"55\":1,\"66\":1}}],[\"这条\",{\"1\":{\"16\":1}}],[\"这样\",{\"1\":{\"16\":1,\"18\":1,\"40\":1,\"64\":1}}],[\"这里\",{\"1\":{\"15\":1,\"16\":2,\"27\":2,\"31\":1,\"46\":1,\"50\":1,\"53\":2,\"56\":1,\"74\":1,\"82\":1,\"83\":1}}],[\"这些\",{\"1\":{\"15\":2,\"46\":1}}],[\"这\",{\"1\":{\"7\":1,\"46\":1,\"84\":1}}],[\"它会\",{\"1\":{\"56\":1}}],[\"它\",{\"1\":{\"7\":1,\"12\":1,\"35\":1,\"56\":3}}],[\"产生\",{\"1\":{\"7\":1,\"9\":1,\"10\":1}}],[\"由于\",{\"1\":{\"21\":1,\"33\":1,\"45\":1}}],[\"由\",{\"1\":{\"7\":1,\"36\":1}}],[\"可行\",{\"1\":{\"40\":1,\"45\":1}}],[\"可\",{\"1\":{\"36\":1,\"70\":1}}],[\"可视\",{\"1\":{\"27\":1}}],[\"可能\",{\"1\":{\"7\":1,\"16\":2}}],[\"可以\",{\"1\":{\"4\":1,\"33\":1,\"35\":1,\"40\":1,\"42\":1,\"44\":1,\"47\":2,\"51\":2,\"53\":1,\"56\":2,\"65\":1,\"69\":2,\"76\":1,\"82\":2}}],[\"但是\",{\"1\":{\"15\":1,\"46\":1,\"53\":1,\"56\":1,\"82\":3}}],[\"但\",{\"1\":{\"7\":1,\"16\":2,\"40\":1,\"45\":2,\"47\":1,\"55\":1,\"69\":1}}],[\"一张\",{\"1\":{\"84\":1}}],[\"一上午\",{\"1\":{\"84\":1}}],[\"一般\",{\"1\":{\"84\":1}}],[\"一番\",{\"1\":{\"82\":1}}],[\"一直\",{\"1\":{\"72\":1,\"84\":1}}],[\"一项\",{\"1\":{\"56\":1}}],[\"一下\",{\"1\":{\"56\":1}}],[\"一些\",{\"0\":{\"68\":1},\"1\":{\"55\":1}}],[\"一篇\",{\"1\":{\"45\":1,\"76\":1}}],[\"一致\",{\"1\":{\"40\":1}}],[\"一发\",{\"1\":{\"40\":1}}],[\"一\",{\"1\":{\"40\":1,\"46\":1,\"69\":1,\"84\":1}}],[\"一层\",{\"1\":{\"40\":1}}],[\"一道\",{\"1\":{\"40\":1}}],[\"一堵\",{\"1\":{\"36\":1}}],[\"一次\",{\"1\":{\"35\":1,\"40\":1,\"84\":1}}],[\"一格\",{\"1\":{\"35\":1}}],[\"一瞬间\",{\"1\":{\"35\":1}}],[\"一行\",{\"1\":{\"27\":1}}],[\"一样\",{\"1\":{\"16\":1}}],[\"一步步\",{\"1\":{\"16\":1}}],[\"一切正常\",{\"1\":{\"16\":1}}],[\"一会儿\",{\"1\":{\"15\":1}}],[\"一棵\",{\"1\":{\"11\":1,\"12\":1}}],[\"一个\",{\"1\":{\"7\":3,\"11\":1,\"13\":1,\"16\":2,\"28\":1,\"30\":1,\"32\":1,\"35\":1,\"40\":1,\"45\":2,\"47\":1,\"56\":2,\"64\":1,\"69\":1,\"82\":2}}],[\"一种\",{\"1\":{\"5\":1,\"51\":1}}],[\"}\",{\"1\":{\"6\":1,\"21\":3,\"31\":5,\"32\":6,\"33\":5,\"40\":12,\"42\":4,\"43\":3,\"45\":6,\"46\":19,\"50\":2,\"51\":4,\"52\":1,\"53\":9,\"56\":80,\"61\":2,\"62\":4,\"65\":10,\"66\":3,\"70\":2}}],[\"​\",{\"1\":{\"6\":1,\"31\":1,\"46\":1}}],[\"∈\",{\"1\":{\"6\":1}}],[\"且\",{\"1\":{\"6\":1,\"35\":1,\"56\":3,\"70\":1}}],[\"∗\",{\"1\":{\"6\":2,\"40\":1}}],[\"∣\",{\"1\":{\"6\":1}}],[\"xanadu13\",{\"1\":{\"74\":2}}],[\"xa3a53275\",{\"1\":{\"46\":1}}],[\"xor\",{\"1\":{\"47\":1,\"53\":2}}],[\"x86\",{\"1\":{\"69\":2}}],[\"x8dc97987\",{\"1\":{\"46\":1}}],[\"x84adf386\",{\"1\":{\"46\":1}}],[\"xf\",{\"1\":{\"46\":4}}],[\"xffff\",{\"1\":{\"45\":1}}],[\"x4b1d6b30\",{\"1\":{\"46\":1}}],[\"xcbd41fed\",{\"1\":{\"46\":1}}],[\"xccc10ff9\",{\"1\":{\"46\":1}}],[\"x6d411a6a\",{\"1\":{\"46\":1}}],[\"x17110e76\",{\"1\":{\"46\":1}}],[\"x16d16793\",{\"1\":{\"46\":1}}],[\"x0ed24a6a\",{\"1\":{\"46\":1}}],[\"x36e86773\",{\"1\":{\"46\":1}}],[\"x3a697614\",{\"1\":{\"46\":1}}],[\"xecf491de\",{\"1\":{\"46\":1}}],[\"xe0fe08e4\",{\"1\":{\"46\":1}}],[\"xb92fae55\",{\"1\":{\"46\":1}}],[\"x7fff\",{\"1\":{\"45\":1}}],[\"x55\",{\"1\":{\"45\":1,\"53\":2}}],[\"xd7153d80\",{\"1\":{\"46\":1}}],[\"xdf15236c\",{\"1\":{\"46\":1}}],[\"xd\",{\"1\":{\"38\":1}}],[\"x\",{\"1\":{\"6\":3,\"15\":4,\"21\":3,\"31\":5,\"32\":3,\"33\":3,\"36\":1,\"38\":4,\"40\":8,\"45\":1,\"50\":2,\"51\":1,\"63\":2}}],[\"{\",{\"1\":{\"6\":1,\"21\":3,\"31\":5,\"32\":6,\"33\":5,\"40\":12,\"42\":4,\"43\":3,\"45\":6,\"46\":19,\"50\":2,\"51\":4,\"52\":1,\"53\":9,\"56\":80,\"61\":2,\"62\":4,\"65\":10,\"66\":3,\"70\":2}}],[\",\",{\"1\":{\"6\":1,\"9\":3,\"10\":2,\"13\":2,\"15\":5,\"16\":9,\"18\":4,\"20\":3,\"21\":11,\"22\":5,\"26\":2,\"27\":25,\"28\":3,\"30\":1,\"31\":6,\"32\":5,\"33\":6,\"36\":7,\"40\":30,\"42\":1,\"43\":5,\"45\":8,\"46\":33,\"48\":1,\"50\":5,\"51\":1,\"53\":6,\"54\":3,\"55\":4,\"56\":52,\"61\":3,\"62\":9,\"63\":8,\"64\":1,\"65\":18,\"66\":5,\"67\":2,\"69\":15,\"70\":7,\"73\":2,\"74\":15,\"75\":3,\"78\":12,\"82\":8,\"83\":2,\"84\":8}}],[\"即可\",{\"1\":{\"15\":1,\"16\":1,\"20\":1,\"26\":2,\"40\":1,\"53\":1,\"69\":3,\"83\":1}}],[\"即\",{\"1\":{\"6\":1}}],[\")\",{\"0\":{\"63\":1},\"1\":{\"6\":2,\"10\":2,\"18\":1,\"21\":11,\"31\":12,\"32\":13,\"33\":12,\"36\":1,\"40\":31,\"42\":4,\"43\":5,\"45\":12,\"46\":67,\"50\":5,\"51\":1,\"52\":2,\"53\":28,\"56\":134,\"61\":9,\"62\":12,\"63\":7,\"65\":27,\"66\":7,\"70\":4,\"72\":1,\"78\":1,\"83\":1}}],[\"(\",{\"0\":{\"63\":1},\"1\":{\"6\":2,\"10\":2,\"18\":1,\"21\":11,\"31\":12,\"32\":13,\"33\":12,\"36\":1,\"40\":31,\"42\":4,\"43\":5,\"45\":12,\"46\":67,\"50\":5,\"51\":1,\"52\":2,\"53\":28,\"56\":134,\"61\":9,\"62\":12,\"63\":7,\"65\":27,\"66\":7,\"70\":4,\"72\":1,\"78\":1,\"83\":1}}],[\"ln\",{\"1\":{\"75\":1}}],[\"l15\",{\"1\":{\"71\":1}}],[\"lazy\",{\"1\":{\"65\":6,\"66\":3,\"67\":1}}],[\"lchild\",{\"1\":{\"56\":5}}],[\"learn\",{\"1\":{\"73\":1}}],[\"leak\",{\"1\":{\"59\":2}}],[\"let\",{\"1\":{\"56\":12,\"61\":3,\"62\":4,\"63\":2,\"65\":2,\"66\":1}}],[\"leftmost\",{\"1\":{\"56\":4}}],[\"left\",{\"1\":{\"56\":17}}],[\"list\",{\"1\":{\"74\":1,\"84\":1}}],[\"life\",{\"1\":{\"48\":1}}],[\"line\",{\"1\":{\"46\":2}}],[\"linux\",{\"0\":{\"19\":1,\"79\":1,\"80\":1,\"84\":1},\"1\":{\"72\":1,\"74\":1,\"75\":1,\"76\":1,\"80\":1,\"82\":3,\"83\":1,\"84\":4}}],[\"little\",{\"1\":{\"42\":1}}],[\"ll\",{\"1\":{\"31\":1,\"32\":1,\"33\":1}}],[\"loop\",{\"1\":{\"56\":1}}],[\"lo\",{\"1\":{\"45\":2}}],[\"long\",{\"1\":{\"31\":2,\"32\":2,\"33\":2,\"52\":2}}],[\"loglogn\",{\"1\":{\"31\":1}}],[\"lock\",{\"1\":{\"22\":1,\"66\":1}}],[\"localhost\",{\"1\":{\"78\":1}}],[\"local\",{\"1\":{\"16\":1,\"65\":1}}],[\"l\",{\"1\":{\"6\":2}}],[\"，\",{\"0\":{\"28\":1,\"65\":1},\"1\":{\"6\":3,\"7\":3,\"8\":1,\"9\":2,\"10\":2,\"12\":1,\"15\":9,\"16\":22,\"18\":2,\"21\":1,\"23\":2,\"25\":2,\"26\":4,\"27\":6,\"28\":1,\"30\":2,\"31\":1,\"32\":1,\"33\":2,\"35\":4,\"36\":3,\"37\":1,\"40\":16,\"42\":1,\"43\":1,\"44\":2,\"45\":5,\"46\":5,\"47\":1,\"50\":1,\"51\":2,\"53\":5,\"55\":5,\"56\":31,\"64\":6,\"65\":1,\"66\":2,\"69\":8,\"70\":1,\"72\":3,\"73\":1,\"74\":2,\"76\":1,\"78\":4,\"82\":12,\"83\":2,\"84\":18}}],[\"集合\",{\"1\":{\"6\":1}}],[\"组成\",{\"1\":{\"6\":1,\"36\":1}}],[\"出现\",{\"1\":{\"64\":1}}],[\"出于\",{\"1\":{\"64\":1}}],[\"出口\",{\"1\":{\"35\":1,\"36\":1}}],[\"出\",{\"1\":{\"6\":1,\"74\":1}}],[\"出发\",{\"1\":{\"4\":1}}],[\"gui\",{\"1\":{\"73\":2}}],[\"graph\",{\"1\":{\"70\":1}}],[\"grammar\",{\"1\":{\"8\":1,\"9\":1,\"10\":1}}],[\"gnu\",{\"1\":{\"69\":2}}],[\"globalvaluemapcell\",{\"1\":{\"70\":1}}],[\"globals\",{\"1\":{\"70\":1}}],[\"global\",{\"1\":{\"67\":1}}],[\"get\",{\"1\":{\"61\":1,\"65\":5,\"78\":1}}],[\"generator\",{\"1\":{\"54\":1}}],[\"gc\",{\"1\":{\"55\":1}}],[\"gcc\",{\"1\":{\"45\":1}}],[\"gist\",{\"1\":{\"48\":1,\"54\":1}}],[\"github\",{\"1\":{\"48\":1,\"54\":2,\"67\":1,\"71\":1}}],[\"git\",{\"0\":{\"17\":1,\"18\":1},\"1\":{\"18\":4,\"26\":1}}],[\"godbolt\",{\"1\":{\"45\":1}}],[\"google\",{\"1\":{\"15\":1,\"82\":1,\"84\":1}}],[\"gyp\",{\"1\":{\"21\":2}}],[\"gypprocess\",{\"1\":{\"21\":2}}],[\"gypargs\",{\"1\":{\"21\":3}}],[\"g\",{\"1\":{\"6\":3,\"31\":7,\"32\":3,\"33\":6,\"84\":1}}],[\"是因为\",{\"0\":{\"22\":1}}],[\"是\",{\"1\":{\"5\":1,\"7\":1,\"10\":1,\"15\":2,\"16\":2,\"23\":1,\"24\":1,\"25\":1,\"27\":2,\"36\":1,\"40\":3,\"42\":2,\"43\":1,\"45\":1,\"46\":1,\"47\":1,\"50\":1,\"51\":2,\"56\":3,\"72\":1,\"74\":1,\"82\":2,\"84\":2}}],[\"称为\",{\"1\":{\"5\":1,\"6\":1,\"7\":1,\"13\":1}}],[\"只想\",{\"1\":{\"69\":1}}],[\"只读\",{\"0\":{\"65\":1}}],[\"只能\",{\"1\":{\"10\":1,\"46\":1,\"53\":1}}],[\"只有\",{\"1\":{\"9\":1,\"13\":1,\"56\":2}}],[\"只\",{\"1\":{\"5\":1,\"33\":1}}],[\"句柄\",{\"0\":{\"13\":1},\"1\":{\"13\":2}}],[\"句子\",{\"0\":{\"5\":1},\"1\":{\"5\":2,\"6\":1}}],[\"句型\",{\"0\":{\"4\":1},\"1\":{\"4\":1,\"5\":2,\"13\":1}}],[\"非\",{\"1\":{\"4\":1,\"9\":1,\"82\":1}}],[\"又\",{\"1\":{\"4\":1}}],[\"既\",{\"1\":{\"4\":1}}],[\"。\",{\"0\":{\"22\":1},\"1\":{\"4\":2,\"5\":2,\"7\":1,\"9\":1,\"11\":1,\"13\":2,\"15\":4,\"16\":5,\"18\":1,\"21\":1,\"26\":3,\"28\":2,\"30\":1,\"35\":3,\"36\":4,\"37\":1,\"40\":5,\"44\":1,\"45\":3,\"46\":1,\"47\":1,\"51\":3,\"53\":2,\"55\":2,\"64\":2,\"66\":1,\"69\":4,\"70\":1,\"72\":1,\"78\":2,\"82\":4,\"83\":2,\"84\":6}}],[\"）\",{\"0\":{\"32\":1},\"1\":{\"4\":1,\"15\":1,\"16\":3,\"35\":1,\"40\":1,\"45\":1,\"55\":1,\"73\":1,\"84\":2}}],[\"α\",{\"1\":{\"4\":1}}],[\">\",{\"1\":{\"4\":1,\"6\":1,\"9\":3,\"10\":4,\"16\":2,\"31\":9,\"32\":11,\"33\":12,\"40\":13,\"42\":1,\"43\":1,\"45\":13,\"46\":19,\"50\":1,\"51\":9,\"52\":1,\"53\":7,\"56\":19,\"61\":2,\"62\":6,\"63\":8,\"65\":5,\"66\":1,\"70\":2,\"74\":5}}],[\"*\",{\"1\":{\"4\":1,\"31\":1,\"32\":1,\"33\":1,\"40\":1,\"43\":4,\"45\":7,\"46\":8,\"50\":1,\"53\":5,\"56\":54,\"74\":1}}],[\"=\",{\"1\":{\"4\":2,\"6\":2,\"21\":8,\"27\":1,\"31\":13,\"32\":7,\"33\":11,\"34\":1,\"40\":39,\"42\":3,\"45\":15,\"46\":15,\"50\":2,\"51\":4,\"52\":1,\"53\":7,\"56\":35,\"61\":3,\"62\":6,\"63\":2,\"65\":5,\"66\":2,\"69\":3,\"78\":6,\"82\":1}}],[\" \",{\"0\":{\"14\":1,\"18\":2,\"21\":2,\"22\":3,\"26\":1,\"31\":2,\"32\":2,\"33\":2,\"34\":4,\"38\":1,\"39\":1,\"55\":1,\"84\":1},\"1\":{\"4\":2,\"6\":3,\"8\":2,\"9\":20,\"10\":20,\"15\":4,\"16\":6,\"18\":20,\"20\":3,\"21\":51,\"22\":3,\"25\":3,\"26\":2,\"27\":3,\"30\":6,\"31\":100,\"32\":92,\"33\":100,\"35\":5,\"36\":7,\"38\":15,\"39\":1,\"40\":102,\"42\":26,\"43\":38,\"44\":1,\"45\":195,\"46\":288,\"50\":45,\"51\":56,\"52\":17,\"53\":118,\"56\":664,\"61\":27,\"62\":55,\"63\":20,\"65\":137,\"66\":26,\"69\":18,\"70\":28,\"72\":3,\"74\":26,\"75\":5,\"76\":1,\"78\":26,\"80\":2,\"81\":3,\"82\":8,\"83\":2,\"84\":5,\"85\":2}}],[\"src\",{\"1\":{\"67\":1,\"69\":1,\"71\":1}}],[\"sourceforge\",{\"1\":{\"83\":1}}],[\"sound\",{\"1\":{\"82\":1}}],[\"someerr\",{\"1\":{\"63\":3}}],[\"some\",{\"1\":{\"56\":1,\"62\":3,\"63\":2}}],[\"solutions\",{\"1\":{\"82\":1}}],[\"solution\",{\"0\":{\"31\":1,\"32\":1,\"33\":1,\"40\":1,\"59\":1}}],[\"sizeof\",{\"1\":{\"43\":2,\"46\":7,\"53\":6}}],[\"size\",{\"0\":{\"43\":1},\"1\":{\"46\":6,\"53\":3}}],[\"sx\",{\"1\":{\"40\":7}}],[\"sample\",{\"0\":{\"38\":1,\"39\":1}}],[\"share\",{\"1\":{\"75\":2}}],[\"show\",{\"1\":{\"69\":1}}],[\"showproblem\",{\"1\":{\"34\":1}}],[\"short\",{\"1\":{\"43\":1}}],[\"shell\",{\"1\":{\"21\":2}}],[\"sy\",{\"1\":{\"40\":7}}],[\"sync\",{\"1\":{\"31\":1,\"32\":1,\"33\":1,\"40\":1,\"65\":1,\"66\":1}}],[\"systemctl\",{\"1\":{\"78\":2}}],[\"systemd\",{\"1\":{\"78\":1}}],[\"system\",{\"1\":{\"16\":1,\"78\":1}}],[\"smc\",{\"1\":{\"27\":1}}],[\"stop\",{\"1\":{\"84\":1}}],[\"starts\",{\"1\":{\"84\":1}}],[\"stackoverflow\",{\"1\":{\"65\":1}}],[\"static\",{\"0\":{\"57\":1},\"1\":{\"45\":10,\"46\":1,\"51\":3,\"65\":11,\"66\":4,\"67\":1}}],[\"string\",{\"1\":{\"56\":2,\"61\":2,\"62\":4,\"66\":2}}],[\"strict\",{\"1\":{\"21\":1}}],[\"str\",{\"1\":{\"46\":16,\"53\":9,\"56\":5,\"61\":2,\"65\":3,\"66\":1}}],[\"struct\",{\"1\":{\"45\":3,\"46\":1,\"51\":3,\"53\":1,\"56\":2,\"63\":1,\"70\":1}}],[\"step\",{\"1\":{\"40\":5}}],[\"std\",{\"1\":{\"31\":1,\"32\":1,\"33\":1,\"40\":2,\"44\":1,\"45\":1,\"46\":6,\"50\":1,\"51\":1,\"52\":1,\"53\":3,\"56\":10,\"65\":3,\"66\":1}}],[\"stdio\",{\"1\":{\"21\":1,\"31\":1,\"32\":1,\"33\":1,\"40\":1,\"42\":1,\"43\":1}}],[\"scripts\",{\"1\":{\"21\":1}}],[\"spawn\",{\"0\":{\"21\":1},\"1\":{\"21\":3}}],[\"superuser\",{\"1\":{\"84\":1}}],[\"subsystem\",{\"1\":{\"72\":1}}],[\"submit\",{\"1\":{\"31\":1,\"32\":1,\"33\":1}}],[\"sunface\",{\"1\":{\"66\":1}}],[\"sunocean\",{\"1\":{\"48\":1}}],[\"succ\",{\"1\":{\"56\":4}}],[\"successor\",{\"1\":{\"56\":5}}],[\"su\",{\"1\":{\"20\":2}}],[\"sudo\",{\"1\":{\"20\":1,\"78\":3,\"81\":1,\"82\":2}}],[\"server\",{\"1\":{\"83\":2}}],[\"service\",{\"1\":{\"78\":2}}],[\"self\",{\"1\":{\"56\":39,\"67\":1}}],[\"sequence\",{\"1\":{\"46\":3,\"53\":2}}],[\"seq\",{\"1\":{\"46\":5,\"53\":2}}],[\"seed\",{\"1\":{\"45\":2,\"46\":5}}],[\"security\",{\"1\":{\"21\":1}}],[\"set\",{\"1\":{\"16\":1}}],[\"setup\",{\"1\":{\"15\":1}}],[\"sensitive\",{\"1\":{\"8\":1}}],[\"s\",{\"1\":{\"4\":1,\"6\":1,\"9\":1,\"31\":1,\"32\":1,\"33\":1,\"36\":1,\"38\":2,\"40\":1,\"45\":3,\"56\":4,\"75\":1}}],[\"（\",{\"0\":{\"32\":1},\"1\":{\"4\":1,\"15\":1,\"16\":3,\"35\":1,\"40\":1,\"45\":1,\"55\":1,\"73\":1,\"84\":2}}],[\"或者\",{\"1\":{\"16\":1,\"26\":1,\"27\":1,\"73\":1}}],[\"或\",{\"1\":{\"4\":1,\"10\":2,\"37\":1}}],[\"的话\",{\"1\":{\"15\":1,\"16\":2,\"84\":1}}],[\"的\",{\"0\":{\"14\":1,\"17\":1,\"22\":2,\"41\":1,\"53\":1,\"68\":1,\"69\":1},\"1\":{\"4\":3,\"5\":2,\"6\":2,\"7\":1,\"11\":2,\"12\":3,\"13\":4,\"15\":5,\"16\":9,\"18\":1,\"20\":2,\"21\":2,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":5,\"30\":1,\"31\":1,\"33\":2,\"35\":2,\"36\":7,\"40\":9,\"42\":3,\"43\":7,\"44\":2,\"45\":6,\"46\":3,\"47\":1,\"50\":3,\"51\":5,\"53\":1,\"55\":8,\"56\":25,\"64\":5,\"65\":2,\"66\":2,\"69\":2,\"70\":1,\"72\":1,\"73\":1,\"74\":6,\"76\":2,\"78\":3,\"82\":6,\"83\":3,\"84\":6}}],[\"从\",{\"1\":{\"4\":1,\"56\":2,\"74\":1}}],[\"和\",{\"0\":{\"3\":1,\"56\":1},\"1\":{\"15\":2,\"16\":1,\"22\":1,\"27\":1,\"36\":2,\"78\":1,\"82\":1}}],[\"：\",{\"0\":{\"3\":1,\"22\":1},\"1\":{\"6\":1,\"9\":1,\"10\":1,\"15\":1,\"16\":4,\"18\":3,\"20\":2,\"21\":2,\"22\":3,\"23\":1,\"24\":1,\"27\":3,\"28\":3,\"30\":2,\"31\":2,\"32\":2,\"33\":1,\"34\":1,\"36\":5,\"40\":1,\"42\":1,\"43\":1,\"45\":2,\"46\":1,\"47\":1,\"50\":1,\"55\":2,\"56\":1,\"59\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":3,\"69\":2,\"73\":2,\"74\":3,\"75\":2,\"76\":1,\"78\":3,\"82\":5,\"83\":1,\"84\":2}}],[\"！\",{\"0\":{\"28\":1},\"1\":{\"1\":1,\"78\":1}}],[\"空空如也\",{\"1\":{\"1\":1}}],[\"页面\",{\"1\":{\"28\":1}}],[\"页\",{\"0\":{\"1\":1}}],[\"介绍\",{\"0\":{\"1\":1},\"1\":{\"73\":1}}],[\"博客\",{\"0\":{\"0\":1}}]],\"version\":2}}")).map(([e,t])=>[e,It(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const r=Ct[s];e==="suggest"?self.postMessage([e,o,tt(t,r,n)]):e==="search"?self.postMessage([e,o,Z(t,r,n)]):self.postMessage({suggestions:[e,o,tt(t,r,n)],results:[e,o,Z(t,r,n)]})};
//# sourceMappingURL=index.js.map
